/**
 * AllOfUs Public API
 * The API for the AllOfUs data browser and public storefront.
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { AnalysisListResponse } from '../model/analysisListResponse';
import { AnalysisResult } from '../model/analysisResult';
import { AnalysisResultListResponse } from '../model/analysisResultListResponse';
import { ConceptListResponse } from '../model/conceptListResponse';
import { DbDomainListResponse } from '../model/dbDomainListResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataBrowserService {

    protected basePath = 'https://public-api.pmi-ops.org';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Gets list of analysis definitions
     */
    public getAnalyses(extraHttpRequestParams?: any): Observable<AnalysisListResponse> {
        return this.getAnalysesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets results for an analysis id and stratum
     * @param analysisId analysis_id
     * @param stratum1 stratum 1
     * @param stratum2 stratum 2
     */
    public getAnalysisResults(analysisId: number, stratum1?: string, stratum2?: string, extraHttpRequestParams?: any): Observable<AnalysisResultListResponse> {
        return this.getAnalysisResultsWithHttpInfo(analysisId, stratum1, stratum2, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Get children of the given concept
     * @param conceptId concept id to get maps to concepts
     */
    public getChildConcepts(conceptId: number, extraHttpRequestParams?: any): Observable<ConceptListResponse> {
        return this.getChildConceptsWithHttpInfo(conceptId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets count for concept
     * @param conceptId concept id to get count for
     */
    public getConceptCount(conceptId: string, extraHttpRequestParams?: any): Observable<AnalysisResultListResponse> {
        return this.getConceptCountWithHttpInfo(conceptId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets counts for concept by age
     * @param conceptId concept id to get count for
     */
    public getConceptCountByAge(conceptId: string, extraHttpRequestParams?: any): Observable<AnalysisResultListResponse> {
        return this.getConceptCountByAgeWithHttpInfo(conceptId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets counts for concept by gender
     * @param conceptId concept id to get count for
     */
    public getConceptCountByGender(conceptId: string, extraHttpRequestParams?: any): Observable<AnalysisResultListResponse> {
        return this.getConceptCountByGenderWithHttpInfo(conceptId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Searches for concepts in concept table with search string and filters
     * @param conceptName concept name search string
     * @param standardConcept standard concept filter
     * @param conceptCode concept code  filter
     * @param vocabularyId vocabulary id filter
     * @param domainId vocabulary id filter
     */
    public getConceptsSearch(conceptName?: string, standardConcept?: string, conceptCode?: string, vocabularyId?: string, domainId?: string, extraHttpRequestParams?: any): Observable<ConceptListResponse> {
        return this.getConceptsSearchWithHttpInfo(conceptName, standardConcept, conceptCode, vocabularyId, domainId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets list of analysis definitions
     */
    public getDbDomains(extraHttpRequestParams?: any): Observable<DbDomainListResponse> {
        return this.getDbDomainsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets parent concepts for the given concept
     * @param conceptId concept id to get maps to concepts
     */
    public getParentConcepts(conceptId: number, extraHttpRequestParams?: any): Observable<ConceptListResponse> {
        return this.getParentConceptsWithHttpInfo(conceptId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Gets results for an analysis id and stratum
     */
    public getParticipantCount(extraHttpRequestParams?: any): Observable<AnalysisResult> {
        return this.getParticipantCountWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * 
     * Gets list of analysis definitions
     */
    public getAnalysesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/analyses';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets results for an analysis id and stratum
     * @param analysisId analysis_id
     * @param stratum1 stratum 1
     * @param stratum2 stratum 2
     */
    public getAnalysisResultsWithHttpInfo(analysisId: number, stratum1?: string, stratum2?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/analysis-results';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'analysisId' is not null or undefined
        if (analysisId === null || analysisId === undefined) {
            throw new Error('Required parameter analysisId was null or undefined when calling getAnalysisResults.');
        }
        if (analysisId !== undefined) {
            queryParameters.set('analysis_id', <any>analysisId);
        }

        if (stratum1 !== undefined) {
            queryParameters.set('stratum_1', <any>stratum1);
        }

        if (stratum2 !== undefined) {
            queryParameters.set('stratum_2', <any>stratum2);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Get children of the given concept
     * @param conceptId concept id to get maps to concepts
     */
    public getChildConceptsWithHttpInfo(conceptId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/child-concepts';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'conceptId' is not null or undefined
        if (conceptId === null || conceptId === undefined) {
            throw new Error('Required parameter conceptId was null or undefined when calling getChildConcepts.');
        }
        if (conceptId !== undefined) {
            queryParameters.set('concept_id', <any>conceptId);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets count for concept
     * @param conceptId concept id to get count for
     */
    public getConceptCountWithHttpInfo(conceptId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/concept-count';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'conceptId' is not null or undefined
        if (conceptId === null || conceptId === undefined) {
            throw new Error('Required parameter conceptId was null or undefined when calling getConceptCount.');
        }
        if (conceptId !== undefined) {
            queryParameters.set('concept_id', <any>conceptId);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets counts for concept by age
     * @param conceptId concept id to get count for
     */
    public getConceptCountByAgeWithHttpInfo(conceptId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/concept-count-by-age';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'conceptId' is not null or undefined
        if (conceptId === null || conceptId === undefined) {
            throw new Error('Required parameter conceptId was null or undefined when calling getConceptCountByAge.');
        }
        if (conceptId !== undefined) {
            queryParameters.set('concept_id', <any>conceptId);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets counts for concept by gender
     * @param conceptId concept id to get count for
     */
    public getConceptCountByGenderWithHttpInfo(conceptId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/concept-count-by-gender';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'conceptId' is not null or undefined
        if (conceptId === null || conceptId === undefined) {
            throw new Error('Required parameter conceptId was null or undefined when calling getConceptCountByGender.');
        }
        if (conceptId !== undefined) {
            queryParameters.set('concept_id', <any>conceptId);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Searches for concepts in concept table with search string and filters
     * @param conceptName concept name search string
     * @param standardConcept standard concept filter
     * @param conceptCode concept code  filter
     * @param vocabularyId vocabulary id filter
     * @param domainId vocabulary id filter
     */
    public getConceptsSearchWithHttpInfo(conceptName?: string, standardConcept?: string, conceptCode?: string, vocabularyId?: string, domainId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/search-concepts';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (conceptName !== undefined) {
            queryParameters.set('concept_name', <any>conceptName);
        }

        if (standardConcept !== undefined) {
            queryParameters.set('standard_concept', <any>standardConcept);
        }

        if (conceptCode !== undefined) {
            queryParameters.set('concept_code', <any>conceptCode);
        }

        if (vocabularyId !== undefined) {
            queryParameters.set('vocabulary_id', <any>vocabularyId);
        }

        if (domainId !== undefined) {
            queryParameters.set('domain_id', <any>domainId);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets list of analysis definitions
     */
    public getDbDomainsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/db-domains';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets parent concepts for the given concept
     * @param conceptId concept id to get maps to concepts
     */
    public getParentConceptsWithHttpInfo(conceptId: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/parent-concepts';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'conceptId' is not null or undefined
        if (conceptId === null || conceptId === undefined) {
            throw new Error('Required parameter conceptId was null or undefined when calling getParentConcepts.');
        }
        if (conceptId !== undefined) {
            queryParameters.set('concept_id', <any>conceptId);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Gets results for an analysis id and stratum
     */
    public getParticipantCountWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/v1/databrowser/participant-count';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
