/*
 * Leonardo
 * Workbench notebooks service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.pmiops.workbench.notebooks.api;

import org.pmiops.workbench.notebooks.ApiCallback;
import org.pmiops.workbench.notebooks.ApiClient;
import org.pmiops.workbench.notebooks.ApiException;
import org.pmiops.workbench.notebooks.ApiResponse;
import org.pmiops.workbench.notebooks.Configuration;
import org.pmiops.workbench.notebooks.Pair;
import org.pmiops.workbench.notebooks.ProgressRequestBody;
import org.pmiops.workbench.notebooks.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.pmiops.workbench.notebooks.model.InlineResponse400;
import org.pmiops.workbench.notebooks.model.JupyterContents;
import org.pmiops.workbench.notebooks.model.JupyterModel;
import org.pmiops.workbench.notebooks.model.Model;

import io.opencensus.common.Scope;
import io.opencensus.trace.AttributeValue;
import io.opencensus.trace.Span;
import io.opencensus.trace.Status;
import io.opencensus.trace.Tracer;
import io.opencensus.trace.Tracing;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JupyterApi {
    private static final Tracer tracer = Tracing.getTracer();
    private ApiClient apiClient;

    public JupyterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JupyterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getRootContents
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param fileName fileName (required)
     * @param type File type (&#39;file&#39;, &#39;directory&#39;) (optional)
     * @param format How file content should be returned (&#39;text&#39;, &#39;base64&#39;) (optional)
     * @param content Return content (0 for no content, 1 for return content) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRootContentsCall(String googleProject, String clusterName, String fileName, String type, String format, Integer content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notebooks/{googleProject}/{clusterName}/api/contents/{fileName}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "format", format));
        if (content != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "content", content));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRootContentsValidateBeforeCall(String googleProject, String clusterName, String fileName, String type, String format, Integer content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling getRootContents(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling getRootContents(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getRootContents(Async)");
        }
        

        com.squareup.okhttp.Call call = getRootContentsCall(googleProject, clusterName, fileName, type, format, content, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Get contents of file or directory
     * A client can optionally specify a type and/or format argument via URL parameter. When given, the Contents service shall return a model in the requested type and/or format. If the request cannot be satisfied, e.g. type&#x3D;text is requested, but the file is binary, then the request shall fail with 400 and have a JSON response containing a &#39;reason&#39; field, with the value &#39;bad format&#39; or &#39;bad type&#39;, depending on what was requested.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param fileName fileName (required)
     * @param type File type (&#39;file&#39;, &#39;directory&#39;) (optional)
     * @param format How file content should be returned (&#39;text&#39;, &#39;base64&#39;) (optional)
     * @param content Return content (0 for no content, 1 for return content) (optional)
     * @return JupyterContents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JupyterContents getRootContents(String googleProject, String clusterName, String fileName, String type, String format, Integer content) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("JupyterApi.getRootContents", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/notebooks/{googleProject}/{clusterName}/api/contents/{fileName}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("GET"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Get contents of file or directory"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("JupyterContents"));

        try {
            // Create and execute the API request.
            ApiResponse<JupyterContents> resp = getRootContentsWithHttpInfo(googleProject, clusterName, fileName, type, format, content);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Get contents of file or directory
     * A client can optionally specify a type and/or format argument via URL parameter. When given, the Contents service shall return a model in the requested type and/or format. If the request cannot be satisfied, e.g. type&#x3D;text is requested, but the file is binary, then the request shall fail with 400 and have a JSON response containing a &#39;reason&#39; field, with the value &#39;bad format&#39; or &#39;bad type&#39;, depending on what was requested.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param fileName fileName (required)
     * @param type File type (&#39;file&#39;, &#39;directory&#39;) (optional)
     * @param format How file content should be returned (&#39;text&#39;, &#39;base64&#39;) (optional)
     * @param content Return content (0 for no content, 1 for return content) (optional)
     * @return ApiResponse&lt;JupyterContents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JupyterContents> getRootContentsWithHttpInfo(String googleProject, String clusterName, String fileName, String type, String format, Integer content) throws ApiException {
        com.squareup.okhttp.Call call = getRootContentsValidateBeforeCall(googleProject, clusterName, fileName, type, format, content, null, null);
        Type localVarReturnType = new TypeToken<JupyterContents>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contents of file or directory (asynchronously)
     * A client can optionally specify a type and/or format argument via URL parameter. When given, the Contents service shall return a model in the requested type and/or format. If the request cannot be satisfied, e.g. type&#x3D;text is requested, but the file is binary, then the request shall fail with 400 and have a JSON response containing a &#39;reason&#39; field, with the value &#39;bad format&#39; or &#39;bad type&#39;, depending on what was requested.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param fileName fileName (required)
     * @param type File type (&#39;file&#39;, &#39;directory&#39;) (optional)
     * @param format How file content should be returned (&#39;text&#39;, &#39;base64&#39;) (optional)
     * @param content Return content (0 for no content, 1 for return content) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRootContentsAsync(String googleProject, String clusterName, String fileName, String type, String format, Integer content, final ApiCallback<JupyterContents> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRootContentsValidateBeforeCall(googleProject, clusterName, fileName, type, format, content, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JupyterContents>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postContents
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param workspaceDir workspaceDir (required)
     * @param model Path of file to copy (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postContentsCall(String googleProject, String clusterName, String workspaceDir, Model model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/notebooks/{googleProject}/{clusterName}/api/contents/workspaces/{workspaceDir}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()))
            .replaceAll("\\{" + "workspaceDir" + "\\}", apiClient.escapeString(workspaceDir.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postContentsValidateBeforeCall(String googleProject, String clusterName, String workspaceDir, Model model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling postContents(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling postContents(Async)");
        }
        
        // verify the required parameter 'workspaceDir' is set
        if (workspaceDir == null) {
            throw new ApiException("Missing the required parameter 'workspaceDir' when calling postContents(Async)");
        }
        

        com.squareup.okhttp.Call call = postContentsCall(googleProject, clusterName, workspaceDir, model, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Create a new file in the specified path
     * A POST to /api/contents/path creates a New untitled, empty file or directory. A POST to /api/contents/path with body {&#39;copy_from&#39;: &#39;/path/to/OtherNotebook.ipynb&#39;} creates a new copy of OtherNotebook in path.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param workspaceDir workspaceDir (required)
     * @param model Path of file to copy (optional)
     * @return JupyterContents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JupyterContents postContents(String googleProject, String clusterName, String workspaceDir, Model model) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("JupyterApi.postContents", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/notebooks/{googleProject}/{clusterName}/api/contents/workspaces/{workspaceDir}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("POST"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Create a new file in the specified path"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("JupyterContents"));

        try {
            // Create and execute the API request.
            ApiResponse<JupyterContents> resp = postContentsWithHttpInfo(googleProject, clusterName, workspaceDir, model);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Create a new file in the specified path
     * A POST to /api/contents/path creates a New untitled, empty file or directory. A POST to /api/contents/path with body {&#39;copy_from&#39;: &#39;/path/to/OtherNotebook.ipynb&#39;} creates a new copy of OtherNotebook in path.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param workspaceDir workspaceDir (required)
     * @param model Path of file to copy (optional)
     * @return ApiResponse&lt;JupyterContents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JupyterContents> postContentsWithHttpInfo(String googleProject, String clusterName, String workspaceDir, Model model) throws ApiException {
        com.squareup.okhttp.Call call = postContentsValidateBeforeCall(googleProject, clusterName, workspaceDir, model, null, null);
        Type localVarReturnType = new TypeToken<JupyterContents>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new file in the specified path (asynchronously)
     * A POST to /api/contents/path creates a New untitled, empty file or directory. A POST to /api/contents/path with body {&#39;copy_from&#39;: &#39;/path/to/OtherNotebook.ipynb&#39;} creates a new copy of OtherNotebook in path.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param workspaceDir workspaceDir (required)
     * @param model Path of file to copy (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postContentsAsync(String googleProject, String clusterName, String workspaceDir, Model model, final ApiCallback<JupyterContents> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postContentsValidateBeforeCall(googleProject, clusterName, workspaceDir, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JupyterContents>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putContents
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param workspaceDir workspaceDir (required)
     * @param fileName fileName (required)
     * @param model New path for file or directory (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putContentsCall(String googleProject, String clusterName, String workspaceDir, String fileName, JupyterModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/notebooks/{googleProject}/{clusterName}/api/contents/workspaces/{workspaceDir}/{fileName}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()))
            .replaceAll("\\{" + "workspaceDir" + "\\}", apiClient.escapeString(workspaceDir.toString()))
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putContentsValidateBeforeCall(String googleProject, String clusterName, String workspaceDir, String fileName, JupyterModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling putContents(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling putContents(Async)");
        }
        
        // verify the required parameter 'workspaceDir' is set
        if (workspaceDir == null) {
            throw new ApiException("Missing the required parameter 'workspaceDir' when calling putContents(Async)");
        }
        
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling putContents(Async)");
        }
        

        com.squareup.okhttp.Call call = putContentsCall(googleProject, clusterName, workspaceDir, fileName, model, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Save or upload file.
     * Saves the file in the location specified by name and path.  PUT is very similar to POST, but the requester specifies the name, whereas with POST, the server picks the name.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param workspaceDir workspaceDir (required)
     * @param fileName fileName (required)
     * @param model New path for file or directory (optional)
     * @return JupyterContents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JupyterContents putContents(String googleProject, String clusterName, String workspaceDir, String fileName, JupyterModel model) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("JupyterApi.putContents", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/notebooks/{googleProject}/{clusterName}/api/contents/workspaces/{workspaceDir}/{fileName}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("PUT"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Save or upload file."));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("JupyterContents"));

        try {
            // Create and execute the API request.
            ApiResponse<JupyterContents> resp = putContentsWithHttpInfo(googleProject, clusterName, workspaceDir, fileName, model);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Save or upload file.
     * Saves the file in the location specified by name and path.  PUT is very similar to POST, but the requester specifies the name, whereas with POST, the server picks the name.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param workspaceDir workspaceDir (required)
     * @param fileName fileName (required)
     * @param model New path for file or directory (optional)
     * @return ApiResponse&lt;JupyterContents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JupyterContents> putContentsWithHttpInfo(String googleProject, String clusterName, String workspaceDir, String fileName, JupyterModel model) throws ApiException {
        com.squareup.okhttp.Call call = putContentsValidateBeforeCall(googleProject, clusterName, workspaceDir, fileName, model, null, null);
        Type localVarReturnType = new TypeToken<JupyterContents>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Save or upload file. (asynchronously)
     * Saves the file in the location specified by name and path.  PUT is very similar to POST, but the requester specifies the name, whereas with POST, the server picks the name.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param workspaceDir workspaceDir (required)
     * @param fileName fileName (required)
     * @param model New path for file or directory (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putContentsAsync(String googleProject, String clusterName, String workspaceDir, String fileName, JupyterModel model, final ApiCallback<JupyterContents> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putContentsValidateBeforeCall(googleProject, clusterName, workspaceDir, fileName, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JupyterContents>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
