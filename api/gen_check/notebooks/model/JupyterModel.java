/*
 * Leonardo
 * Workbench notebooks service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.pmiops.workbench.notebooks.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * JupyterModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-01-05T14:10:53.265-05:00")
public class JupyterModel implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("name")
  private String name = null;

  @SerializedName("path")
  private String path = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("format")
  private String format = null;

  @SerializedName("content")
  private String content = null;

  public JupyterModel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The new filename if changed
   * @return name
  **/
  @ApiModelProperty(value = "The new filename if changed")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public JupyterModel path(String path) {
    this.path = path;
    return this;
  }

   /**
   * New path for file or directory
   * @return path
  **/
  @ApiModelProperty(value = "New path for file or directory")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public JupyterModel type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Path dtype (&#39;notebook&#39;, &#39;file&#39;, &#39;directory&#39;)
   * @return type
  **/
  @ApiModelProperty(value = "Path dtype ('notebook', 'file', 'directory')")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public JupyterModel format(String format) {
    this.format = format;
    return this;
  }

   /**
   * File format (&#39;json&#39;, &#39;text&#39;, &#39;base64&#39;)
   * @return format
  **/
  @ApiModelProperty(value = "File format ('json', 'text', 'base64')")
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public JupyterModel content(String content) {
    this.content = content;
    return this;
  }

   /**
   * The actual body of the document excluding directory type
   * @return content
  **/
  @ApiModelProperty(value = "The actual body of the document excluding directory type")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JupyterModel jupyterModel = (JupyterModel) o;
    return Objects.equals(this.name, jupyterModel.name) &&
        Objects.equals(this.path, jupyterModel.path) &&
        Objects.equals(this.type, jupyterModel.type) &&
        Objects.equals(this.format, jupyterModel.format) &&
        Objects.equals(this.content, jupyterModel.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, path, type, format, content);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JupyterModel {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

