/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.pmiops.workbench.api;

import org.pmiops.workbench.model.DataDictionaryEntry;
import org.pmiops.workbench.model.DataSet;
import org.pmiops.workbench.model.DataSetCodeResponse;
import org.pmiops.workbench.model.DataSetExportRequest;
import org.pmiops.workbench.model.DataSetListResponse;
import org.pmiops.workbench.model.DataSetPreviewRequest;
import org.pmiops.workbench.model.DataSetPreviewResponse;
import org.pmiops.workbench.model.DataSetRequest;
import org.pmiops.workbench.model.DomainValuesResponse;
import org.pmiops.workbench.model.EmptyResponse;
import org.pmiops.workbench.model.ErrorResponse;
import org.pmiops.workbench.model.MarkDataSetRequest;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-05T12:00:54.413-05:00")

@Api(value = "DataSet", description = "the DataSet API")
public interface DataSetApi {

    @ApiOperation(value = "", notes = "Creates Data Set ", response = DataSet.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data set has been created successfully", response = DataSet.class),
        @ApiResponse(code = 400, message = "Invalid data set request", response = ErrorResponse.class),
        @ApiResponse(code = 409, message = "Data Set with the same name already exists", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-sets",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DataSet> createDataSet(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody DataSetRequest dataSetRequest);


    @ApiOperation(value = "", notes = "Deletes the data set with the specified ID", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "ACCEPTED", response = EmptyResponse.class) })
    
    @RequestMapping(value = "/v1/{workspaceNamespace}/{workspaceId}/data-sets/{dataSetId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<EmptyResponse> deleteDataSet(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Data set ID",required=true ) @PathVariable("dataSetId") Long dataSetId);


    @ApiOperation(value = "", notes = "Exports a data set query to a notebook ", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Data set has been exported correctly", response = EmptyResponse.class),
        @ApiResponse(code = 400, message = "Invalid data set request", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/{workspaceNamespace}/{workspaceId}/data-set/exportToNotebook",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EmptyResponse> exportToNotebook(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody DataSetExportRequest dataSetExportRequest);


    @ApiOperation(value = "", notes = "Given a Data Set, return the SQL query built from it. ", response = DataSetCodeResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A SQL query for each domain in the Data Set ", response = DataSetCodeResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/generateCode/{kernelType}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DataSetCodeResponse> generateCode(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "",required=true ) @PathVariable("kernelType") String kernelType,@ApiParam(value = "" ,required=true )  @Valid @RequestBody DataSetRequest dataSet);


    @ApiOperation(value = "", notes = "", response = DataDictionaryEntry.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Detailed definition of a given domain value for the specified CDR Version", response = DataDictionaryEntry.class) })
    
    @RequestMapping(value = "/v1/cdrVersionId/{cdrVersionId}/domain/{domain}/domainValue/{domainValue}/dataDictionaryEntry",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DataDictionaryEntry> getDataDictionaryEntry(@ApiParam(value = "",required=true ) @PathVariable("cdrVersionId") Long cdrVersionId,@ApiParam(value = "",required=true ) @PathVariable("domain") String domain,@ApiParam(value = "",required=true ) @PathVariable("domainValue") String domainValue);


    @ApiOperation(value = "", notes = "", response = DataSet.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The data set with the specified ID", response = DataSet.class) })
    
    @RequestMapping(value = "/v1/{workspaceNamespace}/{workspaceId}/data-sets/{dataSetId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DataSet> getDataSet(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Data set ID",required=true ) @PathVariable("dataSetId") Long dataSetId);


    @ApiOperation(value = "", notes = "", response = DataSetListResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of data sets containg cohort/concept Id passed.", response = DataSetListResponse.class) })
    
    @RequestMapping(value = "/v1/{workspaceNamespace}/{workspaceId}/data-sets/dataSetByResourceId",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DataSetListResponse> getDataSetByResourceId(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId, @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "resourceType", required = true) String resourceType, @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "id", required = true) Long id);


    @ApiOperation(value = "", notes = "Returns all data sets in a workspace", response = DataSetListResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of data sets.", response = DataSetListResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-sets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DataSetListResponse> getDataSetsInWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Returns all column names/values for a given domain. ", response = DomainValuesResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the values/column names in the domain.", response = DomainValuesResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/domainValues/{domain}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DomainValuesResponse> getValuesFromDomain(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "",required=true ) @PathVariable("domain") String domain);


    @ApiOperation(value = "", notes = "", response = Boolean.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Mark all dataset with cohort/concept id as dirty", response = Boolean.class) })
    
    @RequestMapping(value = "/v1/{workspaceNamespace}/{workspaceId}/data-set/markDirty",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Boolean> markDirty(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = ""  )  @Valid @RequestBody MarkDataSetRequest markDataSetRequest);


    @ApiOperation(value = "", notes = "Preview data set ", response = DataSetPreviewResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A SQL query for each domain in the Data Set ", response = DataSetPreviewResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/preview",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DataSetPreviewResponse> previewDataSetByDomain(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody DataSetPreviewRequest dataSetPreviewRequest);


    @ApiOperation(value = "", notes = "", response = DataSet.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "dataSet", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated data set.", response = DataSet.class),
        @ApiResponse(code = 409, message = "Data Set with the same name already exists", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/{workspaceNamespace}/{workspaceId}/data-sets/{dataSetId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<DataSet> updateDataSet(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Data set ID",required=true ) @PathVariable("dataSetId") Long dataSetId,@ApiParam(value = "data set definition"  )  @Valid @RequestBody DataSetRequest dataSet);

}
