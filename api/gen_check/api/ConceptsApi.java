/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.pmiops.workbench.api;

import org.pmiops.workbench.model.ConceptListResponse;
import org.pmiops.workbench.model.DomainInfoResponse;
import org.pmiops.workbench.model.SearchConceptsRequest;
import org.pmiops.workbench.model.SurveyAnswerResponse;
import org.pmiops.workbench.model.SurveyQuestionsResponse;
import org.pmiops.workbench.model.SurveysResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-05T12:07:33.190-05:00")

@Api(value = "Concepts", description = "the Concepts API")
public interface ConceptsApi {

    @ApiOperation(value = "", notes = "Returns information on the domains of data in the workspace's CDR version along with participant and concept counts ", response = DomainInfoResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "information on the domains", response = DomainInfoResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/domainInfo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DomainInfoResponse> getDomainInfo(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Returns with all the answer for survey Question ", response = SurveyAnswerResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of Survey Details with Answer", response = SurveyAnswerResponse.class, responseContainer = "List") })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/surveyAnswer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SurveyAnswerResponse>> getSurveyAnswers(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId, @NotNull@ApiParam(value = "", required = true) @RequestParam(value = "questionConceptId", required = true) Long questionConceptId);


    @ApiOperation(value = "", notes = "Returns survey information in the workspace's CDR version along with participant and question count ", response = SurveysResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "information about the surveys", response = SurveysResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/surveyInfo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SurveysResponse> getSurveyInfo(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Returns survey questions and answers in the workspace's CDR version ", response = SurveyQuestionsResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "information about the surveys", response = SurveyQuestionsResponse.class, responseContainer = "List") })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/{surveyName}/surveyQuestions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<SurveyQuestionsResponse>> getSurveyQuestions(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "",required=true ) @PathVariable("surveyName") String surveyName);


    @ApiOperation(value = "", notes = "Searches for concepts in concept table by name, and optionally filter on domain, vocabulary IDs, or standard concept status. Uses the CDR version affiliated with the workspace specified in the path. ", response = ConceptListResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "concepts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A collection of concepts", response = ConceptListResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/searchConcepts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ConceptListResponse> searchConcepts(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "concept search request"  )  @Valid @RequestBody SearchConceptsRequest request);

}
