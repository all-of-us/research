/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.pmiops.workbench.api;

import org.pmiops.workbench.model.CloneWorkspaceRequest;
import org.pmiops.workbench.model.CloneWorkspaceResponse;
import org.pmiops.workbench.model.CopyRequest;
import org.pmiops.workbench.model.EmptyResponse;
import org.pmiops.workbench.model.ErrorResponse;
import org.pmiops.workbench.model.FileDetail;
import org.pmiops.workbench.model.NotebookLockingMetadataResponse;
import org.pmiops.workbench.model.NotebookRename;
import org.pmiops.workbench.model.ReadOnlyNotebookResponse;
import org.pmiops.workbench.model.RecentWorkspaceResponse;
import org.pmiops.workbench.model.ResearchPurposeReviewRequest;
import org.pmiops.workbench.model.ShareWorkspaceRequest;
import org.pmiops.workbench.model.UpdateWorkspaceRequest;
import org.pmiops.workbench.model.Workspace;
import org.pmiops.workbench.model.WorkspaceListResponse;
import org.pmiops.workbench.model.WorkspaceResponse;
import org.pmiops.workbench.model.WorkspaceResponseListResponse;
import org.pmiops.workbench.model.WorkspaceUserRolesResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-05T11:48:19.506-05:00")

@Api(value = "Workspaces", description = "the Workspaces API")
public interface WorkspacesApi {

    @ApiOperation(value = "", notes = "Duplicates specified notebook", response = FileDetail.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful duplicate", response = FileDetail.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/duplicate",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<FileDetail> cloneNotebook(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "",required=true ) @PathVariable("notebookName") String notebookName);


    @ApiOperation(value = "", notes = "Duplicate an existing workspace, with given modifications to workspace metadata. Caller will own the newly duplicated workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be duplicated:   - the associated Firecloud workspace   - cohorts, along with reviews and annotations   - notebooks located in the default notebook directory for this workspace ", response = CloneWorkspaceResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful duplicate response", response = CloneWorkspaceResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/duplicate",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CloneWorkspaceResponse> cloneWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = ""  )  @Valid @RequestBody CloneWorkspaceRequest body);


    @ApiOperation(value = "", notes = "Copy specified notebook in path to specified workspace in body", response = FileDetail.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful copy", response = FileDetail.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/copy",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<FileDetail> copyNotebook(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "",required=true ) @PathVariable("notebookName") String notebookName,@ApiParam(value = "" ,required=true )  @Valid @RequestBody CopyRequest copyNotebookRequest);


    @ApiOperation(value = "", notes = "Creates a workspace", response = Workspace.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The workspace that was created.", response = Workspace.class) })
    
    @RequestMapping(value = "/v1/workspaces",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Workspace> createWorkspace(@ApiParam(value = "workspace definition"  )  @Valid @RequestBody Workspace workspace);


    @ApiOperation(value = "", notes = "Deletes specified notebook", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful delete", response = EmptyResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/delete",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<EmptyResponse> deleteNotebook(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "",required=true ) @PathVariable("notebookName") String notebookName);


    @ApiOperation(value = "", notes = "Deletes the workspace definition with the specified ID and namespace", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Workspace deletion request accepted", response = EmptyResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<EmptyResponse> deleteWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Returns the user roles for all collaborators on a workspace", response = WorkspaceUserRolesResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of workspace collaborators", response = WorkspaceUserRolesResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/userRoles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<WorkspaceUserRolesResponse> getFirecloudWorkspaceUserRoles(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "Get details of Python files from google Bucket directory notebook", notes = "Returns list of name and path of python files from google bucket, directory notebook. ", response = FileDetail.class, responseContainer = "List", authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of files", response = FileDetail.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Workspace not found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Internal Error", response = ErrorResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebook-list",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<FileDetail>> getNoteBookList(@ApiParam(value = "workspaceNamespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "workspaceId",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "Get the locking metadata for a notebook", notes = "Get the locking metadata for a notebook, if available.  If the notebook is not locked (e.g. at first creation) this may be empty.  Additionally, the caller of this endpoint may not have the appropriate permissions to determine who is locking this notebook. When this is the case, the lastLockedBy field is set to UNKNOWN. ", response = NotebookLockingMetadataResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The locking metadata fields for the notebook", response = NotebookLockingMetadataResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/lockingMetadata",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<NotebookLockingMetadataResponse> getNotebookLockingMetadata(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "",required=true ) @PathVariable("notebookName") String notebookName);


    @ApiOperation(value = "", notes = "Returns a list of published workspaces", response = WorkspaceResponseListResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of workspace definitions.", response = WorkspaceResponseListResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/published",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<WorkspaceResponseListResponse> getPublishedWorkspaces();


    @ApiOperation(value = "", notes = "Returns the workspaces edited by the user in descending order of update time", response = RecentWorkspaceResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of workspaces order by last-updated time in descending order", response = RecentWorkspaceResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/user-recent-workspaces",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<RecentWorkspaceResponse> getUserRecentWorkspaces();


    @ApiOperation(value = "", notes = "Returns the workspace definition with the specified ID and namespace", response = WorkspaceResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A workspace response containing workspace and access level", response = WorkspaceResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<WorkspaceResponse> getWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Returns all workspaces that a user has access to", response = WorkspaceResponseListResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of workspace definitions.", response = WorkspaceResponseListResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<WorkspaceResponseListResponse> getWorkspaces();


    @ApiOperation(value = "", notes = "Returns workspaces that need research purpose review. Requires REVIEW_RESEARCH_PURPOSE authority. ", response = WorkspaceListResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of workspaces", response = WorkspaceListResponse.class) })
    
    @RequestMapping(value = "/v1/admin/workspaces/review",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<WorkspaceListResponse> getWorkspacesForReview();


    @ApiOperation(value = "", notes = "Makes a workspace public to all AoU registered users. Requires FEATURED_WORKSPACE_ADMIN authority. ", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = EmptyResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/publish",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EmptyResponse> publishWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Get the HTML for a read only view of the notebook", response = ReadOnlyNotebookResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "HTML Read Only version of the notebook", response = ReadOnlyNotebookResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/readonly",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ReadOnlyNotebookResponse> readOnlyNotebook(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "",required=true ) @PathVariable("notebookName") String notebookName);


    @ApiOperation(value = "", notes = "Renames specified notebook", response = FileDetail.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful rename", response = FileDetail.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/rename",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<FileDetail> renameNotebook(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "new name for notebook" ,required=true )  @Valid @RequestBody NotebookRename notebookRename);


    @ApiOperation(value = "", notes = "Sets a research purpose review result.", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = EmptyResponse.class) })
    
    @RequestMapping(value = "/v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/review",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<EmptyResponse> reviewWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "result of the research purpose review"  )  @Valid @RequestBody ResearchPurposeReviewRequest review);


    @ApiOperation(value = "", notes = "Shares a workspace with the given users and permissions. Note that the entire ACL must be provided to this method (including all existing users and roles), not just the additional roles desired. Clients should first fetch existing ACLs via the getFirecloudWorkspaceUserRoles method, make any changes desired, then pass the final list to this method. ", response = WorkspaceUserRolesResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful share response", response = WorkspaceUserRolesResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/share",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<WorkspaceUserRolesResponse> shareWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "users to share the workspace with"  )  @Valid @RequestBody ShareWorkspaceRequest body);


    @ApiOperation(value = "", notes = "Makes a workspace public to all AoU registered users. Requires FEATURED_WORKSPACE_ADMIN authority. ", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = EmptyResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/unpublish",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<EmptyResponse> unpublishWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Add/update user recent workspaces", response = RecentWorkspaceResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully added/updated", response = RecentWorkspaceResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-workspaces/update",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RecentWorkspaceResponse> updateRecentWorkspaces(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Modifies the workspace definition with the specified ID and namespace; fields that are omitted will not be modified ", response = Workspace.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "workspaces", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated workspace definition", response = Workspace.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Workspace> updateWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "workspace definition"  )  @Valid @RequestBody UpdateWorkspaceRequest workspace);

}
