/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.pmiops.workbench.api;

import org.pmiops.workbench.model.CohortAnnotationDefinition;
import org.pmiops.workbench.model.CohortAnnotationDefinitionListResponse;
import org.pmiops.workbench.model.EmptyResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-05T11:48:19.506-05:00")

@Api(value = "CohortAnnotationDefinition", description = "the CohortAnnotationDefinition API")
public interface CohortAnnotationDefinitionApi {

    @ApiOperation(value = "", notes = "This endpoint will create a CohortAnnotationDefinition.", response = CohortAnnotationDefinition.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohortAnnotationDefinition", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A CohortAnnotationDefinition.", response = CohortAnnotationDefinition.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CohortAnnotationDefinition> createCohortAnnotationDefinition(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Cohort ID",required=true ) @PathVariable("cohortId") Long cohortId,@ApiParam(value = "CohortAnnotationDefinition creation request body" ,required=true )  @Valid @RequestBody CohortAnnotationDefinition request);


    @ApiOperation(value = "", notes = "Deletes the CohortAnnotationDefinition with the specified ID", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohortAnnotationDefinition", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "CohortAnnotationDefinition deletion request accepted", response = EmptyResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<EmptyResponse> deleteCohortAnnotationDefinition(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Cohort ID",required=true ) @PathVariable("cohortId") Long cohortId,@ApiParam(value = "specifies which CohortAnnotationDefinition.",required=true ) @PathVariable("annotationDefinitionId") Long annotationDefinitionId);


    @ApiOperation(value = "", notes = "Returns a CohortAnnotationDefinition.", response = CohortAnnotationDefinition.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohortAnnotationDefinition", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A CohortAnnotationDefinition", response = CohortAnnotationDefinition.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CohortAnnotationDefinition> getCohortAnnotationDefinition(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Cohort ID",required=true ) @PathVariable("cohortId") Long cohortId,@ApiParam(value = "specifies which CohortAnnotationDefinition.",required=true ) @PathVariable("annotationDefinitionId") Long annotationDefinitionId);


    @ApiOperation(value = "", notes = "Returns a collection of CohortAnnotationDefinition.", response = CohortAnnotationDefinitionListResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohortAnnotationDefinition", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A collection of CohortAnnotationDefinition", response = CohortAnnotationDefinitionListResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CohortAnnotationDefinitionListResponse> getCohortAnnotationDefinitions(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Cohort ID",required=true ) @PathVariable("cohortId") Long cohortId);


    @ApiOperation(value = "", notes = "modify the CohortAnnotationDefinition.", response = CohortAnnotationDefinition.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohortAnnotationDefinition", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated CohortAnnotationDefinition definition", response = CohortAnnotationDefinition.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<CohortAnnotationDefinition> updateCohortAnnotationDefinition(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Cohort ID",required=true ) @PathVariable("cohortId") Long cohortId,@ApiParam(value = "specifies which CohortAnnotationDefinition.",required=true ) @PathVariable("annotationDefinitionId") Long annotationDefinitionId,@ApiParam(value = "Contains the new CohortAnnotationDefinition"  )  @Valid @RequestBody CohortAnnotationDefinition cohortAnnotationDefinition);

}
