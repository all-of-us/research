/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.pmiops.workbench.api;

import org.pmiops.workbench.model.CdrQuery;
import org.pmiops.workbench.model.Cohort;
import org.pmiops.workbench.model.CohortAnnotationsRequest;
import org.pmiops.workbench.model.CohortAnnotationsResponse;
import org.pmiops.workbench.model.CohortListResponse;
import org.pmiops.workbench.model.DataTableSpecification;
import org.pmiops.workbench.model.DuplicateCohortRequest;
import org.pmiops.workbench.model.EmptyResponse;
import org.pmiops.workbench.model.MaterializeCohortRequest;
import org.pmiops.workbench.model.MaterializeCohortResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-05T11:54:35.956-05:00")

@Api(value = "Cohorts", description = "the Cohorts API")
public interface CohortsApi {

    @ApiOperation(value = "", notes = "Creates a cohort definition in a workspace.", response = Cohort.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The cohort definition that was created.", response = Cohort.class),
        @ApiResponse(code = 400, message = "Bad Request. Cohort name already exists", response = Void.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Cohort> createCohort(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "cohort definition"  )  @Valid @RequestBody Cohort cohort);


    @ApiOperation(value = "", notes = "Deletes the cohort definition with the specified ID", response = EmptyResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "ACCEPTED", response = EmptyResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<EmptyResponse> deleteCohort(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Cohort ID",required=true ) @PathVariable("cohortId") Long cohortId);


    @ApiOperation(value = "", notes = "Creates a duplicate of the cohort specified by cohortId", response = Cohort.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The cohort definition that was created.", response = Cohort.class),
        @ApiResponse(code = 400, message = "Bad Request. Cohort name already exists", response = Void.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/duplicate",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Cohort> duplicateCohort(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Duplicate Cohort Request"  )  @Valid @RequestBody DuplicateCohortRequest duplicateCohortRequest);


    @ApiOperation(value = "", notes = "Returns the cohort definition with the specified ID", response = Cohort.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A cohort definition", response = Cohort.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cohort> getCohort(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Cohort ID",required=true ) @PathVariable("cohortId") Long cohortId);


    @ApiOperation(value = "", notes = "Retrieves annotations for a cohort in the workspace ", response = CohortAnnotationsResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the requested annotations", response = CohortAnnotationsResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/getCohortAnnotations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CohortAnnotationsResponse> getCohortAnnotations(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "a request indicating what annotations to retrieve"  )  @Valid @RequestBody CohortAnnotationsRequest request);


    @ApiOperation(value = "", notes = "Returns all cohort definitions in a workspace", response = CohortListResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of cohort definitions.", response = CohortListResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CohortListResponse> getCohortsInWorkspace(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId);


    @ApiOperation(value = "", notes = "Translates a data table specification into a SQL query to run against the CDR. ", response = CdrQuery.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the query to run against the CDR to retrieve the data", response = CdrQuery.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/getDataTableQuery",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CdrQuery> getDataTableQuery(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "a query specification for a data table"  )  @Valid @RequestBody DataTableSpecification request);


    @ApiOperation(value = "", notes = "Materializes a cohort for a given CDR version to specified output. ", response = MaterializeCohortResponse.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The results of materializing the cohort", response = MaterializeCohortResponse.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MaterializeCohortResponse> materializeCohort(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "cohort materialization request"  )  @Valid @RequestBody MaterializeCohortRequest request);


    @ApiOperation(value = "", notes = "Modifies the cohort definition with the specified ID; fields that are omitted will not be modified ", response = Cohort.class, authorizations = {
        @Authorization(value = "aou_oauth", scopes = {
            
            })
    }, tags={ "cohorts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The updated cohort definition", response = Cohort.class) })
    
    @RequestMapping(value = "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Cohort> updateCohort(@ApiParam(value = "The Workspace namespace",required=true ) @PathVariable("workspaceNamespace") String workspaceNamespace,@ApiParam(value = "The Workspace ID (a.k.a. the workspace's Firecloud name)",required=true ) @PathVariable("workspaceId") String workspaceId,@ApiParam(value = "Cohort ID",required=true ) @PathVariable("cohortId") Long cohortId,@ApiParam(value = "cohort definition"  )  @Valid @RequestBody Cohort cohort);

}
