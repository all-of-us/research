/*
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.pmiops.workbench.firecloud.api;

import org.pmiops.workbench.firecloud.ApiCallback;
import org.pmiops.workbench.firecloud.ApiClient;
import org.pmiops.workbench.firecloud.ApiException;
import org.pmiops.workbench.firecloud.ApiResponse;
import org.pmiops.workbench.firecloud.Configuration;
import org.pmiops.workbench.firecloud.Pair;
import org.pmiops.workbench.firecloud.ProgressRequestBody;
import org.pmiops.workbench.firecloud.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.pmiops.workbench.firecloud.model.FirecloudJWTWrapper;
import org.pmiops.workbench.firecloud.model.FirecloudNihStatus;

import io.opencensus.common.Scope;
import io.opencensus.trace.AttributeValue;
import io.opencensus.trace.Span;
import io.opencensus.trace.Status;
import io.opencensus.trace.Tracer;
import io.opencensus.trace.Tracing;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NihApi {
    private static final Tracer tracer = Tracing.getTracer();
    private ApiClient apiClient;

    public NihApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NihApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for nihCallback
     * @param jwtWrapper JWT from NIH login (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nihCallbackCall(FirecloudJWTWrapper jwtWrapper, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = jwtWrapper;

        // create path and map variables
        String localVarPath = "/api/nih/callback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nihCallbackValidateBeforeCall(FirecloudJWTWrapper jwtWrapper, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jwtWrapper' is set
        if (jwtWrapper == null) {
            throw new ApiException("Missing the required parameter 'jwtWrapper' when calling nihCallback(Async)");
        }
        

        com.squareup.okhttp.Call call = nihCallbackCall(jwtWrapper, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Update the user&#39;s NIH link from a JWT
     * 
     * @param jwtWrapper JWT from NIH login (required)
     * @return FirecloudNihStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirecloudNihStatus nihCallback(FirecloudJWTWrapper jwtWrapper) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("NihApi.nihCallback", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.firecloud.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/nih/callback"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("POST"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Update the user&#39;s NIH link from a JWT"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("FirecloudNihStatus"));

        try {
            // Create and execute the API request.
            ApiResponse<FirecloudNihStatus> resp = nihCallbackWithHttpInfo(jwtWrapper);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Update the user&#39;s NIH link from a JWT
     * 
     * @param jwtWrapper JWT from NIH login (required)
     * @return ApiResponse&lt;FirecloudNihStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirecloudNihStatus> nihCallbackWithHttpInfo(FirecloudJWTWrapper jwtWrapper) throws ApiException {
        com.squareup.okhttp.Call call = nihCallbackValidateBeforeCall(jwtWrapper, null, null);
        Type localVarReturnType = new TypeToken<FirecloudNihStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the user&#39;s NIH link from a JWT (asynchronously)
     * 
     * @param jwtWrapper JWT from NIH login (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nihCallbackAsync(FirecloudJWTWrapper jwtWrapper, final ApiCallback<FirecloudNihStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nihCallbackValidateBeforeCall(jwtWrapper, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirecloudNihStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nihStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nihStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/nih/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nihStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = nihStatusCall(progressListener, progressRequestListener);
        return call;





    }

    /**
     * Get the current NIH status for a user
     * 
     * @return FirecloudNihStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirecloudNihStatus nihStatus() throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("NihApi.nihStatus", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.firecloud.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/nih/status"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("GET"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Get the current NIH status for a user"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("FirecloudNihStatus"));

        try {
            // Create and execute the API request.
            ApiResponse<FirecloudNihStatus> resp = nihStatusWithHttpInfo();
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Get the current NIH status for a user
     * 
     * @return ApiResponse&lt;FirecloudNihStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirecloudNihStatus> nihStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = nihStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<FirecloudNihStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the current NIH status for a user (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nihStatusAsync(final ApiCallback<FirecloudNihStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nihStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirecloudNihStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
