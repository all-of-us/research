/*
 * FireCloud
 * Genome analysis execution service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.pmiops.workbench.firecloud.api;

import org.pmiops.workbench.firecloud.ApiCallback;
import org.pmiops.workbench.firecloud.ApiClient;
import org.pmiops.workbench.firecloud.ApiException;
import org.pmiops.workbench.firecloud.ApiResponse;
import org.pmiops.workbench.firecloud.Configuration;
import org.pmiops.workbench.firecloud.Pair;
import org.pmiops.workbench.firecloud.ProgressRequestBody;
import org.pmiops.workbench.firecloud.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.pmiops.workbench.firecloud.model.FirecloudBillingProjectStatus;
import org.pmiops.workbench.firecloud.model.FirecloudCreateRawlsBillingProjectFullRequest;
import org.pmiops.workbench.firecloud.model.FirecloudErrorReport;

import io.opencensus.common.Scope;
import io.opencensus.trace.AttributeValue;
import io.opencensus.trace.Span;
import io.opencensus.trace.Status;
import io.opencensus.trace.Tracer;
import io.opencensus.trace.Tracing;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingApi {
    private static final Tracer tracer = Tracing.getTracer();
    private ApiClient apiClient;

    public BillingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addUserToBillingProject
     * @param projectId Project ID (required)
     * @param role role of user for project (required)
     * @param email email of user or group to add (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addUserToBillingProjectCall(String projectId, String role, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/{projectId}/{role}/{email}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "role" + "\\}", apiClient.escapeString(role.toString()))
            .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addUserToBillingProjectValidateBeforeCall(String projectId, String role, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addUserToBillingProject(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling addUserToBillingProject(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling addUserToBillingProject(Async)");
        }
        

        com.squareup.okhttp.Call call = addUserToBillingProjectCall(projectId, role, email, progressListener, progressRequestListener);
        return call;





    }

    /**
     * add user to billing project the caller owns
     * 
     * @param projectId Project ID (required)
     * @param role role of user for project (required)
     * @param email email of user or group to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addUserToBillingProject(String projectId, String role, String email) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("BillingApi.addUserToBillingProject", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.firecloud.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/billing/{projectId}/{role}/{email}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("PUT"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("add user to billing project the caller owns"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));

        try {
            // Create and execute the API request.
            addUserToBillingProjectWithHttpInfo(projectId, role, email);
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * add user to billing project the caller owns
     * 
     * @param projectId Project ID (required)
     * @param role role of user for project (required)
     * @param email email of user or group to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addUserToBillingProjectWithHttpInfo(String projectId, String role, String email) throws ApiException {
        com.squareup.okhttp.Call call = addUserToBillingProjectValidateBeforeCall(projectId, role, email, null, null);
        return apiClient.execute(call);
    }

    /**
     * add user to billing project the caller owns (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param role role of user for project (required)
     * @param email email of user or group to add (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addUserToBillingProjectAsync(String projectId, String role, String email, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addUserToBillingProjectValidateBeforeCall(projectId, role, email, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for billingProjectStatus
     * @param projectName Name of the billing project (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call billingProjectStatusCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/profile/billing/{projectName}"
            .replaceAll("\\{" + "projectName" + "\\}", apiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call billingProjectStatusValidateBeforeCall(String projectName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling billingProjectStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = billingProjectStatusCall(projectName, progressListener, progressRequestListener);
        return call;





    }

    /**
     * billing project status
     * billing project status
     * @param projectName Name of the billing project (required)
     * @return FirecloudBillingProjectStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FirecloudBillingProjectStatus billingProjectStatus(String projectName) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("BillingApi.billingProjectStatus", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.firecloud.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/profile/billing/{projectName}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("GET"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("billing project status"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("FirecloudBillingProjectStatus"));

        try {
            // Create and execute the API request.
            ApiResponse<FirecloudBillingProjectStatus> resp = billingProjectStatusWithHttpInfo(projectName);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * billing project status
     * billing project status
     * @param projectName Name of the billing project (required)
     * @return ApiResponse&lt;FirecloudBillingProjectStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FirecloudBillingProjectStatus> billingProjectStatusWithHttpInfo(String projectName) throws ApiException {
        com.squareup.okhttp.Call call = billingProjectStatusValidateBeforeCall(projectName, null, null);
        Type localVarReturnType = new TypeToken<FirecloudBillingProjectStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * billing project status (asynchronously)
     * billing project status
     * @param projectName Name of the billing project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call billingProjectStatusAsync(String projectName, final ApiCallback<FirecloudBillingProjectStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = billingProjectStatusValidateBeforeCall(projectName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FirecloudBillingProjectStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createBillingProjectFull
     * @param createProjectRequest create project request (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createBillingProjectFullCall(FirecloudCreateRawlsBillingProjectFullRequest createProjectRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createProjectRequest;

        // create path and map variables
        String localVarPath = "/api/billing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createBillingProjectFullValidateBeforeCall(FirecloudCreateRawlsBillingProjectFullRequest createProjectRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createProjectRequest' is set
        if (createProjectRequest == null) {
            throw new ApiException("Missing the required parameter 'createProjectRequest' when calling createBillingProjectFull(Async)");
        }
        

        com.squareup.okhttp.Call call = createBillingProjectFullCall(createProjectRequest, progressListener, progressRequestListener);
        return call;





    }

    /**
     * create billing project in FireCloud and google
     * 
     * @param createProjectRequest create project request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createBillingProjectFull(FirecloudCreateRawlsBillingProjectFullRequest createProjectRequest) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("BillingApi.createBillingProjectFull", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.firecloud.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/billing"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("POST"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("create billing project in FireCloud and google"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));

        try {
            // Create and execute the API request.
            createBillingProjectFullWithHttpInfo(createProjectRequest);
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * create billing project in FireCloud and google
     * 
     * @param createProjectRequest create project request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createBillingProjectFullWithHttpInfo(FirecloudCreateRawlsBillingProjectFullRequest createProjectRequest) throws ApiException {
        com.squareup.okhttp.Call call = createBillingProjectFullValidateBeforeCall(createProjectRequest, null, null);
        return apiClient.execute(call);
    }

    /**
     * create billing project in FireCloud and google (asynchronously)
     * 
     * @param createProjectRequest create project request (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createBillingProjectFullAsync(FirecloudCreateRawlsBillingProjectFullRequest createProjectRequest, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createBillingProjectFullValidateBeforeCall(createProjectRequest, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for grantGoogleRoleToUser
     * @param projectId Project ID (required)
     * @param role google role of user for project (required)
     * @param email email of user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call grantGoogleRoleToUserCall(String projectId, String role, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/{projectId}/googleRole/{role}/{email}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "role" + "\\}", apiClient.escapeString(role.toString()))
            .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call grantGoogleRoleToUserValidateBeforeCall(String projectId, String role, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling grantGoogleRoleToUser(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling grantGoogleRoleToUser(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling grantGoogleRoleToUser(Async)");
        }
        

        com.squareup.okhttp.Call call = grantGoogleRoleToUserCall(projectId, role, email, progressListener, progressRequestListener);
        return call;





    }

    /**
     * grant a google role to a user and their pet in the billing project the caller owns
     * 
     * @param projectId Project ID (required)
     * @param role google role of user for project (required)
     * @param email email of user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void grantGoogleRoleToUser(String projectId, String role, String email) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("BillingApi.grantGoogleRoleToUser", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.firecloud.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/billing/{projectId}/googleRole/{role}/{email}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("PUT"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("grant a google role to a user and their pet in the billing project the caller owns"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));

        try {
            // Create and execute the API request.
            grantGoogleRoleToUserWithHttpInfo(projectId, role, email);
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * grant a google role to a user and their pet in the billing project the caller owns
     * 
     * @param projectId Project ID (required)
     * @param role google role of user for project (required)
     * @param email email of user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> grantGoogleRoleToUserWithHttpInfo(String projectId, String role, String email) throws ApiException {
        com.squareup.okhttp.Call call = grantGoogleRoleToUserValidateBeforeCall(projectId, role, email, null, null);
        return apiClient.execute(call);
    }

    /**
     * grant a google role to a user and their pet in the billing project the caller owns (asynchronously)
     * 
     * @param projectId Project ID (required)
     * @param role google role of user for project (required)
     * @param email email of user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call grantGoogleRoleToUserAsync(String projectId, String role, String email, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = grantGoogleRoleToUserValidateBeforeCall(projectId, role, email, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeUserFromBillingProject
     * @param projectId Project ID (required)
     * @param role role of user for project (required)
     * @param email email of user or group to remove (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeUserFromBillingProjectCall(String projectId, String role, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/billing/{projectId}/{role}/{email}"
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "role" + "\\}", apiClient.escapeString(role.toString()))
            .replaceAll("\\{" + "email" + "\\}", apiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeUserFromBillingProjectValidateBeforeCall(String projectId, String role, String email, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling removeUserFromBillingProject(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling removeUserFromBillingProject(Async)");
        }
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling removeUserFromBillingProject(Async)");
        }
        

        com.squareup.okhttp.Call call = removeUserFromBillingProjectCall(projectId, role, email, progressListener, progressRequestListener);
        return call;





    }

    /**
     * remove user or group from billing project the caller owns
     * remove user or group from billing project the caller owns
     * @param projectId Project ID (required)
     * @param role role of user for project (required)
     * @param email email of user or group to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeUserFromBillingProject(String projectId, String role, String email) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("BillingApi.removeUserFromBillingProject", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.firecloud.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/billing/{projectId}/{role}/{email}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("DELETE"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("remove user or group from billing project the caller owns"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));

        try {
            // Create and execute the API request.
            removeUserFromBillingProjectWithHttpInfo(projectId, role, email);
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * remove user or group from billing project the caller owns
     * remove user or group from billing project the caller owns
     * @param projectId Project ID (required)
     * @param role role of user for project (required)
     * @param email email of user or group to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeUserFromBillingProjectWithHttpInfo(String projectId, String role, String email) throws ApiException {
        com.squareup.okhttp.Call call = removeUserFromBillingProjectValidateBeforeCall(projectId, role, email, null, null);
        return apiClient.execute(call);
    }

    /**
     * remove user or group from billing project the caller owns (asynchronously)
     * remove user or group from billing project the caller owns
     * @param projectId Project ID (required)
     * @param role role of user for project (required)
     * @param email email of user or group to remove (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeUserFromBillingProjectAsync(String projectId, String role, String email, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeUserFromBillingProjectValidateBeforeCall(projectId, role, email, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
