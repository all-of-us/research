{
  "name": "All of Us Dataset Builder Python snippets",
  "sub-menu": [
    {
      "name": "Setup",
      "snippet": "!pip3 install --upgrade --user pandas_profiling statsmodels\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling\nimport plotnine\nfrom plotnine import *  # Provides a ggplot-like interface to matplotlib.\n\n## Plot setup.\ntheme_set(theme_bw(base_size = 11)) # Default theme for plots.\n\ndef get_boxplot_fun_data(df):\n  \"\"\"Returns a data frame with a y position and a label, for use annotating ggplot boxplots.\n\n  Args:\n    d: A data frame.\n  Returns:\n    A data frame with column y as max and column label as length.\n  \"\"\"\n  d = {'y': max(df), 'label': f'N = {len(df)}'}\n  return(pd.DataFrame(data=d, index=[0]))\n\n# NOTE: if you get any errors from this cell, restart your kernel and run it again.\n"
    },
    {
      "name": "Documentation",
      "external-link": "https://github.com/all-of-us/workbench-snippets"
    },
    "---",
    {
      "name": "Basic operations",
      "sub-menu": [
        {
          "name": "join_dataframes.py",
          "snippet": "# Use snippet 'join_dataframes' to join together two dataframes.\n# It assumes the 'Setup' snippet has been executed.\n#\n# In the example below, it joins Demographics '_person_df' and Measurements '_measurement_df' using\n# any columns they have in common, which in this case should only be 'person_id'.\n#\n# See also https://pandas.pydata.org/pandas-docs/version/0.25.1/reference/api/pandas.merge.html\n\n\n## -----[ CHANGE THE DATAFRAME NAME(S) TO MATCH YOURS FROM DATASET BUILDER] -----\nmeasurement_df = pd.merge(left=YOUR_DATASET_NAME_person_df, right=YOUR_DATASET_NAME_measurement_df, how='inner')\n\nmeasurement_df.shape\n"
        },
        {
          "name": "summarize_a_dataframe.py",
          "snippet": "# Use snippet 'summarize_a_dataframe' to display summary statistics for a dataframe.\n# It assumes snippet 'Setup' has been executed.\n# See also https://towardsdatascience.com/exploring-your-data-with-just-1-line-of-python-4b35ce21a82d\n\n\n## -----[ CHANGE THE DATAFRAME NAME(S) TO MATCH YOURS FROM DATASET BUILDER] -----\nYOUR_DATASET_NAME_person_df.loc[:10000,:].profile_report()  # Examine up to the first 10,000 rows. Larger\n                                                            # dataframes can be profiled, but it takes more time.\n"
        }
      ]
    },
    {
      "name": "Plot measurements",
      "sub-menu": [
        {
          "name": "measurement_by_age_and_gender.plotnine",
          "snippet": "# Use snippet 'measurement_by_age_and_gender' to plot joined demographics and measurements dataframes.\n# This plot assumes 'measurement_df' was created using snippet 'Basic operations -> join_dataframes' to\n# join together demographics and measurements dataframes.\n# See also https://plotnine.readthedocs.io/en/stable/\n\n\n# There could be many different measurements in the dataframe. By default, plot the first one.\nmeasurement_to_plot = measurement_df.STANDARD_CONCEPT_NAME.unique()[0]\n\n# Create a derived variable for age group.\nmeasurement_df['age'] = (pd.to_datetime('today').year\n                                     - measurement_df.DATE_OF_BIRTH.map(lambda x: x.year))\nmeasurement_df['age_group'] = pd.cut(measurement_df['age'],\n                                                 [-np.inf, 34.5, 49.5, 64.5, np.inf],\n                                                 labels=[\"<35\", \"35-49\", \"50-64\", \"65+\"])\n\n# meas_filter is a column of True and False\nmeas_filter = ((measurement_df.STANDARD_CONCEPT_NAME == measurement_to_plot)\n  & (measurement_df.UNIT_CONCEPT_NAME != 'No matching concept')\n  & (measurement_df.UNIT_CONCEPT_NAME.notna())\n  & (measurement_df.GENDER != 'No matching concept')\n  & (measurement_df.VALUE_AS_NUMBER < 9999999)  # Get rid of nonsensical outliers.\n)\n\n(ggplot(measurement_df[meas_filter], aes(x = 'age_group', y = 'VALUE_AS_NUMBER')) +\n    geom_boxplot() +\n    stat_summary(fun_data = get_boxplot_fun_data, geom = 'text', size = 10,\n                 position = position_dodge(width = 0.9), va = 'top') +\n#    scale_y_log10() +  # Uncomment if the data looks skewed.\n    coord_flip() +\n    facet_wrap(['STANDARD_CONCEPT_NAME + \": \" + UNIT_CONCEPT_NAME', 'GENDER'], ncol = 2, scales = 'free') +\n    xlab('age group') +\n    ggtitle('Numeric values of measurements by age and gender\\nSource: All Of Us Data') +\n    theme(figure_size = (12, 12), panel_spacing = .5))\n"
        },
        {
          "name": "measurement_by_gender.plotnine",
          "snippet": "# Use snippet 'measurement_by_gender' to plot joined demographics and measurements dataframes.\n# This plot assumes 'measurement_df' was created using snippet 'Basic operations -> join_dataframes' to\n# join together demographics and measurements dataframes.\n# See also https://plotnine.readthedocs.io/en/stable/\n\n\n# There could be many different measurements in the dataframe. By default, plot the first one.\nmeasurement_to_plot = measurement_df.STANDARD_CONCEPT_NAME.unique()[0]\n\n# meas_filter is a column of True and False.\nmeas_filter = ((measurement_df.STANDARD_CONCEPT_NAME == measurement_to_plot)\n  & (measurement_df.UNIT_CONCEPT_NAME != 'No matching concept')\n  & (measurement_df.UNIT_CONCEPT_NAME.notna())\n  & (measurement_df.VALUE_AS_NUMBER < 9999999)  # Get rid of nonsensical outliers.\n)\n\n(ggplot(measurement_df[meas_filter], aes(x = 'GENDER', y = 'VALUE_AS_NUMBER')) +\n    geom_boxplot() +\n    stat_summary(fun_data = get_boxplot_fun_data, geom = 'text', size = 10,\n                 position = position_dodge(width = 0.9), va = 'top') +\n#    scale_y_log10() +  # Uncomment if the data looks skewed.\n    facet_wrap(('STANDARD_CONCEPT_NAME', 'UNIT_CONCEPT_NAME'), ncol = 2, scales = 'free') +\n    ggtitle(f'Numeric values of measurements, by gender\\nSource: All Of Us Data') +\n    theme(figure_size=(12, 6), panel_spacing = .5))\n"
        }
      ]
    }
  ]
}
