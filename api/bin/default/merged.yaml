---
swagger: '2.0'
info:
  version: 0.1.0
  title: AllOfUs Workbench API
  description: The API for the AllOfUs workbench.
  termsOfService: http://www.pmi-ops.org/terms_of_service.html
  contact:
    name: developer_help@pmi-ops.org
  license:
    name: MIT
host: api.pmi-ops.org
securityDefinitions:
  aou_oauth:
    authorizationUrl: ''
    tokenUrl: ''
    type: oauth2
    flow: accessCode
schemes:
- https
produces:
- application/json
security:
- aou_oauth: []
parameters:
  userId:
    in: path
    name: userId
    type: integer
    format: int64
    required: true
  conceptSetId:
    in: path
    name: conceptSetId
    type: integer
    format: int64
    required: true
    description: Concept set ID
  workspaceNamespace:
    in: path
    name: workspaceNamespace
    type: string
    description: The Workspace namespace
    required: true
  workspaceId:
    in: path
    name: workspaceId
    type: string
    description: The Workspace ID (a.k.a. the workspace's Firecloud name)
    required: true
  cohortId:
    in: path
    name: cohortId
    type: integer
    format: int64
    required: true
    description: Cohort ID
  cohortReviewId:
    in: path
    name: cohortReviewId
    type: integer
    format: int64
    required: true
    description: Cohort Review ID
  cdrVersionId:
    in: path
    name: cdrVersionId
    type: integer
    format: int64
    required: true
    description: specifies which cdr version
  participantId:
    in: path
    name: participantId
    type: integer
    format: int64
    required: true
    description: specifies which participant
paths:
  "/v1/status":
    get:
      tags:
      - status
      description: Returns the status of the various services and integrations
      operationId: getStatus
      security: []
      responses:
        200:
          description: A map of system name to status.
          schema:
            "$ref": "#/definitions/StatusResponse"
  "/v1/config":
    get:
      tags:
      - config
      description: Returns some server configuration data.
      operationId: getConfig
      security: []
      responses:
        200:
          description: Configuration data
          schema:
            "$ref": "#/definitions/ConfigResponse"
  "/v1/me":
    get:
      tags:
      - profile
      description: Returns the user's profile information
      operationId: getMe
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
  "/v1/sendBugReport":
    post:
      tags:
      - bugReport
      description: Sends an email to developers about a user reported bug
      operationId: sendBugReport
      parameters:
      - in: body
        name: bugReport
        description: user reported bug
        required: true
        schema:
          "$ref": "#/definitions/BugReport"
      responses:
        200:
          description: Success message
          schema:
            "$ref": "#/definitions/BugReport"
        500:
          description: JIRA Internal Error
  "/v1/is-username-taken":
    get:
      tags:
      - profile
      description: Checks to see if the given username is not available.
      operationId: isUsernameTaken
      security: []
      parameters:
      - in: query
        name: username
        type: string
        required: true
      responses:
        200:
          description: The answer.
          schema:
            "$ref": "#/definitions/UsernameTakenResponse"
  "/v1/is-contact-email-taken":
    get:
      tags:
      - profile
      description: Checks to see if the given contact email is not available.
      operationId: isContactEmailTaken
      security: []
      parameters:
      - in: query
        name: contactEmail
        type: string
        required: true
      responses:
        200:
          description: The answer.
          schema:
            "$ref": "#/definitions/ContactEmailTakenResponse"
  "/v1/update-contact-email":
    post:
      tags:
      - profile
      description: Only for accounts that have not logged in yet, update contact email.
      operationId: updateContactEmail
      security: []
      parameters:
      - in: body
        name: updateContactEmailRequest
        schema:
          "$ref": "#/definitions/UpdateContactEmailRequest"
      responses:
        200:
          description: Contact Email Updated
        400:
          description: Invalid contact email address
        403:
          description: Unable to process this request
        500:
          description: Internal Server Error
  "/v1/resend-welcome-email":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: Resend welcome email
      operationId: resendWelcomeEmail
      security: []
      parameters:
      - in: body
        name: resendWelcomeEmail
        schema:
          "$ref": "#/definitions/ResendWelcomeEmailRequest"
      responses:
        200:
          description: Welcome Email sent.
        500:
          description: Internal Server Error
  "/v1/invitation-key-verification":
    post:
      tags:
      - profile
      description: Verifies invitation key.
      operationId: invitationKeyVerification
      security: []
      parameters:
      - in: body
        name: invitationVerificationRequest
        schema:
          "$ref": "#/definitions/InvitationVerificationRequest"
      responses:
        200:
          description: Invitation Key verified.
        400:
          description: Error occurred while verifying Invitation Key.
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/google-account":
    post:
      tags:
      - profile
      description: Creates an account in the researchallofus.org domain.
      operationId: createAccount
      security: []
      parameters:
      - in: body
        name: createAccountRequest
        schema:
          "$ref": "#/definitions/CreateAccountRequest"
      responses:
        201:
          description: Account created successfully.
          schema:
            "$ref": "#/definitions/Profile"
        400:
          description: Error occurred while creating account.
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/id-verification":
    post:
      tags:
      - profile
      description: Request identity verification.
      operationId: submitIdVerification
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
  "/v1/update-profile":
    post:
      tags:
      - profile
      description: Updates a users profile
      operationId: updateProfile
      parameters:
      - in: body
        name: updatedProfile
        description: the new profile to use
        schema:
          "$ref": "#/definitions/Profile"
      responses:
        204:
          description: Request received.
        400:
          description: Bad request
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/page-visits":
    post:
      tags:
      - profile
      description: Updates a users page visits
      operationId: updatePageVisits
      parameters:
      - in: body
        name: pageVisit
        description: the users pageVisits
        schema:
          "$ref": "#/definitions/PageVisit"
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
        400:
          description: Bad request
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/account/accept-terms-of-service":
    post:
      tags:
      - profile
      description: Submits consent to the terms of service for researchers.
      operationId: submitTermsOfService
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
  "/v1/account/complete-ethics-training":
    post:
      tags:
      - profile
      description: Completes ethics training.
      operationId: completeEthicsTraining
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
  "/v1/account/submit-demographic-survey":
    post:
      tags:
      - profile
      description: Submits demographic survey responses.
      operationId: submitDemographicsSurvey
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
  "/v1/auth-domain/{groupName}":
    post:
      tags:
      - authDomain
      description: This endpoint will create the registered auth domain.
      operationId: createAuthDomain
      parameters:
      - in: path
        name: groupName
        description: groupName
        required: true
        type: string
      responses:
        200:
          description: Successfully created group
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/auth-domain/{groupName}/users":
    post:
      tags:
      - authDomain
      responses:
        204:
          description: Successfully Added User To Group
        403:
          description: You must be an admin of this group in order to remove members
          schema:
            "$ref": "#/definitions/ErrorResponse"
        404:
          description: User not found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        500:
          description: FireCloud Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
      parameters:
      - in: path
        name: groupName
        required: true
        type: string
      - in: body
        name: request
        description: request carrying user email to add
        schema:
          "$ref": "#/definitions/AuthDomainRequest"
      summary: add a user to an auth domain if you have manage groups permission
      operationId: addUserToAuthDomain
    delete:
      responses:
        204:
          description: Successfully Removed User From Group
        403:
          description: You must be an admin of this group in order to remove members
          schema:
            "$ref": "#/definitions/ErrorResponse"
        404:
          description: User not found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        500:
          description: FireCloud Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
      parameters:
      - in: path
        name: groupName
        required: true
        type: string
      - in: body
        name: request
        description: request carrying user email to add
        schema:
          "$ref": "#/definitions/AuthDomainRequest"
      tags:
      - authDomain
      summary: remove a user from an auth domain if you have manage groups permission
      operationId: removeUserFromAuthDomain
  "/v1/clusters":
    get:
      summary: List available notebook clusters
      description: 'Returns the clusters available to the current user. Currently
        there is a single default cluster supported per researcher and this cluster
        should always either exist or be in the process of being initialized. In a
        future where researchers have more control over cluster creation, this endpoint
        would be extended to return all clusters.

'
      operationId: listClusters
      tags:
      - cluster
      responses:
        200:
          description: Available clusters
          schema:
            "$ref": "#/definitions/ClusterListResponse"
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/clusters/{clusterNamespace}/{clusterName}":
    delete:
      summary: Delete a cluster by name.
      operationId: deleteCluster
      tags:
      - cluster
      parameters:
      - in: path
        name: clusterNamespace
        description: clusterNamespace
        required: true
        type: string
      - in: path
        name: clusterName
        description: clusterName
        required: true
        type: string
      responses:
        202:
          description: Deletion success
          schema:
            "$ref": "#/definitions/EmptyResponse"
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/clusters/{clusterNamespace}/{clusterName}/localize":
    post:
      summary: 'Localize files from a workspace to notebook cluster. As a side-effect,
        JSON workspace environment files will also be localized to the cluster.

'
      description: Localize notebook files to the corresponding notebook cluster.
      operationId: localize
      tags:
      - cluster
      parameters:
      - in: path
        name: clusterNamespace
        description: clusterNamespace
        required: true
        type: string
      - in: path
        name: clusterName
        description: clusterName
        required: true
        type: string
      - in: body
        name: body
        description: Localization request.
        schema:
          "$ref": "#/definitions/ClusterLocalizeRequest"
      responses:
        200:
          description: Success
          schema:
            "$ref": "#/definitions/ClusterLocalizeResponse"
        404:
          description: Cluster or Workspace not found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/billingProjects":
    get:
      tags:
      - Profile
      operationId: getBillingProjects
      summary: List billing projects for a user
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              "$ref": "#/definitions/BillingProjectMembership"
        404:
          description: User Not Found
        500:
          description: Internal Server Error
  "/v1/workspaces":
    get:
      tags:
      - workspaces
      description: Returns all workspaces that a user has access to
      operationId: getWorkspaces
      responses:
        200:
          description: A list of workspace definitions.
          schema:
            "$ref": "#/definitions/WorkspaceResponseListResponse"
    post:
      tags:
      - workspaces
      description: Creates a workspace
      operationId: createWorkspace
      parameters:
      - in: body
        name: workspace
        description: workspace definition
        schema:
          "$ref": "#/definitions/Workspace"
      responses:
        200:
          description: The workspace that was created.
          schema:
            "$ref": "#/definitions/Workspace"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - workspaces
      description: Returns the workspace definition with the specified ID and namespace
      operationId: getWorkspace
      responses:
        200:
          description: A workspace response containing workspace and access level
          schema:
            "$ref": "#/definitions/WorkspaceResponse"
    patch:
      tags:
      - workspaces
      description: 'Modifies the workspace definition with the specified ID and namespace;
        fields that are omitted will not be modified

'
      operationId: updateWorkspace
      parameters:
      - in: body
        name: workspace
        description: workspace definition
        schema:
          "$ref": "#/definitions/UpdateWorkspaceRequest"
      responses:
        200:
          description: The updated workspace definition
          schema:
            "$ref": "#/definitions/Workspace"
    delete:
      tags:
      - workspaces
      description: Deletes the workspace definition with the specified ID and namespace
      operationId: deleteWorkspace
      responses:
        202:
          description: Workspace deletion request accepted
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/admin/workspaces/review":
    get:
      tags:
      - workspaces
      description: 'Returns workspaces that need research purpose review. Requires
        REVIEW_RESEARCH_PURPOSE authority.

'
      operationId: getWorkspacesForReview
      responses:
        200:
          description: A list of workspaces
          schema:
            "$ref": "#/definitions/WorkspaceListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebook-list":
    get:
      summary: Get details of Python files from google Bucket directory notebook
      description: 'Returns list of name and path of python files from google bucket,
        directory notebook.

'
      operationId: getNoteBookList
      tags:
      - workspaces
      parameters:
      - in: path
        name: workspaceNamespace
        description: workspaceNamespace
        required: true
        type: string
      - in: path
        name: workspaceId
        description: workspaceId
        required: true
        type: string
      responses:
        200:
          description: List of files
          schema:
            type: array
            items:
              "$ref": "#/definitions/FileDetail"
        404:
          description: Workspace not found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/admin/users/id-verification/list":
    get:
      tags:
      - profile
      description: 'Returns a list of profiles for users to be reviewed. Requires
        REVIEW_ID_VERIFICATION authority.

'
      operationId: getIdVerificationsForReview
      responses:
        200:
          description: A list of users to be id verified
          schema:
            "$ref": "#/definitions/IdVerificationListResponse"
        403:
          description: User doesn't have the REVIEW_ID_VERIFICATION authority
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/admin/users/id-verification/{userId}/review":
    parameters:
    - "$ref": "#/parameters/userId"
    post:
      tags:
      - profile
      description: 'Manually sets the ID verfication status for a user. Requires REVIEW_ID_VERIFICATION
        authority.

'
      operationId: reviewIdVerification
      parameters:
      - in: body
        name: review
        schema:
          "$ref": "#/definitions/IdVerificationReviewRequest"
      responses:
        200:
          description: return updated list of profiles
          schema:
            "$ref": "#/definitions/IdVerificationListResponse"
  "/v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/review":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: Sets a research purpose review result.
      operationId: reviewWorkspace
      parameters:
      - in: body
        name: review
        description: result of the research purpose review
        schema:
          "$ref": "#/definitions/ResearchPurposeReviewRequest"
      responses:
        200:
          description: success
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/cron/auditBigQuery":
    get:
      security: []
      tags:
      - audit
      - cron
      description: 'Endpoint meant to be called offline to trigger BigQuery auditing;
        may be slow to execute. Only executable via App Engine cronjob.

'
      operationId: auditBigQuery
      responses:
        200:
          description: Audit was successful.
          schema:
            "$ref": "#/definitions/AuditBigQueryResponse"
  "/v1/cron/checkClusters":
    get:
      security: []
      tags:
      - offlineCluster
      - cron
      description: 'Endpoint meant to be called offline to trigger cluster checks
        and cleanup. Enforces upgrades for older cluster deployments. May be slow
        to execute. Only executable via App Engine cronjob.

'
      operationId: checkClusters
      responses:
        200:
          description: Clusters were checked and handled successfully.
          schema:
            "$ref": "#/definitions/CheckClustersResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/share":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: Shares a workspace with users
      operationId: shareWorkspace
      parameters:
      - in: body
        name: body
        description: users to share the workspace with
        schema:
          "$ref": "#/definitions/ShareWorkspaceRequest"
      responses:
        200:
          description: Successful share response
          schema:
            "$ref": "#/definitions/ShareWorkspaceResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/clone":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: |
        Clone an existing workspace, with given modifications to workspace metadata. Caller will own the newly cloned workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be cloned:
          - the associated Firecloud workspace
          - cohorts, along with reviews and annotations
          - notebooks located in the default notebook directory for this workspace
      operationId: cloneWorkspace
      parameters:
      - in: body
        name: body
        schema:
          "$ref": "#/definitions/CloneWorkspaceRequest"
      responses:
        200:
          description: Successful clone response
          schema:
            "$ref": "#/definitions/CloneWorkspaceResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/rename":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: Renames specified notebook
      operationId: renameNotebook
      parameters:
      - in: body
        name: NotebookRename
        description: new name for notebook
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            newName:
              type: string
      responses:
        200:
          description: Successful rename
          schema:
            "$ref": "#/definitions/FileDetail"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/clone":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: Clones specified notebook
      operationId: cloneNotebook
      parameters:
      - in: path
        name: notebookName
        required: true
        type: string
      responses:
        200:
          description: Successful clone
          schema:
            "$ref": "#/definitions/FileDetail"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/delete":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    delete:
      tags:
      - workspaces
      description: Deletes specified notebook
      operationId: deleteNotebook
      parameters:
      - in: path
        name: notebookName
        required: true
        type: string
      responses:
        200:
          description: Successful delete
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - cohorts
      description: Returns all cohort definitions in a workspace
      operationId: getCohortsInWorkspace
      responses:
        200:
          description: A list of cohort definitions.
          schema:
            "$ref": "#/definitions/CohortListResponse"
    post:
      tags:
      - cohorts
      description: Creates a cohort definition in a workspace.
      operationId: createCohort
      parameters:
      - in: body
        name: cohort
        description: cohort definition
        schema:
          "$ref": "#/definitions/Cohort"
      responses:
        200:
          description: The cohort definition that was created.
          schema:
            "$ref": "#/definitions/Cohort"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    get:
      tags:
      - cohorts
      description: Returns the cohort definition with the specified ID
      operationId: getCohort
      responses:
        200:
          description: A cohort definition
          schema:
            "$ref": "#/definitions/Cohort"
    patch:
      tags:
      - cohorts
      description: 'Modifies the cohort definition with the specified ID; fields that
        are omitted will not be modified

'
      operationId: updateCohort
      parameters:
      - in: body
        name: cohort
        description: cohort definition
        schema:
          "$ref": "#/definitions/Cohort"
      responses:
        200:
          description: The updated cohort definition
          schema:
            "$ref": "#/definitions/Cohort"
    delete:
      tags:
      - cohorts
      description: Deletes the cohort definition with the specified ID
      operationId: deleteCohort
      responses:
        202:
          description: ACCEPTED
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/user-recent-resources":
    get:
      tags:
      - userMetrics
      description: Returns the resources accessed by user order by access time desc
      operationId: getUserRecentResources
      responses:
        200:
          description: A list of resources order by last access time desc order
          schema:
            "$ref": "#/definitions/RecentResourceResponse"
  "/v1/recentResource/{workspaceId}/{workspaceName}/{notebook}/add-notebook":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - userMetrics
      description: Add/update Notebook entry to recent resource
      operationId: addNotebookEntry
      parameters:
      - in: path
        name: notebook
        required: true
        type: string
      responses:
        200:
          description: Successfully added
          schema:
            "$ref": "#/definitions/RecentResource"
  "/v1/recentResource/{workspaceId}/{workspaceName}/{notebook}/delete-notebook":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    delete:
      tags:
      - userMetrics
      description: Deletes Notebook entry from recent resource
      operationId: deleteNotebookEntry
      parameters:
      - in: path
        name: notebook
        required: true
        type: string
      responses:
        200:
          description: Successfully deleted
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/recentResource/{workspaceId}/{workspaceName}/rename-notebook":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - userMetrics
      description: Rename Notebook entry from recent resource
      operationId: renameNotebookEntry
      parameters:
      - in: body
        name: RenameNotebook
        description: Rename notebook information
        required: true
        schema:
          type: object
          properties:
            oldName:
              type: string
            newName:
              type: string
      responses:
        200:
          description: Successfully renamed
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - conceptSets
      description: Returns all concept sets in a workspace
      operationId: getConceptSetsInWorkspace
      responses:
        200:
          description: A list of concept sets.
          schema:
            "$ref": "#/definitions/ConceptSetListResponse"
    post:
      tags:
      - conceptSets
      description: Creates a concept set in a workspace.
      operationId: createConceptSet
      parameters:
      - in: body
        name: conceptSet
        description: concept set definition
        schema:
          "$ref": "#/definitions/ConceptSet"
      responses:
        200:
          description: The concept set that was created.
          schema:
            "$ref": "#/definitions/ConceptSet"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/conceptSetId"
    get:
      tags:
      - conceptSets
      description: Returns the concept set definition with the specified ID
      operationId: getConceptSet
      responses:
        200:
          description: A concept set definition
          schema:
            "$ref": "#/definitions/ConceptSet"
    patch:
      tags:
      - conceptSets
      description: 'Modifies the name or description of the concept set with the specified
        ID; fields that are omitted will not be modified

'
      operationId: updateConceptSet
      parameters:
      - in: body
        name: conceptSet
        description: concept set definition
        schema:
          "$ref": "#/definitions/ConceptSet"
      responses:
        200:
          description: The updated concept set.
          schema:
            "$ref": "#/definitions/ConceptSet"
    delete:
      tags:
      - conceptSets
      description: Deletes the concept set with the specified ID
      operationId: deleteConceptSet
      responses:
        202:
          description: ACCEPTED
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/concepts":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/conceptSetId"
    post:
      tags:
      - conceptSets
      description: 'Adds or removes concepts from the concept set.

'
      operationId: updateConceptSetConcepts
      parameters:
      - in: body
        name: request
        description: update concept set request
        schema:
          "$ref": "#/definitions/UpdateConceptSetRequest"
      responses:
        200:
          description: The updated concept set.
          schema:
            "$ref": "#/definitions/ConceptSet"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - cohorts
      description: Materializes a cohort for a given CDR version to specified output
      operationId: materializeCohort
      parameters:
      - in: body
        name: request
        description: cohort materialization request
        schema:
          "$ref": "#/definitions/MaterializeCohortRequest"
      responses:
        200:
          description: The results of materializing the cohort
          schema:
            "$ref": "#/definitions/MaterializeCohortResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/searchConcepts":
    post:
      tags:
      - concepts
      description: 'Searches for concepts in concept table by name, and optionally
        filter on domain, vocabulary IDs, or standard concept status. Uses the CDR
        version affiliated with the workspace specified in the path.

'
      operationId: searchConcepts
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: body
        name: request
        description: concept search request
        schema:
          "$ref": "#/definitions/SearchConceptsRequest"
      responses:
        200:
          description: A collection of concepts
          schema:
            "$ref": "#/definitions/ConceptListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    post:
      tags:
      - cohortReview
      description: 'This endpoint will create an cohort review which is a participant
        cohort sample specified by the review size parameter.

'
      operationId: createCohortReview
      parameters:
      - in: body
        name: request
        required: true
        description: cohort review creation request body
        schema:
          "$ref": "#/definitions/CreateReviewRequest"
      responses:
        200:
          description: A cohortReviewId and cohort count
          schema:
            "$ref": "#/definitions/CohortReview"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    post:
      tags:
      - cohortReview
      description: 'Returns a collection of participants for the specified cohortId
        and cdrVersionId. This endpoint does pagination based on page, limit, order
        and column.

'
      operationId: getParticipantCohortStatuses
      parameters:
      - in: body
        name: request
        required: true
        description: request body for getting list of ParticipantCohortStatuses.
        schema:
          "$ref": "#/definitions/PageFilterRequest"
      responses:
        200:
          description: A collection of participants
          schema:
            "$ref": "#/definitions/CohortReview"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    - "$ref": "#/parameters/participantId"
    get:
      tags:
      - cohortReview
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantCohortStatus
      responses:
        200:
          description: The ParticipantCohortStatus definition
          schema:
            "$ref": "#/definitions/ParticipantCohortStatus"
    put:
      tags:
      - cohortReview
      description: Modifies the ParticipantCohortStatus status
      operationId: updateParticipantCohortStatus
      parameters:
      - in: body
        name: cohortStatusRequest
        description: Contains the new review status
        schema:
          "$ref": "#/definitions/ModifyCohortStatusRequest"
      responses:
        200:
          description: The updated ParticipantCohortStatus definition
          schema:
            "$ref": "#/definitions/ParticipantCohortStatus"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/charts/{domain}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    - "$ref": "#/parameters/participantId"
    get:
      tags:
      - cohortReview
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantChartData
      parameters:
      - in: path
        name: domain
        type: string
        required: true
        description: specifies which domain the chart data should belong to.
      - in: query
        name: limit
        type: integer
        required: false
        description: the limit search results to
      responses:
        200:
          description: The Participant Chart data
          schema:
            "$ref": "#/definitions/ParticipantChartDataListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/charts/{domain}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortReview
      description: Returns a collection of CohortSummary for UI charting in cohort
        review.
      operationId: getCohortSummary
      parameters:
      - in: path
        name: domain
        type: string
        required: true
        description: specifies which domain the CohortSummary should belong to.
      responses:
        200:
          description: A collection of CohortSummary
          schema:
            "$ref": "#/definitions/CohortSummaryListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    - "$ref": "#/parameters/participantId"
    post:
      tags:
      - cohortReview
      description: This endpoint will create a ParticipantCohortAnnotation.
      operationId: createParticipantCohortAnnotation
      parameters:
      - in: body
        name: request
        required: true
        description: ParticipantCohortAnnotation creation request body
        schema:
          "$ref": "#/definitions/ParticipantCohortAnnotation"
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          schema:
            "$ref": "#/definitions/ParticipantCohortAnnotation"
    get:
      tags:
      - cohortReview
      description: This endpoint will get a collection of ParticipantCohortAnnotations.
      operationId: getParticipantCohortAnnotations
      responses:
        200:
          description: A collection of ParticipantCohortAnnotation.
          schema:
            "$ref": "#/definitions/ParticipantCohortAnnotationListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/data":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    - "$ref": "#/parameters/participantId"
    post:
      tags:
      - cohortReview
      description: 'Returns a collection of participant data for the specified params
        based off the PageFilterRequest. This endpoint does pagination based on page,
        limit, order and column.

'
      operationId: getParticipantData
      parameters:
      - in: body
        name: request
        required: true
        description: request body for getting list of participant data.
        schema:
          "$ref": "#/definitions/PageFilterRequest"
      responses:
        200:
          description: A collection of ParticipantConditions.
          schema:
            "$ref": "#/definitions/ParticipantDataListResponse"
  ? "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations/{annotationId}"
  : parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    - "$ref": "#/parameters/participantId"
    - in: path
      name: annotationId
      type: integer
      format: int64
      required: true
      description: specifies which annotation
    put:
      tags:
      - cohortReview
      description: This endpoint will modify a ParticipantCohortAnnotation.
      operationId: updateParticipantCohortAnnotation
      parameters:
      - in: body
        name: request
        required: true
        description: ParticipantCohortAnnotation modification request body
        schema:
          "$ref": "#/definitions/ModifyParticipantCohortAnnotationRequest"
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          schema:
            "$ref": "#/definitions/ParticipantCohortAnnotation"
    delete:
      tags:
      - cohortReview
      description: Deletes the ParticipantCohortAnnotation with the specified ID
      operationId: deleteParticipantCohortAnnotation
      responses:
        202:
          description: ParticipantCohortAnnotation deletion request accepted
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    post:
      tags:
      - cohortAnnotationDefinition
      description: This endpoint will create a CohortAnnotationDefinition.
      operationId: createCohortAnnotationDefinition
      parameters:
      - in: body
        name: request
        required: true
        description: CohortAnnotationDefinition creation request body
        schema:
          "$ref": "#/definitions/CohortAnnotationDefinition"
      responses:
        200:
          description: A CohortAnnotationDefinition.
          schema:
            "$ref": "#/definitions/CohortAnnotationDefinition"
    get:
      tags:
      - cohortAnnotationDefinition
      description: Returns a collection of CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinitions
      responses:
        200:
          description: A collection of CohortAnnotationDefinition
          schema:
            "$ref": "#/definitions/CohortAnnotationDefinitionListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - in: path
      name: annotationDefinitionId
      type: integer
      format: int64
      required: true
      description: specifies which CohortAnnotationDefinition.
    get:
      tags:
      - cohortAnnotationDefinition
      description: Returns a CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinition
      responses:
        200:
          description: A CohortAnnotationDefinition
          schema:
            "$ref": "#/definitions/CohortAnnotationDefinition"
    put:
      tags:
      - cohortAnnotationDefinition
      description: modify the CohortAnnotationDefinition.
      operationId: updateCohortAnnotationDefinition
      parameters:
      - in: body
        name: modifyCohortAnnotationDefinitionRequest
        description: Contains the new CohortAnnotationDefinition
        schema:
          "$ref": "#/definitions/ModifyCohortAnnotationDefinitionRequest"
      responses:
        200:
          description: The updated CohortAnnotationDefinition definition
          schema:
            "$ref": "#/definitions/CohortAnnotationDefinition"
    delete:
      tags:
      - cohortAnnotationDefinition
      description: Deletes the CohortAnnotationDefinition with the specified ID
      operationId: deleteCohortAnnotationDefinition
      responses:
        202:
          description: CohortAnnotationDefinition deletion request accepted
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{type}/{parentId}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns builder criteria tree with the specified criteria type
        and parentId
      operationId: getCriteriaByTypeAndParentId
      parameters:
      - in: path
        name: type
        type: string
        required: true
        description: the specific type of criteria to get
      - in: path
        name: parentId
        type: integer
        format: int64
        required: true
        description: fetch children of parentId
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{type}/children/{parentId}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns builder criteria tree with the specified criteria type
        and parentId
      operationId: getCriteriaChildrenByTypeAndParentId
      parameters:
      - in: path
        name: type
        type: string
        required: true
        description: the specific type of criteria to get
      - in: path
        name: parentId
        type: integer
        format: int64
        required: true
        description: fetch children of parentId
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{type}/{subtype}/{parentId}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns builder criteria tree with the specified criteria type
        and parentId
      operationId: getCriteriaByTypeAndSubtypeAndParentId
      parameters:
      - in: path
        name: type
        type: string
        required: true
        description: the specific type of criteria to get
      - in: path
        name: subtype
        type: string
        required: true
        description: the specific subtype of criteria to get
      - in: path
        name: parentId
        type: integer
        format: int64
        required: true
        description: fetch children of parentId
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{type}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns builder criteria tree in its entirety with the specified
        criteria type
      operationId: getCriteriaByType
      parameters:
      - in: path
        name: type
        type: string
        required: true
        description: the specific type of criteria to get
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{type}/search":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns matches on criteria table by code or name
      operationId: getCriteriaByTypeForCodeOrName
      parameters:
      - in: path
        name: type
        type: string
        required: true
        description: the specific type of criteria to get
      - in: query
        name: value
        type: string
        required: true
        description: the value to search for
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{type}/subtype/{subtype}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns builder criteria tree with the specified criteria type
        and subtype
      operationId: getCriteriaByTypeAndSubtype
      parameters:
      - in: path
        name: type
        type: string
        required: true
        description: the specific type of criteria to get
      - in: path
        name: subtype
        type: string
        required: true
        description: the specific subtype of criteria to get
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/drug":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: getDrugBrandOrIngredientByName
      parameters:
      - in: query
        name: name
        type: string
        required: true
        description: name of ingredient or brand
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/drug/ingredient/{conceptId}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: getDrugIngredientByConceptId
      parameters:
      - in: path
        name: conceptId
        type: integer
        format: int64
        required: true
        description: conceptId of brand
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/attribute/{conceptId}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: getCriteriaAttributeByConceptId
      parameters:
      - in: path
        name: conceptId
        type: integer
        format: int64
        required: true
        description: conceptId of brand
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaAttributeListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/search":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    post:
      tags:
      - cohortBuilder
      description: Searches for participants based on criteria, criteria specific
        parameters, and modifiers.
      operationId: countParticipants
      parameters:
      - in: body
        name: request
        description: object of parameters by which to perform the search
        schema:
          "$ref": "#/definitions/SearchRequest"
        required: true
      responses:
        200:
          description: A count of subjects
          schema:
            type: integer
            format: int64
  "/v1/cohortbuilder/{cdrVersionId}/chartinfo":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    post:
      tags:
      - cohortBuilder
      description: Searches for demographic info about subjects.
      operationId: getChartInfo
      parameters:
      - in: body
        name: request
        description: object of parameters by which to perform the search
        schema:
          "$ref": "#/definitions/SearchRequest"
        required: true
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/ChartInfoListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/quicksearch/{type}/{value}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Quick search for criteria that matches on code and name.
      operationId: getCriteriaTreeQuickSearch
      parameters:
      - in: path
        name: type
        type: string
        required: true
        description: the specific type of criteria to get
      - in: path
        name: value
        type: string
        required: true
        description: value that should match code or name
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/demographics":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Will return a list all values for gender, race and ethnicity.
      operationId: getParticipantDemographics
      responses:
        200:
          description: An object which contains a list of all values for gender, race
            and ethnicity.
          schema:
            "$ref": "#/definitions/ParticipantDemographics"
definitions:
  StatusResponse:
    type: object
    required:
    - firecloudStatus
    - notebooksStatus
    properties:
      firecloudStatus:
        type: boolean
      notebooksStatus:
        type: boolean
  ConfigResponse:
    type: object
    required:
    - gsuiteDomain
    properties:
      gsuiteDomain:
        type: string
        description: G-Suite domain containing user accounts.
      projectId:
        type: string
        description: The cloud project in which this app is running.
      enforceRegistered:
        type: boolean
        description: |
          Whether the user's data access level should gate other Workbench functionality, namely
          to functionality requiring CDR access.
      publicApiKeyForErrorReports:
        type: string
        description: |
          Stackdriver API key for error reporting, scoped to a particular
          domain. If unset, Stackdriver error reporting should be disabled.
  BillingProjectMembership:
    description: ''
    required:
    - projectName
    - role
    - status
    type: object
    properties:
      projectName:
        type: string
        description: the name of the project
      role:
        type: string
        description: the role of the current user in the project
      status:
        "$ref": "#/definitions/BillingProjectStatus"
  BillingProjectStatus:
    type: string
    description: 'Initialization status of a Firecloud billing project for use with
      Workbench.

'
    enum:
    - none
    - pending
    - ready
    - error
  DataAccessLevel:
    type: string
    description: levels of access to data in the curated data repository
    enum:
    - unregistered
    - registered
    - protected
    - revoked
  EmailVerificationStatus:
    type: string
    description: stage of email verification
    enum:
    - unverified
    - pending
    - subscribed
  EmptyResponse:
    type: object
    properties:
      additionalInfo:
        type: string
  VerifyEmailRequest:
    type: object
    properties:
      emailToVerify:
        type: string
      username:
        type: string
  Authority:
    type: string
    description: actions a user can have authority/permission to perform
    enum:
    - REVIEW_RESEARCH_PURPOSE
    - MANAGE_GROUP
    - REVIEW_ID_VERIFICATION
  PageVisit:
    type: object
    properties:
      userId:
        type: integer
        format: int64
      page:
        type: string
      firstVisit:
        type: integer
        format: int64
  WorkspaceListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Workspace"
  WorkspaceResponseListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/WorkspaceResponse"
  Workspace:
    type: object
    required:
    - name
    properties:
      id:
        type: string
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.

'
      name:
        type: string
      namespace:
        type: string
      description:
        type: string
      cdrVersionId:
        type: string
      creator:
        type: string
      googleBucketName:
        type: string
      dataAccessLevel:
        "$ref": "#/definitions/DataAccessLevel"
      researchPurpose:
        "$ref": "#/definitions/ResearchPurpose"
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      userRoles:
        type: array
        items:
          "$ref": "#/definitions/UserRole"
  UserRole:
    type: object
    required:
    - email
    - role
    properties:
      email:
        type: string
      givenName:
        type: string
      familyName:
        type: string
      role:
        "$ref": "#/definitions/WorkspaceAccessLevel"
  ShareWorkspaceRequest:
    type: object
    required:
    - items
    properties:
      workspaceEtag:
        type: string
        description: 'Associated workspace etag retrieved via reading the workspaces
          API. If provided, validates that the workspace (and its user roles) has
          not been modified since this etag was retrieved.

'
      items:
        type: array
        items:
          "$ref": "#/definitions/UserRole"
  ShareWorkspaceResponse:
    type: object
    properties:
      workspaceEtag:
        type: string
        description: 'Updated workspace etag after the share request has been applied.

'
      items:
        type: array
        items:
          "$ref": "#/definitions/UserRole"
  CloneWorkspaceRequest:
    type: object
    required:
    - workspace
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
        description: |
          Workspace metadata to be applied to the cloned workspace upon creation. The following workspace fields are accepted:
            - name (required)
            - namespace (required)
            - researchPurpose (required)
            - description: defaults to the cloned workspace description

          All other fields will be ignored and are generated server-side or are copied from the cloned workspace.
  CloneWorkspaceResponse:
    type: object
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
        description: The newly created workspace clone.
  UpdateWorkspaceRequest:
    type: object
    required:
    - workspace
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
  WorkspaceAccessLevel:
    type: string
    description: levels of access to workspace, NO ACCESS is akin to removing a user
      from a workspace ACL
    enum:
    - NO ACCESS
    - READER
    - WRITER
    - OWNER
  ResearchPurpose:
    type: object
    required:
    - diseaseFocusedResearch
    - methodsDevelopment
    - controlSet
    - aggregateAnalysis
    - ancestry
    - commercialPurpose
    - population
    - reviewRequested
    - underservedPopulation
    properties:
      diseaseFocusedResearch:
        type: boolean
        default: false
      diseaseOfFocus:
        type: string
      methodsDevelopment:
        type: boolean
        default: false
      controlSet:
        type: boolean
        default: false
      aggregateAnalysis:
        type: boolean
        default: false
      ancestry:
        type: boolean
        default: false
      commercialPurpose:
        type: boolean
        default: false
      population:
        type: boolean
        default: false
      populationOfFocus:
        type: string
      reviewRequested:
        type: boolean
        default: false
      containsUnderservedPopulation:
        type: boolean
        default: false
      underservedPopulationDetails:
        type: array
        items:
          "$ref": "#/definitions/underservedPopulationEnum"
      timeRequested:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      approved:
        type: boolean
      timeReviewed:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      additionalNotes:
        type: string
  underservedPopulationEnum:
    type: string
    description: Short parsable descriptions of underserved populations
    enum:
    - RACE_AMERICAN_INDIAN_OR_ALASKA_NATIVE
    - RACE_ASIAN
    - RACE_BLACK_AFRICAN_OR_AFRICAN_AMERICAN
    - RACE_HISPANIC_OR_LATINO
    - RACE_MIDDLE_EASTERN_OR_NORTH_AFRICAN
    - RACE_NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER
    - RACE_MORE_THAN_ONE_RACE
    - AGE_CHILDREN
    - AGE_ADOLESCENTS
    - AGE_OLDER_ADULTS
    - AGE_ELDERLY
    - SEX_FEMALE
    - SEX_INTERSEX
    - SEXUAL_ORIENTATION_GAY
    - SEXUAL_ORIENTATION_LESBIAN
    - SEXUAL_ORIENTATION_BISEXUAL
    - SEXUAL_ORIENTATION_POLYSEXUAL_OMNISEXUAL_SAPIOSEXUAL_OR_PANSEXUAL
    - SEXUAL_ORIENTATION_ASEXUAL
    - SEXUAL_ORIENTATION_TWO_SPIRIT
    - SEXUAL_ORIENTATION_FIGURING_OUT_SEXUALITY
    - SEXUAL_ORIENTATION_MOSTLY_STRAIGHT
    - SEXUAL_ORIENTATION_DOES_NOT_THINK_OF_HAVING_SEXUALITY
    - SEXUAL_ORIENTATION_DOES_NOT_USE_LABELS
    - SEXUAL_ORIENTATION_DOES_NOT_KNOW_ANSWER
    - GENDER_IDENTITY_WOMAN
    - GENDER_IDENTITY_NON_BINARY
    - GENDER_IDENTITY_TRANSMAN
    - GENDER_IDENTITY_TRANSWOMAN
    - GENDER_IDENTITY_GENDERQUEER
    - GENDER_IDENTITY_GENDERFLUID
    - GENDER_IDENTITY_GENDER_VARIANT
    - GENDER_IDENTITY_QUESTIONING
    - GEOGRAPHY_URBAN_CLUSTERS
    - GEOGRAPHY_RURAL
    - DISABILITY_PHYSICAL
    - DISABILITY_MENTAL
    - ACCESS_TO_CARE_NOT_PAST_TWELVE_MONTHS
    - ACCESS_TO_CARE_CANNOT_OBTAIN_OR_PAY_FOR
    - EDUCATION_INCOME_LESS_THAN_HIGH_SCHOOL_GRADUATE
    - EDUCATION_INCOME_LESS_THAN_TWENTY_FIVE_THOUSAND_FOR_FOUR_PEOPLE
  ResearchPurposeReviewRequest:
    description: Approve or reject a workspace's research purpose.
    type: object
    required:
    - approved
    properties:
      approved:
        type: boolean
  IdVerificationReviewRequest:
    type: object
    required:
    - newStatus
    properties:
      newStatus:
        "$ref": "#/definitions/IdVerificationStatus"
  CohortListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Cohort"
  Cohort:
    type: object
    required:
    - name
    - criteria
    - type
    properties:
      id:
        type: integer
        format: int64
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.

'
      name:
        type: string
      criteria:
        description: 'Internal representation of the cohort definition. Clients should
          not depend directly on this, but instead call client functions to issue
          a SQL query for the cohort.

'
        type: string
      type:
        type: string
      description:
        type: string
      creator:
        type: string
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
  ConceptSetListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ConceptSet"
  ConceptSet:
    type: object
    required:
    - name
    - type
    properties:
      id:
        type: integer
        format: int64
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.

'
      name:
        type: string
      domain:
        description: 'Domain corresponding to an OMOP table that can contain rows
          for the concepts in this concept set. Note that the Domain values RACE,
          GENDER, and ETHNICITY are not allowed here; it makes sense to specify concepts
          in these domains in cohort criteria, but there isn''t much value in having
          concept sets defined for them.

'
        "$ref": "#/definitions/Domain"
      description:
        type: string
      creator:
        type: string
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      concepts:
        description: Concepts in the concept set, in conceptName order.
        type: array
        items:
          "$ref": "#/definitions/Concept"
  UpdateConceptSetRequest:
    type: object
    required:
    - etag
    properties:
      etag:
        type: string
        description: 'Etag of the concept set being modified. Validates that the concept
          set has not been modified since this etag was retrieved.

'
      addedIds:
        type: array
        description: 'The IDs of concepts to be added to the concept set.

'
        items:
          type: integer
          format: int64
      removedIds:
        type: array
        description: 'The IDs of concepts to be removed from the concept set.

'
        items:
          type: integer
          format: int64
  CreateAccountRequest:
    type: object
    properties:
      profile:
        "$ref": "#/definitions/Profile"
      invitationKey:
        type: string
  InvitationVerificationRequest:
    type: object
    required:
    - invitationKey
    properties:
      invitationKey:
        type: string
        description: Invitation key for verification
  ResendWelcomeEmailRequest:
    type: object
    required:
    - username
    properties:
      username:
        type: string
        description: Username of account to resend welcome email to
  UpdateContactEmailRequest:
    type: object
    required:
    - contactEmail
    - username
    properties:
      contactEmail:
        type: string
        description: Email to update contact email
      username:
        type: string
        description: Username for account.
  BugReport:
    type: object
    required:
    - shortDescription
    - contactEmail
    properties:
      shortDescription:
        description: A short description of the bug
        type: string
      reproSteps:
        description: Steps to reproduce the bug
        type: string
      includeNotebookLogs:
        description: Whether or not to include notebook server logs in the bug report.
        type: boolean
      contactEmail:
        description: The email with which to contact the bug reporter.
        type: string
  Profile:
    type: object
    required:
    - username
    - dataAccessLevel
    properties:
      userId:
        description: researchallofus userId
        type: integer
        format: int64
      username:
        description: researchallofus username
        type: string
      contactEmail:
        description: email address that can be used to contact the user
        type: string
      contactEmailFailure:
        description: Whether or not contact email could be added to verification list
        type: boolean
      firstSignInTime:
        type: integer
        format: int64
      freeTierBillingProjectName:
        description: name of the AllOfUs free tier billing project created for this
          user
        type: string
      freeTierBillingProjectStatus:
        description: 'the initialization status of the free tier billing project,
          some workbench functionality may not work fully with this project until
          it is fully initialized

'
        "$ref": "#/definitions/BillingProjectStatus"
      dataAccessLevel:
        description: what level of data access the user has
        "$ref": "#/definitions/DataAccessLevel"
      givenName:
        description: the user's given name (e.g. Alice)
        type: string
      familyName:
        description: the user's family  name (e.g. Jones)
        type: string
      phoneNumber:
        description: the user's phone number
        type: string
      authorities:
        description: authorities granted to this user
        type: array
        items:
          "$ref": "#/definitions/Authority"
      pageVisits:
        description: pages user has visited
        type: array
        items:
          "$ref": "#/definitions/PageVisit"
      idVerificationStatus:
        "$ref": "#/definitions/IdVerificationStatus"
        description: Status of ID verification
      termsOfServiceCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user consented to terms of service in milliseconds
          since the UNIX epoch.
      ethicsTrainingCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user completed ethics training in milliseconds
          since the UNIX epoch.
      demographicSurveyCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user completed a demographic survey in milliseconds
          since the UNIX epoch.
      disabled:
        type: boolean
      emailVerificationStatus:
        "$ref": "#/definitions/EmailVerificationStatus"
      aboutYou:
        type: string
      areaOfResearch:
        type: string
      institutionalAffiliations:
        type: array
        items:
          "$ref": "#/definitions/InstitutionalAffiliation"
      requestedIdVerification:
        type: boolean
      twoFactorEnabled:
        type: boolean
  InstitutionalAffiliation:
    type: object
    required:
    - institution
    - role
    properties:
      institution:
        type: string
      role:
        type: string
  ErrorCode:
    type: string
    description: Short parsable error descriptions
    enum:
    - PARSE_ERROR
    - USER_DISABLED
  ErrorResponse:
    type: object
    properties:
      message:
        description: General error message for the response.
        type: string
      statusCode:
        type: integer
        description: HTTP status code
      errorClassName:
        type: string
      errorCode:
        description: Short description of the type of error
        "$ref": "#/definitions/ErrorCode"
  IdVerificationStatus:
    type: string
    description: possible values indicating whether the user's ID has been verified
    enum:
    - UNVERIFIED
    - VERIFIED
    - REJECTED
  StackTraceElement:
    description: ''
    required:
    - className
    - methodName
    - fileName
    - lineNumber
    properties:
      className:
        type: string
        description: class name
      methodName:
        type: string
        description: method name
      fileName:
        type: string
        description: source file name
      lineNumber:
        type: integer
        description: line number
  ClusterStatus:
    type: string
    enum:
    - Creating
    - Running
    - Updating
    - Error
    - Stopping
    - Stopped
    - Starting
    - Deleting
    - Deleted
    - Unknown
  Cluster:
    description: A Firecloud notebook cluster.
    required:
    - clusterName
    - clusterNamespace
    - status
    properties:
      clusterName:
        type: string
        description: The user-supplied name for the cluster
      clusterNamespace:
        type: string
        description: The Google Project used to create the cluster
      status:
        "$ref": "#/definitions/ClusterStatus"
      createdDate:
        type: string
        description: The date and time the cluster was created, in ISO-8601 format
  FileDetail:
    type: object
    required:
    - name
    - path
    - lastModifiedTime
    properties:
      name:
        type: string
        description: File Name
      path:
        type: string
        description: The path is in format of gs://bucket-name/name
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
  ClusterListResponse:
    type: object
    required:
    - defaultCluster
    properties:
      defaultCluster:
        "$ref": "#/definitions/Cluster"
  ClusterLocalizeRequest:
    type: object
    required:
    - workspaceNamespace
    - workspaceId
    - notebookNames
    properties:
      workspaceNamespace:
        type: string
        description: Workspace namespace from which to source notebooks
      workspaceId:
        type: string
        description: Workspace from which to source notebooks
      notebookNames:
        type: array
        description: 'Names of notebooks to localize. This is just the basename (no
          gs:// needed). This is interpreted as relative to the /notebooks directory
          within the provided workspace''s Google Cloud Storage bucket.

'
        items:
          type: string
  ClusterLocalizeResponse:
    type: object
    required:
    - clusterLocalDirectory
    properties:
      clusterLocalDirectory:
        type: string
        description: 'The directory on the notebook cluster file system where the
          requested files were localized. This is the "API" directory in Jupyter terms,
          which means it is a relative path in the Jupyter user-facing file system,
          e.g. "foo/bar.ipynb".

'
  UsernameTakenResponse:
    type: object
    required:
    - isTaken
    properties:
      isTaken:
        description: Boolean response to whether username is already taken.
        type: boolean
    example:
      isTaken: false
  ContactEmailTakenResponse:
    type: object
    required:
    - isTaken
    properties:
      isTaken:
        description: Boolean response to whether contact email is already taken.
        type: boolean
    example:
      isTaken: false
  WorkspaceResponse:
    type: object
    required:
    - workspace
    - accessLevel
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
      accessLevel:
        "$ref": "#/definitions/WorkspaceAccessLevel"
  IdVerificationListResponse:
    type: object
    required:
    - profileList
    properties:
      profileList:
        type: array
        items:
          "$ref": "#/definitions/Profile"
  AuthDomainRequest:
    type: object
    required:
    - email
    properties:
      email:
        type: string
  AuditBigQueryResponse:
    type: object
    properties:
      numQueryIssues:
        type: integer
        format: int32
        description: 'Number of queries issues against the Curated data repository
          which are flagged as possible audit issues. See logs/alerts for details.

'
  CheckClustersResponse:
    type: object
    properties:
      clusterDeletionCount:
        type: integer
        format: int32
        description: 'Number of clusters deleted during the check.

'
  RecentResourceResponse:
    type: array
    items:
      "$ref": "#/definitions/RecentResource"
  RecentResource:
    type: object
    properties:
      workspaceId:
        type: integer
        format: int64
      permission:
        type: string
      cohort:
        "$ref": "#/definitions/Cohort"
      notebook:
        "$ref": "#/definitions/FileDetail"
      modifiedTime:
        type: string
  MaterializeCohortRequest:
    type: object
    properties:
      cohortName:
        description: 'The name of a cohort that is to be evaluated. Either this or
          cohortSpec should be specified

'
        type: string
      cohortSpec:
        description: 'JSON representation of a cohort to be evaluated (using the same
          format used for saved cohorts). Either this or cohortName should be specified

'
        type: string
      statusFilter:
        description: 'An array of status values; participants with these statuses
          will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW]
          -- everything but EXCLUDED. Only valid for use with cohortName (cohorts
          saved in the database.)

'
        type: array
        items:
          "$ref": "#/definitions/CohortStatus"
      cdrVersionName:
        description: 'The name of a CDR version to use when evaluating the cohort;
          if none is specified, the CDR version currently associated with the workspace
          will be used

'
        type: string
      pageToken:
        description: 'Pagination token retrieved from a previous call to materializeCohort;
          used for retrieving additional pages of results. If this is specified, all
          other fields on MaterializeCohortRequest apart from pageSize must match
          the values specified on the request that generated this token.

'
        type: string
      pageSize:
        description: 'Maximum number of results to return in a response. Defaults
          to 1000.

'
        type: integer
        format: int32
      fieldSet:
        description: 'Specification defining what data to return for participants
          in the cohort. Defaults to just participant IDs.

'
        "$ref": "#/definitions/FieldSet"
  MaterializeCohortResponse:
    type: object
    required:
    - results
    properties:
      results:
        description: 'An array of JSON dictionaries representing results to the cohort
          materialization. (In Java, this is represented as Map<String, Object>[].
          In Python clients, this is a list[object] where each object is a dictionary.
          In Typescript clients, this is an Array<any> where each object is a dictionary.)
          Keys in the dictionaries will be the columns selected in the field set provided
          in the request, and the values will be the values of those columns.

'
        type: array
        items:
          type: object
      nextPageToken:
        description: 'Pagination token that can be used in a subsequent call to MaterializeCohortRequest
          to retrieve more results. If not set, there are no more results to retrieve.

'
        type: string
  FieldSet:
    type: object
    description: 'A specification for fields to retrieve about participants in a cohort.
      Exactly one of the properties below should be specified.

'
    properties:
      tableQuery:
        description: 'A query specifying how to pull data out of a single table. Either
          this or annotationQuery should be set (not both.)

'
        "$ref": "#/definitions/TableQuery"
      annotationQuery:
        description: 'A query specifying how to retrieve annotation values created
          about participants in a cohort during cohort review. Either this or tableQuery
          should be set (not both.)

'
        "$ref": "#/definitions/AnnotationQuery"
  TableQuery:
    type: object
    description: 'A specification for retrieving data from a single table.

'
    required:
    - tableName
    properties:
      tableName:
        description: 'The name of a table containing a person_id column to retrieve
          data from (e.g. person, observation); should be in the OMOP CDM 5.2 schema.

'
        externalDocs:
          description: OMOP CDM 5.2 schema definition
          url: https://github.com/OHDSI/CommonDataModel/blob/v5.2.0/PostgreSQL/OMOP%20CDM%20ddl%20-%20PostgreSQL.sql
        type: string
      columns:
        description: 'An array of columns to retrieve from the table, taken from the
          table specified above. Defaults to all columns.

'
        type: array
        items:
          type: string
      filters:
        description: 'Filters on the results. Only results matching the criteria specified
          in the filters will be returned. If both filters and conceptSetName are
          specified, results must match both.

'
        "$ref": "#/definitions/ResultFilters"
      conceptSetName:
        description: 'A name of a concept set in the workspace used to filter results;
          results must match one of the concepts in the named concept set. If both
          filters and conceptSetName are specified, results must match both.

'
        type: string
      orderBy:
        description: 'An array of columns to sort the resulting data by, taken from
          the table specified above, each one optionally enclosed in "DESCENDING()"
          for descending sort order. Default sort order is "person_id" (in ascending
          order) followed by the ID of the specified table (in ascending order.)

'
        type: array
        items:
          type: string
  AnnotationQuery:
    type: object
    description: 'A specification for retrieving annotation values or review statuses
      entered for participants.

'
    properties:
      columns:
        description: 'An array of names of annotations to retrieve about participants,
          or "review_status" for the cohort review status of the participant or "person_id"
          for the ID of the participant. Defaults to "person_id", "review_status",
          and the names of all defined annotations in the cohort review. This is only
          valid in combination with the use of cohortName above. Only data for participants
          in the cohort review will be returned; if no cohort review has been created,
          no results will be returned.

'
        type: array
        items:
          type: string
      orderBy:
        description: 'An array of names of annotations, or "review status" or "person_id",
          each one optionally enclosed in "DESCENDING()" for descending sort order.
          Specifies the order that results should be returned. Defaults to "person_id"
          (in ascending order). Annotations referenced in orderBy must also be present
          in columns.

'
        type: array
        items:
          type: string
  ResultFilters:
    type: object
    description: 'A list of filters applied to the results of a query. Only results
      matching the filter criteria should be returned. Exactly one of "allOf", "anyOf",
      and "columnFilter" should be set.

'
    properties:
      if_not:
        description: 'Set to true if a result matching allOf or anyOf below should
          result in a result *not* being returned.

'
        type: boolean
      allOf:
        description: 'A list of result filters. All filters matching means a result
          should be returned (or not returned if "not" is true.)

'
        type: array
        items:
          "$ref": "#/definitions/ResultFilters"
      anyOf:
        description: 'A list of column filters. Any filters matching means a result
          should be returned (or not returned if "not" is true.)

'
        type: array
        items:
          "$ref": "#/definitions/ResultFilters"
      columnFilter:
        description: 'A filter on a column in the table. Only a result matching this
          filter should be returned (or not returned if "not" is true.)

'
        "$ref": "#/definitions/ColumnFilter"
  ColumnFilter:
    type: object
    required:
    - columnName
    description: 'A filter applied to the results of a query, based on a column value
      in a table. Only results matching the filter will be returned. One (and only
      one) of the value columns should be populated. values and valueNumbers should
      only be used in conjunction with the "in" operator.

'
    properties:
      columnName:
        description: 'The name of the column to filter on.

'
        type: string
      operator:
        description: 'The operator to use when comparing values. Defaults to EQUAL.
          If the "in" operator is used, either values or valueNumbers should be populated.

'
        "$ref": "#/definitions/Operator"
        externalDocs:
          description: Documentation of BigQuery SQL operators
          url: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#comparison-operators
      value:
        description: 'A string to use in comparisons (case-sensitive).

'
        type: string
      values:
        description: 'An array of strings to use in comparisons (case-sensitive);
          used with the "in" operator.

'
        type: array
        items:
          type: string
      valueDate:
        description: 'A date (yyyy-MM-dd) or datetime (yyyy-MM-dd HH:mm:ss zzz) value
          to use in comparisons.

'
        type: string
      valueNumber:
        description: 'A number to use in comparisons (either integer or floating point.)

'
        type: number
      valueNumbers:
        description: 'An array of numbers to use in comparisons (used with the "in"
          operator)

'
        type: array
        items:
          type: number
      valueNull:
        description: 'Set to true if the column value should be compared to null.

'
        type: boolean
  CohortStatus:
    type: string
    description: possible values indicating whether participants are in or out of
      the cohort
    enum:
    - EXCLUDED
    - INCLUDED
    - NEEDS_FURTHER_REVIEW
    - NOT_REVIEWED
  Operator:
    type: string
    enum:
    - EQUAL
    - NOT_EQUAL
    - LESS_THAN
    - GREATER_THAN
    - LESS_THAN_OR_EQUAL_TO
    - GREATER_THAN_OR_EQUAL_TO
    - LIKE
    - IN
    - BETWEEN
  StandardConceptFilter:
    type: string
    description: filter on whether standard, non-standard, or all concepts should
      be returned\
    enum:
    - ALL_CONCEPTS
    - STANDARD_CONCEPTS
    - NON_STANDARD_CONCEPTS
    - STANDARD_OR_CODE_ID_MATCH
  Domain:
    type: string
    description: filter on the domain in which concepts should be returned
    enum:
    - OBSERVATION
    - PROCEDURE
    - DRUG
    - CONDITION
    - MEASUREMENT
    - DEVICE
    - DEATH
    - VISIT
    - RACE
    - GENDER
    - ETHNICITY
  MatchType:
    type: string
    description: match column type on concept search
    enum:
    - CONCEPT_CODE
    - CONCEPT_ID
    - CONCEPT_NAME
  Concept:
    description: A concept describing a type of entity (e.g. measurement, observation,
      procedure.)
    type: object
    required:
    - conceptId
    - conceptName
    - domainId
    - vocabularyId
    - conceptCode
    - conceptClassId
    - standardConcept
    - countValue
    - prevalence
    properties:
      conceptId:
        description: ID of the concept
        type: integer
        format: int64
      conceptName:
        description: Name of the concept
        type: string
      domainId:
        description: Domain ID of the concept (e.g. Observation)
        type: string
      vocabularyId:
        description: Vocabulary ID of the concept (e.g. SNOMED)
        type: string
      conceptCode:
        description: Code for the concept in its vocabulary (e.g. G8107)
        type: string
      conceptClassId:
        description: Class of the concept (e.g. Ingredient)
        type: string
      standardConcept:
        description: True if this is a standard concept, false otherwise
        type: boolean
      countValue:
        description: Count of participants matching this concept in the CDR
        type: integer
        format: int64
      prevalence:
        description: Prevalence among participants in the CDR (a percentage of the
          total)
        type: number
        format: float
      conceptSynonyms:
        description: concept synonym names
        type: array
        items:
          type: string
  SearchConceptsRequest:
    type: object
    required:
    - query
    properties:
      query:
        type: string
        description: 'A query string that can be used to match a subset of the name
          (case-insensitively), the entire code value (case-insensitively), or the
          concept ID.

'
      standardConceptFilter:
        description: 'STANDARD_CONCEPTS if only standard concepts should be returned,
          NON_STANDARD_CONCEPTS if only non-standard concepts should be returned;
          defaults to ALL_CONCEPTS, meaning both standard and non-standard concepts
          will be returned.

'
        "$ref": "#/definitions/StandardConceptFilter"
      vocabularyIds:
        type: array
        items:
          type: string
        description: The vocabulary ID for the concepts returned (e.g. SNOMED, RxNorm)
      domain:
        description: 'The domain for the concepts returned (e.g. OBSERVATION, DRUG).
          Note that this may map to multiple domain ID values in OMOP.

'
        "$ref": "#/definitions/Domain"
      maxResults:
        type: integer
        format: int32
        description: The maximum number of results returned. Defaults to 20.
      minCount:
        type: integer
        format: int32
        description: Determines the concepts to be fetched. Gets all the concepts
          if 0 or gets concepts with counts if 1.
  ConceptListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Concept"
      matchType:
        description: match column type on which concept search was successful
        "$ref": "#/definitions/MatchType"
      standardConcepts:
        type: array
        items:
          "$ref": "#/definitions/Concept"
        description: standard concepts associated with the matched concept
  CreateReviewRequest:
    type: object
    required:
    - size
    properties:
      size:
        description: A sample size to review
        type: integer
  CohortReview:
    type: object
    required:
    - cohortReviewId
    - cohortId
    - cdrVersionId
    - creationTime
    - matchedParticipantCount
    - reviewStatus
    properties:
      cohortReviewId:
        type: integer
        format: int64
      cohortId:
        type: integer
        format: int64
      cdrVersionId:
        type: integer
        format: int64
      creationTime:
        type: string
      matchedParticipantCount:
        type: integer
        format: int64
      reviewSize:
        type: integer
        format: int64
      reviewedCount:
        type: integer
        format: int64
      reviewStatus:
        "$ref": "#/definitions/ReviewStatus"
      participantCohortStatuses:
        type: array
        items:
          "$ref": "#/definitions/ParticipantCohortStatus"
      page:
        type: integer
      pageSize:
        type: integer
      sortOrder:
        type: string
      sortColumn:
        type: string
  PageFilterRequest:
    discriminator: pageFilterType
    required:
    - page
    - pageSize
    - sortOrder
    - pageFilterType
    properties:
      page:
        type: integer
        description: specific page (default is 0)
      pageSize:
        type: integer
        description: page size of results (default is 25)
      sortOrder:
        "$ref": "#/definitions/SortOrder"
      pageFilterType:
        "$ref": "#/definitions/PageFilterType"
      filters:
        "$ref": "#/definitions/FilterList"
  ParticipantCohortStatuses:
    allOf:
    - "$ref": "#/definitions/PageFilterRequest"
    - properties:
        sortColumn:
          "$ref": "#/definitions/ParticipantCohortStatusColumns"
          description: Column upon which to sort (default is 'participantId')
  ReviewFilter:
    allOf:
    - "$ref": "#/definitions/PageFilterRequest"
    - properties:
        sortColumn:
          "$ref": "#/definitions/ReviewColumns"
          description: Column upon which to sort (default is 'itemDate')
        domain:
          "$ref": "#/definitions/DomainType"
          description: Different domain types in omop
  ParticipantCohortStatusColumns:
    type: string
    enum:
    - PARTICIPANTID
    - STATUS
    - GENDER
    - BIRTHDATE
    - RACE
    - ETHNICITY
  ReviewColumns:
    type: string
    enum:
    - startDate
    - endDate
    - domain
    - standardVocabulary
    - standardName
    - sourceValue
    - sourceVocabulary
    - sourceName
    - ageAtEvent
    - signature
  PageFilterType:
    type: string
    enum:
    - ParticipantCohortStatuses
    - ReviewFilter
  DomainType:
    type: string
    enum:
    - CONDITION
    - PROCEDURE
    - OBSERVATION
    - DRUG
    - ALL_EVENTS
    - DEVICE
    - VISIT
    - MEASUREMENT
    - PHYSICAL_MEASURE
  SortOrder:
    type: string
    enum:
    - asc
    - desc
  FilterList:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Filter"
  Filter:
    type: object
    required:
    - property
    - operator
    - values
    properties:
      property:
        "$ref": "#/definitions/ParticipantCohortStatusColumns"
      operator:
        "$ref": "#/definitions/Operator"
      values:
        type: array
        items:
          type: string
  ParticipantCohortStatus:
    type: object
    required:
    - participantId
    - status
    properties:
      participantId:
        type: integer
        format: int64
      status:
        "$ref": "#/definitions/CohortStatus"
      genderConceptId:
        type: integer
        format: int64
      gender:
        type: string
      birthDate:
        type: string
      raceConceptId:
        type: integer
        format: int64
      race:
        type: string
      ethnicityConceptId:
        type: integer
        format: int64
      ethnicity:
        type: string
  ModifyCohortStatusRequest:
    type: object
    required:
    - status
    properties:
      status:
        "$ref": "#/definitions/CohortStatus"
  ParticipantChartDataListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ParticipantChartData"
  CohortSummaryListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/CohortSummary"
  ParticipantCohortAnnotation:
    type: object
    required:
    - cohortReviewId
    - participantId
    - cohortAnnotationDefinitionId
    properties:
      annotationId:
        type: integer
        format: int64
        description: participant annotation id.
      cohortAnnotationDefinitionId:
        type: integer
        format: int64
        description: annotation definition id.
      cohortReviewId:
        type: integer
        format: int64
        description: the cohort reivew id.
      participantId:
        type: integer
        format: int64
        description: the participant id.
      annotationValueString:
        type: string
        description: The Value of the annotation if the AnnotationType is STRING
      annotationValueEnum:
        type: string
        description: The option chosen for the annotation if the AnnotationType is
          ENUM
      annotationValueDate:
        type: string
        description: The Value of the annotation if the AnnotationType is DATE
      annotationValueBoolean:
        type: boolean
        description: The Value of the annotation if the AnnotationType is BOOLEAN
      annotationValueInteger:
        type: integer
        description: The Value of the annotation if the AnnotationType is INTEGER
  ParticipantCohortAnnotationListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ParticipantCohortAnnotation"
  ParticipantDataListResponse:
    type: object
    required:
    - items
    - count
    - pageRequest
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ParticipantData"
      count:
        type: integer
        format: int64
        description: the total count of items.
      pageRequest:
        "$ref": "#/definitions/PageRequest"
  ModifyParticipantCohortAnnotationRequest:
    type: object
    properties:
      annotationValueString:
        type: string
        description: The Value of the annotation if the AnnotationType is STRING
      annotationValueEnum:
        type: string
        description: The option chosen for the annotation if the AnnotationType is
          ENUM
      annotationValueDate:
        type: string
        description: The Value of the annotation if the AnnotationType is DATE
      annotationValueBoolean:
        type: boolean
        description: The Value of the annotation if the AnnotationType is BOOLEAN
      annotationValueInteger:
        type: integer
        description: The Value of the annotation if the AnnotationType is INTEGER
  ReviewStatus:
    type: string
    description: possible values indicating whether review has been created
    enum:
    - NONE
    - CREATED
  PageRequest:
    type: object
    required:
    - page
    - pageSize
    - sortOrder
    - sortColumn
    properties:
      page:
        type: integer
        description: the page
      pageSize:
        type: integer
        description: the page size.
      sortOrder:
        "$ref": "#/definitions/SortOrder"
      sortColumn:
        type: string
        description: sort column
  CohortSummary:
    type: object
    required:
    - type
    - name
    - code
    - count
    properties:
      type:
        type: string
        description: the criteria type
      name:
        type: string
        description: the name of this criteria
      code:
        type: string
        description: the code for this criteria
      count:
        type: integer
        format: int64
        description: the count for this criteria type in the cohort
  ParticipantChartData:
    type: object
    required:
    - standardName
    - standardVocabulary
    - startDate
    - ageAtEvent
    - rank
    properties:
      standardName:
        type: string
        description: the standard name
      standardVocabulary:
        type: string
        description: the standard vocabulary
      startDate:
        type: string
        description: the date of the event
      ageAtEvent:
        type: integer
        description: The age at event for the participant
      rank:
        type: integer
        description: the rank of the data
  ParticipantData:
    discriminator: domainType
    required:
    - itemDate
    - domainType
    properties:
      itemDate:
        type: string
        description: The date of the event
      numMentions:
        type: string
        description: Number of mentions
      domainType:
        "$ref": "#/definitions/DomainType"
  Condition:
    allOf:
    - "$ref": "#/definitions/ParticipantData"
    - properties:
        standardVocabulary:
          type: string
          description: The standard vocabulary of this data
        standardName:
          type: string
          description: The standard name of this data
        standardCode:
          type: string
          description: The standard code of this data
        sourceVocabulary:
          type: string
          description: The source vocabulary type of this data
        sourceName:
          type: string
          description: The source name of this data
        sourceCode:
          type: string
          description: The source code of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        numMentions:
          type: string
          description: The number of mentions of this data
        firstMention:
          type: string
          description: The date of first mention of this data
        lastMention:
          type: string
          description: The date of last mention of this data
        visitId:
          type: integer
          format: int64
          description: The visit Id of this data
  Procedure:
    allOf:
    - "$ref": "#/definitions/ParticipantData"
    - properties:
        standardVocabulary:
          type: string
          description: The standard vocabulary of this data
        standardName:
          type: string
          description: The standard name of this data
        standardCode:
          type: string
          description: The standard code of this data
        sourceVocabulary:
          type: string
          description: The source vocabulary type of this data
        sourceName:
          type: string
          description: The source name of this data
        sourceCode:
          type: string
          description: The source code of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        numMentions:
          type: string
          description: The number of mentions of this data
        firstMention:
          type: string
          description: The date of first mention of this data
        lastMention:
          type: string
          description: The date of last mention of this data
        visitId:
          type: integer
          format: int64
          description: The visit Id of this data
  Observation:
    allOf:
    - "$ref": "#/definitions/ParticipantData"
    - properties:
        standardVocabulary:
          type: string
          description: The standard vocabulary type of this data
        standardName:
          type: string
          description: The standard name of this data
        standardCode:
          type: string
          description: The standard code of this data
        sourceVocabulary:
          type: string
          description: The source vocabulary type of this data
        sourceName:
          type: string
          description: The source name of this data
        sourceCode:
          type: string
          description: The source code of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        visitId:
          type: integer
          format: int64
          description: The visit Id of this data
  Drug:
    allOf:
    - "$ref": "#/definitions/ParticipantData"
    - properties:
        standardName:
          type: string
          description: The standard name of this data
        standardCode:
          type: string
          description: The standard code of this data
        sourceVocabulary:
          type: string
          description: The source vocabulary type of this data
        sourceName:
          type: string
          description: The source name of this data.
        sourceCode:
          type: string
          description: The source code of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        numMentions:
          type: string
          description: The number of mentions of this data
        firstMention:
          type: string
          description: The date of first mention of this data
        lastMention:
          type: string
          description: The date of last mention of this data
        quantity:
          type: string
          description: The quantity of this data
        refills:
          type: string
          description: The refills of this data
        strength:
          type: string
          description: The strength of this data
        route:
          type: string
          description: The route of this data
        visitId:
          type: integer
          format: int64
          description: The visit Id of this data
  AllEvents:
    allOf:
    - "$ref": "#/definitions/ParticipantData"
    - properties:
        dataId:
          type: integer
          format: int64
          description: Primary key of this data
        domain:
          type: string
          description: the domain of this data.
        standardVocabulary:
          type: string
          description: The standard vocabulary of this data
        standardName:
          type: string
          description: The standard name of this data
        standardCode:
          type: string
          description: The standard code of this data
        sourceVocabulary:
          type: string
          description: The source vocabulary type of this data
        sourceName:
          type: string
          description: The source name of this data.
        sourceCode:
          type: string
          description: The source code of this data
        sourceValue:
          type: string
          description: The source value of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        numMentions:
          type: string
          description: The number of mentions of this data
        firstMention:
          type: string
          description: The date of first mention of this data
        lastMention:
          type: string
          description: The date of last mention of this data
        visitType:
          type: string
          description: The visit type of this data
  Measurement:
    allOf:
    - "$ref": "#/definitions/ParticipantData"
    - properties:
        standardVocabulary:
          type: string
          description: The standard vocabulary of this data
        standardName:
          type: string
          description: The standard name of this data
        standardCode:
          type: string
          description: The standard code of this data
        sourceName:
          type: string
          description: The source name of this data
        sourceCode:
          type: string
          description: The source code of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        valueConcept:
          type: string
          description: The value of this data
        valueSource:
          type: string
          description: The value of this data
        valueNumber:
          type: string
          description: The value of this data
        units:
          type: string
          description: The units of this data
        labRefRange:
          type: string
          description: The lab reference range of this data
        visitId:
          type: integer
          format: int64
          description: The visit Id of this data
  PhysicalMeasurement:
    allOf:
    - "$ref": "#/definitions/ParticipantData"
    - properties:
        standardVocabulary:
          type: string
          description: The standard vocabulary of this data
        standardName:
          type: string
          description: The standard name of this data
        standardCode:
          type: string
          description: The standard code of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        valueConcept:
          type: string
          description: The value of this data
        valueSource:
          type: string
          description: The value of this data
        valueNumber:
          type: string
          description: The value of this data
        units:
          type: string
          description: The units of this data
  AnnotationType:
    type: string
    description: possible values representing the type of annotation.
    enum:
    - STRING
    - ENUM
    - DATE
    - BOOLEAN
    - INTEGER
  CohortAnnotationDefinition:
    type: object
    required:
    - cohortId
    - columnName
    - annotationType
    properties:
      cohortAnnotationDefinitionId:
        type: integer
        format: int64
        description: the annotation definition id.
      cohortId:
        type: integer
        format: int64
        description: the cohort id.
      columnName:
        type: string
        description: the name of this annotation.
      annotationType:
        "$ref": "#/definitions/AnnotationType"
      enumValues:
        type: array
        items:
          type: string
  CohortAnnotationDefinitionListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/CohortAnnotationDefinition"
  ModifyCohortAnnotationDefinitionRequest:
    type: object
    required:
    - columnName
    properties:
      columnName:
        type: string
        description: the name of this annotation.
  CriteriaListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Criteria"
  Criteria:
    type: object
    required:
    - id
    - parentId
    - type
    - code
    - name
    - group
    - selectable
    - hasAttribute
    properties:
      id:
        description: id of the criteria
        type: integer
        format: int64
      parentId:
        description: parent id of the criteria
        type: integer
        format: int64
      type:
        description: type of criteria
        type: string
      subtype:
        description: subtype of this criteria
        type: string
      code:
        description: 'code that identifies this criteria, ex: icd9, icd10 or cpt all
          have codes that map to the concept_code column in the concept table.

'
        type: string
      name:
        description: description of criteria
        type: string
      count:
        description: est. count in the cdr
        type: integer
        format: int64
      group:
        description: specifies if child or parent
        type: boolean
      selectable:
        description: specifies if user can search with
        type: boolean
      conceptId:
        description: 'concept ids are ids associated with a specific vocabulary item,
          in the concept table and allow you to search for that code in its domain
          table.

'
        type: integer
        format: int64
      domainId:
        description: 'clue to determine which tables to search, but these only exist
          for leaves in the tree. Parents don''t have domain ids and concept id will
          be used in the case that a parent is selectable.

'
        type: string
      hasAttributes:
        description: specifies if extra attributes are needed
        type: boolean
      path:
        description: full path from parent to this node with ids
        type: string
  CriteriaAttributeListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/CriteriaAttribute"
  CriteriaAttribute:
    type: object
    required:
    - id
    - conceptId
    - valueAsConceptId
    - conceptName
    - type
    - estCount
    properties:
      id:
        description: id of the criteria
        type: integer
        format: int64
      conceptId:
        description: conceptId of the concept
        type: integer
        format: int64
      valueAsConceptId:
        description: categorical concept id
        type: integer
        format: int64
      conceptName:
        description: name of concept
        type: string
      type:
        description: numerical or categorical
        type: string
      estCount:
        description: possible count
        type: string
  SearchRequest:
    description: 'The SearchRequest describes the state of the Cohort Builder at any
      given moment. It contains two keys, `include` and `exclude`, each of which specifies
      an array of SearchGroups which are `AND`ed together, and which collectively
      specify which subjects to include or exclude from the cohort.

'
    type: object
    required:
    - includes
    - excludes
    properties:
      includes:
        type: array
        items:
          "$ref": "#/definitions/SearchGroup"
      excludes:
        type: array
        items:
          "$ref": "#/definitions/SearchGroup"
    example:
      typical:
        include:
        - - type: ICD9
            searchParameters:
            - value: Foo
              domain: Bar
            - value: C
          - type: ICD9
            searchParameters:
            - value: Baz
        - - type: ICD10
            searchParameters:
            - value: Baz
              domain: Bar
            modifiers: []
        exclude: []
      minimum:
        include:
        - - type: A Crit Type
            searchParameters:
            - value: A value
  SearchGroup:
    description: 'A SearchGroup is a container for groups of criteria which are `AND`ed
      together.

'
    type: object
    required:
    - items
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      items:
        type: array
        items:
          "$ref": "#/definitions/SearchGroupItem"
  SearchGroupItem:
    description: 'A SearchGroupItem is the "line item" of the Cohort Builder.  It
      specifies a set of criteria of a given kind, possibly alongside a set of modifiers,
      the results of which are `OR`ed together with the other criteria in the group.

'
    type: object
    required:
    - type
    - searchParameters
    - modifiers
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      type:
        description: type of criteria
        type: string
      searchParameters:
        description: values that help search for subjects
        type: array
        items:
          "$ref": "#/definitions/SearchParameter"
      modifiers:
        description: criteria by operation or predicate
        type: array
        items:
          "$ref": "#/definitions/Modifier"
    example:
      type: ICD9
      searchParameters:
      - value: E9293
        domain: Condition
        conceptId: 
      - value: E979-E979.9
        domain: 
        conceptId: 
      modifiers:
      - name: age_at_event
        operator: GTE >=
        operands:
        - Arg1
        - Arg2
  SearchParameter:
    type: object
    required:
    - parameterId
    - name
    - value
    - type
    - subtype
    - group
    - attributes
    properties:
      parameterId:
        description: Unique within the cohort definition
        type: string
      name:
        description: The name of the generating Criterion
        type: string
      value:
        description: The Value of the Criteria within its Category Tree
        type: string
      type:
        description: The type of the generating Criterion
        type: string
      subtype:
        description: The subtype of the generating Criterion
        type: string
      group:
        description: Specifies if the generating Criterion is a leaf or node in its
          Criteria tree
        type: boolean
      domain:
        description: clue to determine which tables to search
        type: string
      conceptId:
        description: The concept id that maps to concept table.
        type: integer
        format: int64
      attributes:
        description: Any applicable arguments that complete the sense of the parameter
        type: array
        items:
          "$ref": "#/definitions/Attribute"
    example:
      leafExample:
        value: E9293
        subtype: AGE
        domainId: Condition
      parentExample:
        value: E979-E979.9
        subtype: BP_EHR
        domainId: 
  Attribute:
    type: object
    required:
    - operands
    properties:
      name:
        type: string
        description: the name of the attribute
      operator:
        "$ref": "#/definitions/Operator"
      operands:
        type: array
        items:
          type: string
      conceptId:
        description: The concept id that maps to concept table.
        type: integer
        format: int64
    example:
      singleValued:
        operator: GTE
        operands:
        - '20'
      multiValued:
        operator: BETWEEN
        operands:
        - '18'
        - '35'
  Modifier:
    type: object
    required:
    - name
    - operator
    - operands
    properties:
      name:
        description: name/type of modifier
        "$ref": "#/definitions/ModifierType"
      operator:
        description: Machine name of the operator
        "$ref": "#/definitions/Operator"
      operands:
        type: array
        items:
          type: string
    example:
      singleValued:
        name: AGE_AT_EVENT
        operator: GREATER_THAN_OR_EQUAL_TO
        operands:
        - '20'
  ModifierType:
    type: string
    description: possible types of modifiers
    enum:
    - AGE_AT_EVENT
    - NUM_OF_OCCURRENCES
    - EVENT_DATE
    - ENCOUNTERS
  ChartInfoListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ChartInfo"
  ChartInfo:
    type: object
    required:
    - gender
    - race
    - ageRange
    - count
    properties:
      gender:
        description: gender of subject
        type: string
      race:
        description: race of subject
        type: string
      ageRange:
        description: age range of subject
        type: string
      count:
        description: number of subjects
        type: integer
        format: int64
  ParticipantDemographics:
    type: object
    required:
    - genderList
    - raceList
    - ethnicityList
    properties:
      genderList:
        type: array
        items:
          "$ref": "#/definitions/ConceptIdName"
      raceList:
        type: array
        items:
          "$ref": "#/definitions/ConceptIdName"
      ethnicityList:
        type: array
        items:
          "$ref": "#/definitions/ConceptIdName"
  ConceptIdName:
    type: object
    required:
    - conceptId
    - conceptName
    properties:
      conceptId:
        type: integer
        format: int64
      conceptName:
        type: string
