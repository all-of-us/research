// Gradle targets for tools, used by Ruby commands and docker-compose.

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

def db_host = System.getenv("DB_HOST")
def db_port = System.getenv("DB_PORT")
def workbench_db_user = System.getenv("WORKBENCH_DB_USER")
def workbench_db_password = System.getenv("WORKBENCH_DB_PASSWORD")

def dbProperties = [
  'spring.datasource.driver-class-name': 'com.mysql.jdbc.Driver',
  // Our database isn't configured to allow outside connections (which is good), so our connections
  // are either local or through the proxy, which encrypts all traffic.
  'spring.datasource.url': "jdbc:mysql://${db_host}:${db_port}/workbench?useSSL=false",
  'spring.datasource.username': '${workbench_db_user}',
  'spring.datasource.password': '${workbench_db_password}'
]

// Run this via ./project.rb update-cloud-config or (locally) docker-compose run update-config,
// which is automatically run during api/project.rb dev-up.
task loadConfig(type: JavaExec, dependsOn: ':generateApi') {
  classpath sourceSets.main.runtimeClasspath
  main = "org.pmiops.workbench.tools.ConfigLoader"
  systemProperties = dbProperties
  args config_key, config_file
}

// See api/project.rb set-authority.
// This evals the value of the -PappArgs flag given to Gradle and passes the
// result to the Java main method.
task setAuthority(type: JavaExec, dependsOn: ':generateApi') {
  classpath sourceSets.main.runtimeClasspath
  main = "org.pmiops.workbench.tools.SetAuthority"
  systemProperties = dbProperties
  // appArgs must always be defined for :setAuthority. Guard it with a
  // conditional for the sake of other targets' evaluation.
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

task manageClusters(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  main = "org.pmiops.workbench.tools.ManageClusters"
  systemProperties = dbProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

buildscript {    // Configuration for building
  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE'
  }
}

configurations {
  compile.extendsFrom project(':').configurations.compile
  runtime.extendsFrom project(':').configurations.runtime
}

sourceSets {
  main {
    java {
      srcDirs = ['src/main/java', '../src/main/java', '../src/generated/java']
      compileClasspath += project(':').sourceSets.main.output
      runtimeClasspath += project(':').sourceSets.main.output
    }
  }
}

dependencies {
  compile project(':')
  compile project(path: ':', configuration: 'generatedCompile')
}

repositories {   // repositories for Jar's you access in your code
  jcenter()
}


dependencies {
  compile 'org.springframework.boot:spring-boot-starter-data-jpa'
  compile 'commons-io:commons-io:+'
  compile 'joda-time:joda-time:+'
  compile 'com.github.fge:json-patch:+'
  compile 'io.swagger:swagger-annotations:1.5.9'
  compile 'com.google.cloud.sql:mysql-socket-factory:+'
  compile 'org.apache.commons:commons-lang3:3.0'
  compile 'com.google.code.gson:gson:+'
  compile 'org.hibernate:hibernate-validator:+'
}


gradle.taskGraph.afterTask { Task task, TaskState state ->
  if (state.failure && task.path == ":tools:compileJava") {
    logger.warn(
      "\n\n*** Tools compilation failed. ***\nIf the failure is due to a missing class, ensure" +
      " the class is included in the sourceSets section of tools/build.gradle.\n"
    )
  }
}
