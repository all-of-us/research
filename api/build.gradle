import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator
import org.gradle.api.tasks.JavaExec
import org.pmiops.workbench.tooling.GenerateAPIListingTask
import org.pmiops.workbench.tooling.IncrementalHotSwapTask

// This path is the Java sources root for finding any overridden Swagger-codegen
// templates we may be using.
def swaggerTemplateDir = 'src/main/resources/swaggercodegen'
def mergedApiSourceFile = 'src/main/resources/merged.yaml'
def clientApiSourceFile = 'src/main/resources/client_api.yaml'
def cbReviewApiSourceFile = 'src/main/resources/cb_review_api.yaml'
def cbSearchApiSourceFile = 'src/main/resources/cb_search_api.yaml'
def swaggerTargetFolder = 'src/generated/java'

task generateMergedSwagger(type: Exec) {
  commandLine "./build.rb", "merge-yaml"
}

task generateApi {
  inputs.file("$projectDir/$mergedApiSourceFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$mergedApiSourceFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('spring')
    config.setAdditionalProperties([
            'apiPackage'     : 'org.pmiops.workbench.api',
            'modelPackage'   : 'org.pmiops.workbench.model',
            'sourceFolder'   : swaggerTargetFolder,
            'useTags'        : 'true',
            // Generates delegate interfaces; used to make method annotations work without
            // having to copy them to our implementations.
            'delegatePattern': 'true'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

def fireCloudApiFile = 'src/main/resources/fireCloud.yaml'

task generateFireCloudClient {
  inputs.file("$projectDir/$fireCloudApiFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$fireCloudApiFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('java')
    config.setModelNamePrefix("Firecloud")
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.firecloud',
            'modelPackage'     : 'org.pmiops.workbench.firecloud.model',
            'apiPackage'       : 'org.pmiops.workbench.firecloud.api',
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

def notebooksApiFile = 'src/main/resources/notebooks.yaml'

task generateNotebooksClient {
  inputs.file("$projectDir/$notebooksApiFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$notebooksApiFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('java')
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.notebooks',
            'modelPackage'     : 'org.pmiops.workbench.notebooks.model',
            'apiPackage'       : 'org.pmiops.workbench.notebooks.api',
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

def jiraApiFile = 'src/main/resources/jira.yaml'

task generateJiraClient {
  inputs.file("$projectDir/$jiraApiFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$jiraApiFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('java')
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.jira',
            'modelPackage'     : 'org.pmiops.workbench.jira.model',
            'apiPackage'       : 'org.pmiops.workbench.jira.api',
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

def mandrillApiFile = 'src/main/resources/mandrill_api.yaml'

task generateMandrillClient {
  inputs.file("$projectDir/$mandrillApiFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$mandrillApiFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('java')
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.mandrill',
            'modelPackage'     : 'org.pmiops.workbench.mandrill.model',
            'apiPackage'       : 'org.pmiops.workbench.mandrill.api',
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

def moodleApiFile = 'src/main/resources/moodle.yaml'

task generateMoodleClient {
  inputs.file("$projectDir/$moodleApiFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$moodleApiFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('java')
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.moodle',
            'modelPackage'     : 'org.pmiops.workbench.moodle.model',
            'apiPackage'       : 'org.pmiops.workbench.moodle.api',
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

def rdrApiFile = 'src/main/resources/rdr.yaml'

task generateRdrClient {
  inputs.file("$projectDir/$rdrApiFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$rdrApiFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$projectDir/$swaggerTemplateDir")
    config.setLang('java')
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.rdr',
            'modelPackage'     : 'org.pmiops.workbench.rdr.model',
            'apiPackage'       : 'org.pmiops.workbench.rdr.api',
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

task generate_appengine_web_xml(type: Exec) {
  executable "ruby"
  args "libproject/generate_appengine_web_xml.rb"
}

task generate_appengine_cron_yaml(type: Exec) {
  executable "ruby"
  args = ["libproject/generate_appengine_cron_yaml.rb", System.getenv("WORKBENCH_ENV")]
}

configurations {
  generatedCompile
  all {
    exclude group: 'com.google.guava', module:'guava-jdk5'
  }
}

buildscript {    // Configuration for building
  ext {
    GAE_VERSION = '1.9.64'
    SPRING_BOOT_VERSION = '1.5.22.RELEASE'
    JACKSON_VERSION = '2.9.10'
    JACKSON_DATABIND_VERSION = '2.9.10.1'
    ELASTICSEARCH_VERSION = '6.8.3'
    OKHTTP_VERSION = '2.7.5'
    GSON_VERSION = '2.8.5'
    JODA_VERSION = '2.10'
    OPENCENSUS_VERSION = '0.23.0'
    HIBERNATE_VERSION = '5.2.10.Final'
    SPRINGFOX_VERSION = '2.6.1'
    KOTLIN_VERSION = '1.3.50'
    MOCKITO_KOTLIN_VERSION = '2.2.0'
  }

  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${SPRING_BOOT_VERSION}"
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'
    classpath 'gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.12.0'
    // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two
    // implicit dependencies: (1) the set of "generatedCompile" Gradle dependencies need to be updated
    // to match the modules imported by the Swagger codegen templates, and (2) some template files
    // are overridden with forked templates within this repo; they will likely need to be re-copied from
    // the newer release version and have AoU-specific modifications re-applied.
    classpath 'io.swagger:swagger-codegen:2.2.3'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$KOTLIN_VERSION"
    classpath "org.jetbrains.kotlin:kotlin-noarg:$KOTLIN_VERSION"
    classpath 'org.owasp:dependency-check-gradle:5.1.0'
    classpath 'com.diffplug.spotless:spotless-plugin-gradle:3.23.0'
    classpath 'net.ltgt.gradle:gradle-apt-plugin:0.21'
  }
}

ext['hibernate.version'] = HIBERNATE_VERSION

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine-standard'  // App Engine tasks
apply plugin: 'org.springframework.boot'
apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'net.ltgt.apt-idea'

spotless {
  java {
    googleJavaFormat()
    target fileTree('.') {
      include '**/*.java'

      exclude 'src/generated/**'
      exclude 'build/**'
    }
  }

  kotlin {
    ktlint()
  }
}

configurations {
  integrationCompile.extendsFrom testCompile
  integrationRuntime.extendsFrom testRuntime
  bigquerytestCompile.extendsFrom testCompile
  bigquerytestRuntime.extendsFrom testRuntime

  toolsImplementation.extendsFrom implementation
  toolsRuntimeOnly.extendsFrom runtimeOnly
}

// Required for the swagger plugin's `validateSwagger` task
// See https://github.com/int128/gradle-swagger-generator-plugin
sourceSets {
  generated {
    compileClasspath = configurations.generatedCompile
  }
  main {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  test {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  integration {
    resources {
      srcDir "config/"
    }
    java {
      compileClasspath += main.output + test.output + generated.output
      runtimeClasspath += main.output + test.output + generated.output
      srcDir file('src/integration/java')
    }
  }
  tools {
    compileClasspath += main.output + generated.output
    runtimeClasspath += main.output + generated.output

    resources {
      srcDir "tools/src/main/resources"
    }
    java {
      srcDirs = ['tools/src/main/java']
    }
  }
  bigquerytest {
    resources {
      srcDir "bigquerytest/resources"
      srcDir "config/"
      include "bigquery/**"
      include "cdm/**"
    }
    java {
      compileClasspath += main.output + test.output + generated.output
      runtimeClasspath += main.output + test.output + generated.output
      srcDir file('src/bigquerytest/java')
    }
  }
}

validateSwagger.dependsOn generateMergedSwagger
generateApi.dependsOn validateSwagger
ideaModule.dependsOn generateApi
compileGeneratedJava.dependsOn generateApi
ideaModule.dependsOn generateFireCloudClient
compileGeneratedJava.dependsOn generateFireCloudClient
ideaModule.dependsOn generateNotebooksClient
compileGeneratedJava.dependsOn generateNotebooksClient
ideaModule.dependsOn generateJiraClient
compileGeneratedJava.dependsOn generateJiraClient
ideaModule.dependsOn generateMandrillClient
compileGeneratedJava.dependsOn generateMandrillClient
ideaModule.dependsOn generateMoodleClient
compileGeneratedJava.dependsOn generateMoodleClient
ideaModule.dependsOn generateRdrClient
compileGeneratedJava.dependsOn generateRdrClient
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava

war.dependsOn compileGeneratedJava
war.dependsOn generate_appengine_web_xml
war.dependsOn generate_appengine_cron_yaml

clean.doFirst {
  delete("${projectDir}/$swaggerTargetFolder")
}

repositories {   // repositories for Jar's you access in your code
  jcenter()
}

ext {
  mapstructVersion = '1.3.1.Final'
}

dependencies {

  // To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile

  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.1.0'

  compile project(":common-api")
  compile 'com.google.api-client:google-api-client-appengine:1.23.0'
  compile 'com.google.http-client:google-http-client-apache:1.29.2'
  compile 'org.apache.commons:commons-collections4:4.4'
  compile 'com.google.apis:google-api-services-cloudresourcemanager:v1-rev549-1.25.0'
  compile 'mysql:mysql-connector-java:8.0.16'
  compile 'com.google.cloud.sql:mysql-socket-factory:1.0.10'

  compile "com.google.appengine:appengine:${GAE_VERSION}"
  compile "com.google.appengine:appengine-api-1.0-sdk:${GAE_VERSION}"

  compile("org.springframework.boot:spring-boot-starter-web:${SPRING_BOOT_VERSION}") {
    exclude module: 'spring-boot-starter-tomcat'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
  }
  compile("org.springframework.boot:spring-boot-starter-data-jpa:${SPRING_BOOT_VERSION}") {
    exclude module: 'spring-boot-starter-tomcat'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
  }
  compile("org.springframework.boot:spring-boot-starter-actuator:${SPRING_BOOT_VERSION}") {
    exclude module: 'spring-boot-starter-tomcat'
    exclude group: 'org.slf4j', module: 'jul-to-slf4j'
  }

  compile 'ch.qos.logback:logback-classic:1.2.3'

  compile 'org.springframework.security:spring-security-web:4.2.13.RELEASE'
  compile "org.hibernate:hibernate-core:${HIBERNATE_VERSION}"

  // Force the Kotlin version, otherwise the Kotlin plugin conflicts with Jackson's
  // Kotlin dep, resulting in massive logspam.
  compile "org.jetbrains.kotlin:kotlin-reflect:${KOTLIN_VERSION}"

  compile "com.fasterxml.jackson.core:jackson-annotations:${JACKSON_VERSION}"
  compile "com.fasterxml.jackson.core:jackson-core:${JACKSON_VERSION}"
  compile "com.fasterxml.jackson.core:jackson-databind:${JACKSON_DATABIND_VERSION}"
  compile "com.fasterxml.jackson.module:jackson-module-kotlin:${JACKSON_VERSION}"
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${JACKSON_VERSION}"

  compile 'com.google.apis:google-api-services-admin-directory:directory_v1-rev20190806-1.30.3'
  compile 'com.google.apis:google-api-services-oauth2:v2-rev139-1.23.0'
  compile 'com.google.cloud:google-cloud-bigquery:1.51.0'
  compile 'com.google.cloud:google-cloud-storage:1.51.0'
  compile 'com.google.cloud:google-cloud-tasks:1.27.0'
  compile 'com.google.oauth-client:google-oauth-client-jetty:1.30.3'
  compile 'com.google.auth:google-auth-library-oauth2-http:0.19.0'
  compile 'com.google.auth:google-auth-library-appengine:0.19.0'
  compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20180219.1'

  compile "com.squareup.okhttp:okhttp:${OKHTTP_VERSION}"
  compile "com.squareup.okhttp:logging-interceptor:${OKHTTP_VERSION}"

  compile "com.google.code.gson:gson:${GSON_VERSION}"
  compile "joda-time:joda-time:${JODA_VERSION}"

  compile "io.opencensus:opencensus-api:${OPENCENSUS_VERSION}"
  compile "io.opencensus:opencensus-exporter-stats-stackdriver:${OPENCENSUS_VERSION}"
  compile "io.opencensus:opencensus-exporter-trace-stackdriver:${OPENCENSUS_VERSION}"
  compile "io.opencensus:opencensus-impl:${OPENCENSUS_VERSION}"

  compile 'javax.inject:javax.inject:1'
  compile 'io.swagger:swagger-annotations:1.5.16'
  compile 'org.apache.commons:commons-lang3:3.6'
  compile 'org.apache.commons:commons-text:1.8'
  compile 'com.google.guava:guava:26.0-jre'
  compile 'com.github.rholder:guava-retrying:2.0.0'
  compile 'org.springframework.retry:spring-retry:1.1.5.RELEASE'

  implementation "org.mapstruct:mapstruct:${mapstructVersion}"
  annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
  testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

  // Elasticsearch client
  compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:${ELASTICSEARCH_VERSION}"
  compile "org.elasticsearch:elasticsearch:${ELASTICSEARCH_VERSION}"

  // https://github.com/GoogleCloudPlatform/google-cloud-java/issues/1502
  compile 'org.json:json:20160810'

  compile 'com.github.fge:json-patch:1.9'
  compile 'com.google.cloud:google-cloud-logging:1.90.0'
  toolsCompile 'commons-cli:commons-cli:1.4'
  toolsCompile 'com.opencsv:opencsv:4.6'

  testCompile 'junit:junit:4.13'
  testCompile 'org.mockito:mockito-core:2.18.3'
  testCompile "com.google.appengine:appengine-api-stubs:${GAE_VERSION}"
  testCompile "com.google.appengine:appengine-tools-sdk:${GAE_VERSION}"
  testCompile 'com.google.truth:truth:0.42'
  testCompile "org.springframework.boot:spring-boot-starter-test:${SPRING_BOOT_VERSION}"
  testCompile 'com.h2database:h2:1.4.194'
  testCompile 'org.liquibase:liquibase-core:3.5.3'
  testCompile 'org.bitbucket.radistao.test:before-after-spring-test-runner:0.1.0'
  testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${MOCKITO_KOTLIN_VERSION}"

  // Dependencies for Swagger codegen. This should include all dependencies required by Swagger's
  // default okhttp API codegen templates (see https://github.com/swagger-api/swagger-codegen/blob/v2.2.3/samples/client/petstore/spring-stubs/pom.xml)
  // plus any custom templates included in our repo under the swaggerTemplateDir.
  generatedCompile "org.springframework.boot:spring-boot-starter-data-rest:${SPRING_BOOT_VERSION}"
  generatedCompile "io.springfox:springfox-swagger2:${SPRINGFOX_VERSION}"
  generatedCompile "io.springfox:springfox-swagger-ui:${SPRINGFOX_VERSION}"
  generatedCompile "com.squareup.okhttp:okhttp:${OKHTTP_VERSION}"
  generatedCompile "com.squareup.okhttp:logging-interceptor:${OKHTTP_VERSION}"
  generatedCompile "com.google.code.gson:gson:${GSON_VERSION}"
  generatedCompile "joda-time:joda-time:${JODA_VERSION}"
  generatedCompile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${JACKSON_VERSION}"
  // OpenCensus is an AoU-specific addition to the default Swagger API dependencies. See the
  // template file api.mustache for more details.
  generatedCompile "io.opencensus:opencensus-api:${OPENCENSUS_VERSION}"
  generatedCompile "io.opencensus:opencensus-exporter-trace-stackdriver:${OPENCENSUS_VERSION}"
  generatedCompile "io.opencensus:opencensus-impl:${OPENCENSUS_VERSION}"

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"
}

swaggerSources {
  workbench {
    inputFile = file("$projectDir/$mergedApiSourceFile")
  }
  client {
    inputFile = file("$projectDir/$clientApiSourceFile")
  }
  cbReview {
    inputFile = file("$projectDir/$cbReviewApiSourceFile")
  }
  cbSearch {
    inputFile = file("$projectDir/$cbSearchApiSourceFile")
  }
  firecloud {
    inputFile = file("$projectDir/$fireCloudApiFile")
  }
  notebooks {
    inputFile = file("$projectDir/$notebooksApiFile")
  }
  jira {
    inputFile = file("$projectDir/$jiraApiFile")
  }
}

compileJava {
  options.compilerArgs << '-Xlint:unchecked'
}

task integration(type: Test) {
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  testClassesDirs = sourceSets.integration.output.classesDirs
  classpath = sourceSets.integration.runtimeClasspath
  // Option to control size of stack trace:
  // jvmArgs '-XX:MaxJavaStackTraceDepth=10'
}

task bigquerytest(type: Test) {
  group = LifecycleBasePlugin.VERIFICATION_GROUP
  testClassesDirs = sourceSets.bigquerytest.output.classesDirs
  classpath = sourceSets.bigquerytest.runtimeClasspath
}

tasks.withType(Test) {
  testLogging {
    // Causes the correct line to be reported on an exception.
    exceptionFormat "full"
  }
  def verboseTestLogging=project.properties['verboseTestLogging'] ?: 'no'
  if (verboseTestLogging == 'yes') {
    testLogging {
      events "passed", "skipped", "failed", "standardOut", "standardError"
    }
  } else {
    testLogging {
      events "passed", "skipped", "failed"
    }
  }
}

integration {
  // These tests should always run when requested since they consume and produce side-effects.
  outputs.upToDateWhen { false }
}

appengine {  // App Engine tasks configuration
  run {      // local (dev_appserver) configuration (standard environments only)
    port = 8081                 // default
    host = "0.0.0.0"
    // Allows you to attach a debugger on port 8001 when running locally.
    jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8001']
    // Give dev_appserver 2 minutes to start up when running appengineStart; by
    // default it will fail after 1 minute. (This is particularly a problem in CircleCI.)
    startSuccessTimeout = 120

    environment = [GOOGLE_APPLICATION_CREDENTIALS: file("$rootDir/sa-key.json").getAbsolutePath()]
  }

  // dmohs: You may see this message [1], but don't implement the suggested fix because it breaks
  // Spring.
  // [1] https://github.com/GoogleCloudPlatform/app-gradle-plugin/issues/100
  // stage {
  //    enableJarClasses = true
  // }

  deploy {   // deploy configuration
    stopPreviousVersion = true  // default - stop the current version
    promote = true              // default - & make this the current version
    // TODO(danrodney)
    //account = System.properties("account")
    //project = System.properties("project")
  }
}

task startCronEmulator(dependsOn: ':appengine-cron-emulator:jar') {
  doFirst {
    ext.process = new ProcessBuilder()
            .redirectOutput(ProcessBuilder.Redirect.to(new File("cron-emulator.log")))
            .redirectError(ProcessBuilder.Redirect.to(new File("cron-emulator-err.log")))
            .directory(projectDir)
            .command("java", "-jar",
                    project(":appengine-cron-emulator").jar.archivePath.getPath(),
                    "$projectDir/src/main/webapp/WEB-INF/cron.yaml"
            ).start()

    println "Started Cron Emulator, check cron-emulator-err.log for startup errors (RW-3755)"
  }
}

startCronEmulator.dependsOn generate_appengine_cron_yaml
appengineRun.dependsOn startCronEmulator
appengineStart.dependsOn startCronEmulator

group = 'org.pmiops.allofus.workbench'
version = '0.1.0'          // Version in generated output

sourceCompatibility = 1.8
targetCompatibility = 1.8

task incrementalHotSwap(type: IncrementalHotSwapTask) {
    inputDir = sourceSets.main.java.outputDir
}

incrementalHotSwap.dependsOn compileJava

task listProjectAPIs(type: GenerateAPIListingTask, dependsOn: generateMergedSwagger)


//
// COMMAND-LINE TOOLS
//
// All tasks below represent scripts meant to be run via Gradle command-line invocations.
//
// This gives us a natural place to put one-off scripts, deployment tasks, or any other
// code that should be run outside the context of a HTTP request or a cron job.


// Define database-related Spring Boot properties required for running
// command-line tools. These are set up elsewhere for the main App Engine
// runtime.
//
// These system variables will have been set by the project.rb script before
// this task is executed.
//
// N.B. these properties should be kept roughly in sync with the App Engine configuration
// XML file under src/main/webapp/WEB-INF/appengine-web.xml
def db_host = System.getenv("DB_HOST")
def db_port = System.getenv("DB_PORT")

def commandLineSpringProperties = [
  'spring.datasource.driver-class-name': 'com.mysql.jdbc.Driver',
  // Our database isn't configured to allow outside connections (which is good),
  // so our connections are either local or through the encrypted proxy.
  'spring.datasource.url': "jdbc:mysql://${db_host}:${db_port}/workbench?useSSL=false",
  'spring.datasource.username': System.getenv("WORKBENCH_DB_USER"),
  'spring.datasource.password': System.getenv("WORKBENCH_DB_PASSWORD")
]

// See project.rb command: load-es-index
task elasticSearchIndexer(type: JavaExec) {
  classpath = sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.elastic.ElasticSearchIndexer"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

// See project.rb command: fetch-firecloud-user-profiles
task fetchFireCloudUserProfile(type: JavaExec) {
  classpath = sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.FetchFireCloudUserProfile"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

// See project.rb command: fetch-workspace-details
task fetchWorkspaceDetails(type: JavaExec) {
  classpath = sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.FetchWorkspaceDetails"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

// See project.rb command: export-workspace-data
task exportWorkspaceData(type: JavaExec) {
  classpath = sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.ExportWorkspaceData"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

// This task is called from a few different places:
// - devstart.rb > load_config (used by "deploy" and "update_cloud_config" commands)
// - directly via gradlew (used by "run-local-migrations" command)
// - docker-compose.yaml#updateConfig (used by "dev-up" command)
task loadConfig(type: JavaExec) {
  classpath sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.ConfigLoader"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("config_key") && project.hasProperty("config_file")) {
    args config_key, config_file
  }
}

// Called by devs from the command-line:
// - devstart.rb > list_clusters
task manageClusters(type: JavaExec) {
  classpath sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.ManageClusters"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

// Called by devs from the command-line:
// - devstart.rb > set_authority
task setAuthority(type: JavaExec) {
  classpath sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.SetAuthority"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

// This task is called from:
// - docker-compose.yaml#update-cdr-versions
// - devstart.rb > update_cdr_versions_for_project (called by run-local-migrations)
task updateCdrVersions(type: JavaExec) {
  classpath sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.UpdateCdrVersions"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

task loadDataDictionary(type: JavaExec) {
  classpath sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.LoadDataDictionary"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

// See project.rb command: backfill-billing-project-owners
task backfillBillingProjectOwners(type: JavaExec) {
  classpath = sourceSets.tools.runtimeClasspath
  main = "org.pmiops.workbench.tools.BackfillBillingProjectOwners"
  systemProperties = commandLineSpringProperties
  if (project.hasProperty("appArgs")) {
    args Eval.me(appArgs)
  }
}

compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}
