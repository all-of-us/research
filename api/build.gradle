import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

def swaggerTemplateDir = 'src/main/resources'
def swaggerSourceFile = 'src/main/resources/workbench.yaml'
def swaggerTargetFolder = 'src/generated/java'

task generateApi {
  inputs.file("$projectDir/$swaggerSourceFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$swaggerSourceFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$swaggerTemplateDir")
    config.setLang('spring')
    config.setAdditionalProperties([
            'interfaceOnly' : 'true',
            'apiPackage'    : 'org.pmiops.workbench.api',
            'modelPackage'  : 'org.pmiops.workbench.model',
            'sourceFolder'  : swaggerTargetFolder,
            'useTags'       : 'true'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

def fireCloudApiFile = 'src/main/resources/fireCloud.yaml'

task generateFireCloudClient {
  inputs.file("$projectDir/$fireCloudApiFile")
  outputs.dir("$projectDir/$swaggerTargetFolder")
  doLast {
    def config = new CodegenConfigurator()
    config.setInputSpec("file:///$projectDir/$fireCloudApiFile")
    config.setOutputDir("$projectDir")
    config.setTemplateDir("$swaggerTemplateDir")
    config.setLang('java')
    config.setAdditionalProperties([
            'invokerPackage'   : 'org.pmiops.workbench.firecloud',
            'modelPackage'     : 'org.pmiops.workbench.firecloud.model',
            'apiPackage'       : 'org.pmiops.workbench.firecloud.api',
            'sourceFolder'     : swaggerTargetFolder,
            'library'          : 'okhttp-gson',
            'serializableModel': 'true',
            'dateLibrary'      : 'java8'
    ])
    new DefaultGenerator().opts(config.toClientOptInput()).generate()
  }
}

configurations {
  generatedCompile
}

buildscript {    // Configuration for building
  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
  }
  dependencies {
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE'
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:+'
    classpath 'io.swagger:swagger-codegen:+'
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine-standard'  // App Engine tasks
apply plugin: 'org.springframework.boot'

sourceSets {
  generated {
    compileClasspath = configurations.generatedCompile
  }
  main {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
  test {
    compileClasspath += generated.output
    runtimeClasspath += generated.output
  }
}

ideaModule.dependsOn generateApi
compileGeneratedJava.dependsOn generateApi
ideaModule.dependsOn generateFireCloudClient
compileGeneratedJava.dependsOn generateFireCloudClient
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava

clean.doFirst {
  delete("${projectDir}/$swaggerTargetFolder")
}

repositories {   // repositories for Jar's you access in your code
  jcenter()
}

dependencies {
  providedCompile group: 'javax.servlet', name: 'servlet-api', version:'2.5'
  compile 'com.google.appengine:appengine:+'
  compile('org.springframework.boot:spring-boot-starter-web:+') {
    exclude module: 'spring-boot-starter-tomcat'
  }
  compile 'org.springframework.security:spring-security-web:+'
  compile 'io.swagger:swagger-codegen:+'
  compile 'com.fasterxml.jackson.core:jackson-annotations:+'
  compile 'com.fasterxml.jackson.core:jackson-core:+'
  compile 'com.fasterxml.jackson.core:jackson-databind:+'
  compile 'com.google.apis:google-api-services-oauth2:+'
  compile 'com.squareup.okhttp:okhttp:+'
  compile 'com.squareup.okhttp:logging-interceptor:+'
  compile 'com.google.code.gson:gson:+'
  compile 'javax.inject:javax.inject:1'

  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-core:1.+'
  testCompile 'com.google.truth:truth:+'

  // For Swagger generation
  generatedCompile 'org.springframework.boot:spring-boot-starter-data-rest'
  generatedCompile 'io.springfox:springfox-swagger2:2.5.0'
  generatedCompile 'io.springfox:springfox-swagger-ui:2.5.0'
  generatedCompile 'com.squareup.okhttp:okhttp:+'
  generatedCompile 'com.squareup.okhttp:logging-interceptor:+'
  generatedCompile 'com.google.code.gson:gson:+'

}

test {
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

appengine {  // App Engine tasks configuration
  run {      // local (dev_appserver) configuration (standard environments only)
    port = 8081                 // default
    host = "0.0.0.0"
  }

  deploy {   // deploy configuration
    stopPreviousVersion = true  // default - stop the current version
    promote = true              // default - & make this the current version
    // TODO(danrodney)
    //account = System.properties("account")
    //project = System.properties("project")
  }
}

group = 'org.pmiops.allofus.workbench'
version = '0.1.0'          // Version in generated output

sourceCompatibility = 1.8
targetCompatibility = 1.8
