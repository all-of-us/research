# If validation fails, gradle:generateApi fails claiming this file does not exist.
# For separate validation (with some false positives), do:
#     sudo npm install -g swagger-cli
#     swagger validate .../workbench.yaml
swagger: '2.0'
info:
  version: "0.1.0"
  title: "AllOfUs Workbench API"
  description: "The API for the AllOfUs workbench."
  termsOfService: "http://www.pmi-ops.org/terms_of_service.html"
  contact:
    name: "developer_help@pmi-ops.org"
  license:
    name: "MIT"
host: "api.pmi-ops.org"
securityDefinitions:
  # Establish the fact that *some endpoints* are OAuth protected
  # by defining an `aou_oauth` security mode, which we'll assing
  # to any protected endpoints below.
  aou_oauth:
    type: oauth2
    flow: accessCode
schemes:
  - "https"
produces:
  - "application/json"
# Establish the fact that all endpoints are protected: this annotation
# ensures that client libraries know to send bearer tokens when calling
security:
  - aou_oauth: []

# Throughout, we use integer/int64 in preference to string/date-time because Swagger's
# date formatting is inconsistent between server and client. Time values are stored as
# milliseconds since the UNIX epoch.

##########################################################################################
## PATHS
##########################################################################################
paths:

  /api/v1/config:
    get:
      tags:
        - config
      description: Returns some server configuration data.
      operationId: getConfig
      security: []
      responses:
        "200":
          schema:
            $ref: "#/definitions/ConfigResponse"


   # User methods ########################################################################

  /api/v1/me:
    get:
      tags:
        - profile
      description: Returns the user's profile information
      operationId: getMe
      responses:
        "200":
          description: The user's profile.
          schema:
            $ref: "#/definitions/Profile"

  /api/v1/sendBugReport:
    post:
      tags:
        - bugReport
      description: Sends an email to developers about a user reported bug
      operationId: sendBugReport
      # TODO(dmohs): security: []
      parameters:
        - in: body
          name: bugReport
          description: user reported bug
          required: true
          schema:
            $ref: "#/definitions/BugReport"
      responses:
        "200":
          description: Success message
          schema:
            $ref: "#/definitions/BugReport"

  # TODO(dmohs): If the username is not present in the query string, this responds with 500 Server
  # Error. It should respond with 400 Bad Request.
  /api/v1/is-username-taken:
    get:
      tags:
        - profile
      description: Checks to see if the given username is not available.
      operationId: isUsernameTaken
      security: []
      parameters:
        - in: query
          name: username
          type: string
          required: true
      responses:
        "200":
          description: The answer.
          schema:
            $ref: "#/definitions/UsernameTakenResponse"

  /api/v1/google-account:
    post:
      tags:
        - profile
      description: Creates an account in the researchallofus.org domain.
      operationId: createAccount
      security: []
      parameters:
        - in: body
          name: createAccountRequest
          schema:
            $ref: "#/definitions/CreateAccountRequest"
      responses:
        "201":
          description: Account created successfully.
          schema:
            $ref: "#/definitions/Profile"
        "400":
          description: Error occurred while creating account.
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
        - profile
      description: Deletes your account in the researchallofus.org domain.
      operationId: deleteAccount
      responses:
        "204":
          description: Account deleted successfully.

  /api/v1/register:
    post:
      tags:
        - profile
      description: Registers a profile for the user in AllOfUs and Firecloud; called after the user has consented to the terms of use
      operationId: register
      parameters:
        - in: body
          name: registrationRequest
          description: registration request
          schema:
            $ref: "#/definitions/RegistrationRequest"
      responses:
        "200":
          description: The user's profile.
          schema:
            $ref: "#/definitions/Profile"

  # Notebook clusters ####################################################################

  /api/v1/clusters:
    get:
      summary: List all clusters
      description: List all clusters, optionally filtering on a set of labels
      operationId: listClusters
      tags:
        - cluster
      parameters:
        - in: query
          name: _labels
          description: |
            Optional label key-value pairs to filter results by. Example: key1=val1,key2=val2.

            Note: this string format is a workaround because Swagger doesn't support free-form
            query string parameters. The recommended way to use this endpoint is to specify the
            labels as top-level query string parameters. For instance: GET /api/clusters?key1=val1&key2=val2.
          required: false
          type: string
      responses:
        "200":
          description: A list of workspace definitions.
          schema:
            $ref: "#/definitions/ClusterListResponse"
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorReport'
        "500":
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'
  /api/v1/workspaces/{workspaceNamespace}/{workspaceId}/cluster/:
    get:
      summary: Get details of a dataproc cluster
      description: Returns information about an existing dataproc cluster managed by Leo. Poll this to find out when your cluster has finished starting up.
      operationId: getCluster
      tags:
        - cluster
      parameters:
        - in: path
          name: workspaceNamespace
          description: workspaceNamespace
          required: true
          type: string
        - in: path
          name: workspaceId
          description: workspaceId
          required: true
          type: string
      responses:
        "200":
          description: Cluster found, here are the details
          schema:
            $ref: '#/definitions/Cluster'
        "404":
          description: Cluster not found
          schema:
            $ref: '#/definitions/ErrorReport'
        "500":
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'
    put:
      summary: Creates a new dataproc cluster in the given project with the given name
      description: creates dataproc cluster with jupyters
      operationId: createCluster
      tags:
        - cluster
      parameters:
        - in: path
          name: workspaceNamespace
          description: workspaceNamespace
          required: true
          type: string
        - in: path
          name: workspaceId
          description: workspaceId
          required: true
          type: string
      responses:
        "200":
          description: Cluster creation successful
          schema:
            $ref: '#/definitions/Cluster'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorReport'
        "500":
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'
    delete:
      summary: Deletes an existing dataproc cluster in the given project
      description: deletes a dataproc cluster
      operationId: deleteCluster
      tags:
        - cluster
      parameters:
        - in: path
          name: workspaceNamespace
          description: workspaceNamespace
          required: true
          type: string
        - in: path
          name: workspaceId
          description: workspaceId
          required: true
          type: string
      responses:
        "202":
          description: Cluster deletion request accepted
          schema:
            $ref: '#/definitions/EmptyResponse'
        "404":
          description: Cluster not found
          schema:
            $ref: '#/definitions/ErrorReport'
        "500":
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'


  # Billing projects #####################################################################

  /api/v1/billingProjects:
    get:
      tags:
        - Profile
      operationId: getBillingProjects
      summary: List billing projects for a user
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BillingProjectMembership'
        404:
          description: User Not Found
        500:
          description: Internal Server Error

  # Workspaces ###########################################################################

  /api/v1/workspaces:
    get:
      tags:
        - workspaces
      description: Returns all workspaces that a user has access to
      operationId: getWorkspaces
      responses:
        "200":
          description: A list of workspace definitions.
          schema:
            $ref: "#/definitions/WorkspaceResponseListResponse"
    post:
      tags:
        - workspaces
      description: Creates a workspace
      operationId: createWorkspace
      parameters:
        - in: body
          name: workspace
          description: workspace definition
          schema:
            $ref: "#/definitions/Workspace"
      responses:
        "200":
          description: The workspace that was created.
          schema:
            $ref: "#/definitions/Workspace"
  /api/v1/workspaces/{workspaceNamespace}/{workspaceId}:
    get:
      tags:
        - workspaces
      description: Returns the workspace definition with the specified ID and namespace
      operationId: getWorkspace
      parameters:
        - in: path
          name: workspaceNamespace
          type: string
          required: true
          description: namespace of the workspace containing the cohort definition
        - in: path
          name: workspaceId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition
      responses:
        "200":
          description: A workspace response containing workspace and access level
          schema:
            $ref: "#/definitions/WorkspaceResponse"
    patch:
      tags:
        - workspaces
      description: >
        Modifies the workspace definition with the specified ID and namespace;
        fields that are omitted will not be modified
      operationId: updateWorkspace
      parameters:
        - in: path
          name: workspaceNamespace
          type: string
          required: true
          description: namespace of the workspace containing the cohort definition
        - in: path
          name: workspaceId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition
        - in: body
          name: workspace
          description: workspace definition
          schema:
            $ref: "#/definitions/Workspace"
      responses:
        "200":
          description: The updated workspace definition
          schema:
            $ref: "#/definitions/Workspace"
    delete:
      tags:
        - workspaces
      description: Deletes the workspace definition with the specified ID and namespace
      operationId: deleteWorkspace
      parameters:
        - in: path
          name: workspaceNamespace
          type: string
          required: true
          description: namespace of the workspace containing the cohort definition
        - in: path
          name: workspaceId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition

  /api/v1/workspaces/review:
    get:
      tags:
        - workspaces
      description: >
          Returns workspaces that need research purpose review. Requires
          REVIEW_RESEARCH_PURPOSE authority.
      operationId: getWorkspacesForReview
      responses:
        "200":
          schema:
            $ref: "#/definitions/WorkspaceListResponse"
  /api/v1/workspaces/{workspaceNamespace}/{workspaceId}/review:
    post:
      tags:
        - workspaces
      description: Sets a research purpose review result.
      operationId: reviewWorkspace
      parameters:
        - in: path
          name: workspaceNamespace
          type: string
          required: true
        - in: path
          name: workspaceId
          type: string
          required: true
        - in: body
          name: review
          description: result of the research purpose review
          schema:
            $ref: "#/definitions/ResearchPurposeReviewRequest"
      responses:
        "200":
          schema:
            $ref: "#/definitions/EmptyResponse"

  /api/v1/workspaces/{workspaceNamespace}/{workspaceId}/share:
    post:
      tags:
        - workspaces
      description: Shares a workspace with users
      operationId: shareWorkspace
      parameters:
          - in: path
            name: workspaceNamespace
            type: string
            required: true
          - in: path
            name: workspaceId
            type: string
            required: true
          - in: body
            name: body
            description: users to share the workspace with
            schema:
              $ref: "#/definitions/ShareWorkspaceRequest"
      responses:
        "200":
          schema:
            $ref: "#/definitions/ShareWorkspaceResponse"

  # Cohorts ##############################################################################

  /api/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts:
    get:
      tags:
        - cohorts
      description: Returns all cohort definitions in a workspace
      operationId: "getCohortsInWorkspace"
      parameters:
       - in: path
         name: workspaceNamespace
         type: string
         required: true
         description: namespace containing the workspace to retrieve cohort definitions from
       - in: path
         name: workspaceId
         type: string
         required: true
         description: ID of the workspace to retrieve cohort definitions from.
      responses:
        "200":
          description: A list of cohort definitions.
          schema:
            $ref: "#/definitions/CohortListResponse"
    post:
      tags:
        - cohorts
      description: Creates a cohort definition in a workspace.
      operationId: "createCohort"
      parameters:
        - in: path
          name: workspaceNamespace
          type: string
          required: true
          description: namespace containing the workspace to create a cohort definition in
        - in: path
          name: workspaceId
          type: string
          required: true
          description: ID of the workspace to create a cohort definition in
        - in: body
          name: cohort
          description: cohort definition
          schema:
            $ref: "#/definitions/Cohort"
      responses:
        "200":
          description: The cohort definition that was created.
          schema:
            $ref: "#/definitions/Cohort"

  /api/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}:
    get:
      tags:
        - cohorts
      description: Returns the cohort definition with the specified ID
      operationId: "getCohort"
      parameters:
        - in: path
          name: workspaceNamespace
          type: string
          required: true
          description: namespace of the workspace containing the cohort definition
        - in: path
          name: workspaceId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition
        - in: path
          name: cohortId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition
      responses:
        "200":
          description: A cohort definition
          schema:
            $ref: "#/definitions/Cohort"
    patch:
      tags:
        - cohorts
      description: >
        Modifies the cohort definition with the specified ID; fields that are omitted
        will not be modified
      operationId: "updateCohort"
      parameters:
        - in: path
          name: workspaceNamespace
          type: string
          required: true
          description: namespace of the workspace containing the cohort definition
        - in: path
          name: workspaceId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition
        - in: path
          name: cohortId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition
        - in: body
          name: cohort
          description: cohort definition
          schema:
            $ref: "#/definitions/Cohort"
      responses:
        "200":
          description: The updated cohort definition
          schema:
            $ref: "#/definitions/Cohort"
    delete:
      tags:
        - cohorts
      description: Deletes the cohort definition with the specified ID
      operationId: "deleteCohort"
      parameters:
        - in: path
          name: workspaceNamespace
          type: string
          required: true
          description: namespace of the workspace containing the cohort definition
        - in: path
          name: workspaceId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition
        - in: path
          name: cohortId
          type: string
          required: true
          description: ID of the workspace containing the cohort definition

  /api/v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort:
    post:
      tags:
        - cohorts
      description: Materializes a cohort for a given CDR version to specified output
      operationId: "materializeCohort"
      parameters:
       - in: path
         name: workspaceNamespace
         type: string
         required: true
         description: namespace of the workspace that the cohort will be materialized in the context of
       - in: path
         name: workspaceId
         type: string
         required: true
         description: ID of the workspace that the cohort will be materialized in the context of
       - in: body
         name: request
         description: cohort materialization request
         schema:
           $ref: "#/definitions/MaterializeCohortRequest"
      responses:
        "200":
          description: The results of materializing the cohort
          schema:
            $ref: "#/definitions/MaterializeCohortResponse"

  # Cohort Builder #######################################################################
  /api/v1/cohortbuilder/criteria/{type}/{parentId}:
    get:
      tags:
        - cohortBuilder
      description: Returns builder criteria tree with the specified criteria type and parentId
      operationId: "getCriteriaByTypeAndParentId"
      parameters:
        - in: path
          name: type
          type: string
          required: true
          description: the specific type of criteria to get
        - in: path
          name: parentId
          type: integer
          format: int64
          required: true
          description: fetch children of parentId
      responses:
        "200":
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  /api/v1/cohortbuilder/search:
    post:
      tags:
        - cohortBuilder
      description: Searches for subjects based on criteria, criteria specific parameters, and modifiers.
      operationId: "countSubjects"
      parameters:
        - in: body
          name: request
          description: object of parameters by which to perform the search
          schema:
            $ref: "#/definitions/SearchRequest"
          required: true
      responses:
        "200":
          description: A count of subjects
          schema:
            type: integer
            format: int64

  /api/v1/cohortbuilder/chartinfo:
    post:
      tags:
        - cohortBuilder
      description: Searches for demographic info about subjects.
      operationId: "getChartInfo"
      parameters:
        - in: body
          name: request
          description: object of parameters by which to perform the search
          schema:
            $ref: "#/definitions/SearchRequest"
          required: true
      responses:
        "200":
          description: A collection of criteria
          schema:
            $ref: "#/definitions/ChartInfoListResponse"

  /api/v1/cohortbuilder/quicksearch/{type}/{value}:
    get:
      tags:
        - cohortBuilder
      description: Quick search for criteria that matches on code and name.
      operationId: "getCriteriaTreeQuickSearch"
      parameters:
        - in: path
          name: type
          type: string
          required: true
          description: the specific type of criteria to get
        - in: path
          name: value
          type: string
          required: true
          description: value that should match code or name
      responses:
        "200":
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  # Cohort Review  #######################################################################
  /api/v1/cohortreview/participants/{cohortId}/{cdrVersionId}:
    get:
      tags:
         - cohortReview
      description:  Returns a collection of participants that for the specified cohortId and cdrVersionId
      operationId: "getParticipantCohortStatuses"
      parameters:
        - in: path
          name: cohortId
          type: integer
          format: int64
          required: true
          description: specifies which cohort
        - in: path
          name: cdrVersionId
          type: integer
          format: int64
          required: true
          description: specifies version of cdr
        - in: query
          name: page
          type: integer
          required: false
          description: specific page (default is 0)
        - in: query
          name: limit
          type: integer
          required: false
          description: page size of results (default is 25)
        - in: query
          name: order
          type: string
          required: false
          description: sort order (default is 'asc')
        - in: query
          name: column
          type: string
          required: false
          description: column to sort (default is 'participantId', can also be 'status')
      responses:
        "200":
          description: A collection of participants
          schema:
            $ref: "#/definitions/ParticipantCohortStatusListResponse"

##########################################################################################
## DEFINITIONS
##########################################################################################
definitions:

  ConfigResponse:
    type: object
    required:
      - gsuiteDomain
    properties:
      # This should be gSuiteDomain, but the Swagger-Codegen-generated server code causes the JSON
      # response to have the keys "gsuiteDomain" and "gSuiteDomain". This weirdness is a workaround.
      gsuiteDomain:
        type: string
        description: G-Suite domain containing user accounts.

  # Mirrors BillingProjectMembership from fireCloud.yaml
  BillingProjectMembership:
    description: ''
    required:
      - projectName
      - role
      - status
    type: object
    properties:
      projectName:
        type: string
        description: the name of the project
      role:
        type: string
        description: the role of the current user in the project
      status:
        type: string
        enum: ["Creating", "Ready", "Error"]
      message:
        type: string
        description: informational message about the project

  DataAccessLevel:
    type: string
    description: levels of access to data in the curated data repository
    enum: &DATA_ACCESS_LEVEL [unregistered, registered, protected]

  EmptyResponse:
    type: object
    properties:
      additionalInfo:
        type: string

  Authority:
    type: string
    description: actions a user can have authority/permission to perform
    enum: [
        REVIEW_RESEARCH_PURPOSE,
        # Swagger trims any common prefix from enum values' corresponding Java
        # fields by default; include a bogus sentinel value to prevent that.
        # https://github.com/swagger-api/swagger-codegen/issues/4261
        # TODO: Remove this sentinel when adding a new enum value with a
        # unique prefix (but leave the above cautionary comment).
        _PREVENT_COMMON_PREFIX_TRIMMING
    ]

  WorkspaceListResponse:
    type: object
    required:
     - items
    properties:
      items:
        type: "array"
        items:
           $ref: "#/definitions/Workspace"

  WorkspaceResponseListResponse:
    type: object
    required:
     - items
    properties:
      items:
        type: "array"
        items:
           $ref: "#/definitions/WorkspaceResponse"

  Workspace:
    type: object
    required:
     - name
    properties:
      id:
        type: string
      etag:
        type: string
        description: >
          Entity tag for optimistic concurrency control. To be set during a
          read-modify-write to ensure that the client has not attempted to
          modify a changed resource.
      name:
        type: string
      namespace:
        type: string
      description:
        type: string
      cdrVersionId:
        type: string
      creator:
        type: string
      dataAccessLevel:
        $ref: "#/definitions/DataAccessLevel"
      researchPurpose:
        $ref: "#/definitions/ResearchPurpose"
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      userRoles:
        type: "array"
        items:
           $ref: "#/definitions/UserRole"

  UserRole:
    type: object
    required:
      - email
      - role
    properties:
      email:
        type: string
      role:
        $ref: "#/definitions/WorkspaceAccessLevel"

  ShareWorkspaceRequest:
    type: object
    required:
     - items
    properties:
      workspaceEtag:
        type: string
        description: >
          Associated workspace etag retrieved via reading the workspaces API. If provided,
          validates that the workspace (and its user roles) has not been modified since this
          etag was retrieved.
      items:
        type: "array"
        items:
           $ref: "#/definitions/UserRole"

  ShareWorkspaceResponse:
    type: object
    properties:
      workspaceEtag:
        type: string
        description: >
          Updated workspace etag after the share request has been applied.

  WorkspaceAccessLevel:
    type: string
    description: levels of access to workspace, NO ACCESS is akin to removing a user from a workspace ACL
    enum: [NO ACCESS, READER, WRITER, OWNER]

  ResearchPurpose:
    type: object
    required:
     - diseaseFocusedResearch
     - methodsDevelopment
     - controlSet
     - aggregateAnalysis
     - ancestry
     - commercialPurpose
     - population
     - reviewRequested
    properties:
      diseaseFocusedResearch:
        type: boolean
        default: false
      diseaseOfFocus:
        type: string
      methodsDevelopment:
        type: boolean
        default: false
      controlSet:
        type: boolean
        default: false
      aggregateAnalysis:
        type: boolean
        default: false
      ancestry:
        type: boolean
        default: false
      commercialPurpose:
        type: boolean
        default: false
      population:
        type: boolean
        default: false
      populationOfFocus:
        type: string
      reviewRequested:
        type: boolean
        default: false
      timeRequested:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      approved:
        type: boolean
      timeReviewed:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      additionalNotes:
        type: string

  ResearchPurposeReviewRequest:
    description: Approve or reject a workspace's research purpose.
    type: object
    required: approved
    properties:
      approved:
        type: boolean

  CohortListResponse:
    type: object
    required:
     - items
    properties:
      items:
        type: "array"
        items:
           $ref: "#/definitions/Cohort"

  Cohort:
    type: object
    required:
      - name
      - criteria
      - type
    properties:
      id:
        type: string
      etag:
        type: string
        description: >
          Entity tag for optimistic concurrency control. To be set during a
          read-modify-write to ensure that the client has not attempted to
          modify a changed resource.
      name:
        type: string
      criteria:
        description: >
          Internal representation of the cohort definition. Clients should not depend directly
          on this, but instead call client functions to issue a SQL query for the cohort.
        type: string
      type:
        type: string
      description:
        type: string
      creator:
        type: string
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.

  MaterializeCohortRequest:
    type: object
    properties:
      cohortName:
        description: >
         The name of a cohort that is to be evaluated. Either this or cohortSpec should be specified
        type: string
      cohortSpec:
        description: >
          JSON representation of a cohort to be evaluated (using the same format used for saved
          cohorts). Either this or cohortName should be specified
        type: string
      statusFilter:
        description: >
          An array of status values; participants with these statuses will be included.
          Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED.
          Only valid for use with cohortName (cohorts saved in the database.)
        type: array
        items:
          $ref: "#/definitions/CohortStatus"
      cdrVersionName:
        description: >
          The name of a CDR version to use when evaluating the cohort; if none is specified,
          the CDR version currently associated with the workspace will be used
        type: string
      pageToken:
        description: >
          Pagination token retrieved from a previous call to materializeCohort; used for
          retrieving additional pages of results. If this is specified, all other fields on
          MaterializeCohortRequest apart from pageSize must match the values specified
          on the request that generated this token.
        type: string
      pageSize:
        description: >
          Maximum number of results to return in a response. Defaults to 1000.
        type: int32
      # TODO: add fieldSpec, output information

  MaterializeCohortResponse:
    type: object
    properties:
      results:
        description: >
          An array of JSON dictionaries representing results to the cohort materialization.
          (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a
          list[object] where each object is a dictionary. In Typescript clients, this is an
          Array<any> where each object is a dictionary.)
        type: array
        items:
          type: object
      nextPageToken:
        description: >
          Pagination token that can be used in a subsequent call to MaterializeCohortRequest to
          retrieve more results. If not set, there are no more results to retrieve.
        type: string

  CreateAccountRequest:
    type: object
    required:
      - password
    properties:
      profile:
        $ref: '#/definitions/Profile'
      password:
        type: string
      invitationKey:
        type: string
        description: Invitation key. Necessary when creating account before public launch.

  BugReport:
    type: object
    required:
      - shortDescription
      - reproSteps
      - contactEmail
    properties:
      shortDescription:
        description: A short description of the bug
        type: string
      reproSteps:
        description: Steps to reproduce the bug
        type: string
      contactEmail:
        description: The email with which to contact the bug reporter.
        type: string

  Profile:
    type: object
    required:
      - username
      - enabledInFireCloud
      - dataAccessLevel
    properties:
      username:
        description: researchallofus username
        type: string
      contactEmail:
        description: email address that can be used to contact the user
        type: string
      enabledInFireCloud:
        description: true if the user is enabled in FireCloud, false if they are not
        type: boolean
      freeTierBillingProjectName:
        description: name of the AllOfUs free tier billing project created for this user
        type: string
      dataAccessLevel:
        description: what level of data access the user has
        $ref: "#/definitions/DataAccessLevel"
      givenName:
        description: the user's given name (e.g. Alice)
        type: string
      familyName:
        description: the user's family  name (e.g. Jones)
        type: string
      phoneNumber:
        description: the user's phone number
        type: string
      authorities:
        description: authorities granted to this user
        type: "array"
        items:
          $ref: "#/definitions/Authority"

  ErrorResponse:
    type: object
    properties:
      message:
        description: General error message for the response.
        type: string
      # TODO: add list of field-level error messages with field names.

  RegistrationRequest:
    type: object

  CriteriaListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/Criteria"

  Criteria:
    type: object
    required:
      - id
      - type
      - code
      - name
      - group
      - selectable
    properties:
      id:
        description: id of the criteria
        type: integer
        format: int64
      type:
        description: type of criteria
        type: string
      subtype:
        description: subtype of this criteria
        type: string
      code:
        description: >
          code that identifies this criteria, ex: icd9, icd10 or cpt all
          have codes that map to the concept_code column in the concept
          table.
        type: string
      name:
        description: description of criteria
        type: string
      count:
        description: est. count in the cdr
        type: integer
        format: int64
      group:
        description: specifies if child or parent
        type: boolean
      selectable:
        description: specifies if user can search with
        type: boolean
      conceptId:
        description: >
          concept ids are ids associated with a specific vocabulary item,
          in the concept table and allow you to search for that code in
          its domain table.
        type: integer
        format: int64
      domainId:
        description: >
          clue to determine which tables to search, but these only exist
          for leaves in the tree. Parents don't have domain ids and concept
          id will be used in the case that a parent is selectable.
        type: string

  ChartInfoListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/ChartInfo"

  ChartInfo:
    type: object
    required:
      - gender
      - race
      - ageRange
      - count
    properties:
      gender:
        description: gender of subject
        type: string
      race:
        description: race of subject
        type: string
      ageRange:
        description: age range of subject
        type: string
      count:
        description: number of subjects
        type: integer
        format: int64

  SearchRequest:
    description: >
      The SearchRequest describes the state of the Cohort Builder at any given moment.
      It contains two keys, `include` and `exclude`, each of which specifies an array
      of SearchGroups which are `AND`ed together, and which collectively specify which
      subjects to include or exclude from the cohort.
    type: object
    required:
      - includes
      - excludes
    properties:
      includes:
        type: array
        items:
          $ref: "#/definitions/SearchGroup"
      excludes:
        type: array
        items:
          $ref: "#/definitions/SearchGroup"
    examples:
      typical:
        {
          include: [
            # SearchGroups
            [
              # SearchGroupItems
              {type: "ICD9", searchParameters: [{value: "Foo", domain: "Bar"}, {value: "C"}]},
              {type: "ICD9", searchParameters: [{value: "Baz"}]}
            ], [
              {type: "ICD10", searchParameters: [{value: "Baz", domain: "Bar"}], modifiers: []},
            ]
          ],
          exclude: []
        }
      minimum:
        {
          include: [[{type: "A Crit Type", searchParameters: [{value: "A value"}]}]]
        }

  SearchGroup:
    description: >
      A SearchGroup is a container for groups of criteria which are `AND`ed together.
    type: object
    required:
      - items
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      items:
        type: "array"
        items:
          $ref: "#/definitions/SearchGroupItem"

  SearchGroupItem:
    # TODO: When we add in modifiers we'll add that to the official description
    description: >
      A SearchGroupItem is the "line item" of the Cohort Builder.  It specifies
      a set of criteria of a given kind, possibly alongside a set of modifiers,
      the results of which are `OR`ed together with the other criteria in the
      group.
    type: object
    required:
      - type
      - searchParameters
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      type:
        description: type of criteria
        type: string
      searchParameters:
        description: values that help search for subjects
        type: "array"
        items:
          $ref: "#/definitions/SearchParameter"
      modifiers:
        description: criteria by operation or predicate
        type: "array"
        items:
          $ref: "#/definitions/Modifier"
    example:
      {
        type: "ICD9",
        searchParameters: [
          { value: "E9293", domain: "Condition", conceptId: null },
          { value: "E979-E979.9", domain: null, conceptId: null }
        ],
        modifiers: [
          { name: "age_at_event", operator: "GTE >=", operands: [ "Arg1", "Arg2" ] }
        ]
      }

  SearchParameter:
    type: object
    required:
      - parameterId
      - name
      - value
      - type
      - subtype
      - group
    properties:
      parameterId:
        description: Unique within the cohort definition
        type: string
      name:
        description: The name of the generating Criterion
        type: string
      value:
        description: The Value of the Criteria within its Category Tree
        type: string
      type:
        description: The type of the generating Criterion
        type: string
      subtype:
        description: The subtype of the generating Criterion
        type: string
      group:
        description: Specifies if the generating Criterion is a leaf or node in its Criteria tree
        type: boolean
      domain:
        description: clue to determine which tables to search
        type: string
      conceptId:
        description: The concept id that maps to concept table.
        type: integer
        format: int64
      attribute:
        description: Any applicable arguments that complete the sense of the parameter
        $ref: "#/definitions/Attribute"
    examples:
      leafExample:
        value: "E9293"
        subtype: "AGE"
        domainId: "Condition"
      parentExample:
        value: "E979-E979.9"
        subtype: "BP_EHR"
        domainId: null

  Attribute:
    type: object
    required:
      - operator
      - operands
    properties:
      operator:
        type: string
      operands:
        type: "array"
        items:
          type: string
    examples:
      singleValued:
        operator: "GTE"
        operands: ["20"]
      multiValued:
        operator: "BETWEEN"
        operands: ["18", "35"]

  Modifier:
    type: object
    required:
      - name
      - operator
      - operands
    properties:
      name:
        description: Semantic name of the operator
        type: string
      operator:
        description: Machine name of the operator
        type: string
      operands:
        type: "array"
        items:
          type: string
    examples:
      singleValued:
        name: "age_at_event"
        operator: "GTE"
        operands: ["20"]
      multiValued:
        name: "age_at_event"
        operator: "BETWEEN"
        operands: ["18", "35"]

  ParticipantCohortStatusListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/ParticipantCohortStatus"

  ParticipantCohortStatus:
    type: object
    required:
      - cohortId
      - cdrVersionId
      - participantId
      - status
    properties:
      cohortId:
        type: integer
        format: int64
      cdrVersionId:
        type: integer
        format: int64
      participantId:
        type: integer
        format: int64
      status:
        $ref: "#/definitions/CohortStatus"

  CohortStatus:
    type: string
    description: possible values indicating whether participants are in or out of the cohort
    enum: [NOT_REVIEWED, INCLUDED, EXCLUDED, NEEDS_FURTHER_REVIEW]

  # Mirrors notebooks definitions ###############################################
  ErrorReport:
    description: ''
    required:
      - source
      - message
      - causes
      - stackTrace
    properties:
      source:
        type: string
        description: service causing error
      message:
        type: string
        description: what went wrong
      exceptionClass:
        type: string
        description: class of exception thrown
      statusCode:
        type: integer
        description: HTTP status code
      causes:
        type: array
        description: errors triggering this one
        items:
          $ref: '#/definitions/ErrorReport'
      stackTrace:
        type: array
        description: stack trace
        items:
          $ref: '#/definitions/StackTraceElement'

  StackTraceElement:
    description: ''
    required:
      - className
      - methodName
      - fileName
      - lineNumber
    properties:
      className:
        type: string
        description: class name
      methodName:
        type: string
        description: method name
      fileName:
        type: string
        description: source file name
      lineNumber:
        type: integer
        description: line number

  # TODO: Clean up the client representation of the cluster
  Cluster:
    description: ''
    required:
      - clusterName
      - clusterNamespace
      - status
      - createdDate
      - labels
    properties:
      clusterName:
        type: string
        description: The user-supplied name for the cluster
      clusterNamespace:
        type: string
        description: The Google Project used to create the cluster
      status:
        type: string
        description: The current state of the cluster
      createdDate:
        type: string
        description: The date and time the cluster was created, in ISO-8601 format
      destroyedDate:
        type: string
        description: The date and time the cluster was destroyed, in ISO-8601 format
      labels:
        type: object
        description: The labels to be placed on the cluster. Of type Map[String,String]

  ClusterListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/Cluster"

  UsernameTakenResponse:
    type: object
    required:
      - isTaken
    properties:
      isTaken:
        description: Boolean response to whether username is already taken.
        type: boolean
    example:
      isTaken: false

  WorkspaceResponse:
    type: object
    required:
      - workspace
      - accessLevel
    properties:
      workspace:
        $ref: '#/definitions/Workspace'
      accessLevel:
        $ref: '#/definitions/WorkspaceAccessLevel'
