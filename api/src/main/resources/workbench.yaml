# If validation fails, gradle:generateApi fails claiming this file does not exist.
# For separate validation (with some false positives), do:
#     ./project.rb validate-swagger
swagger: '2.0'
info:
  version: "0.1.0"
  title: "AllOfUs Workbench API"
  description: "The API for the AllOfUs workbench."
  termsOfService: "http://www.pmi-ops.org/terms_of_service.html"
  contact:
    name: "developer_help@pmi-ops.org"
  license:
    name: "MIT"
host: "api.pmi-ops.org"
securityDefinitions:
  # Establish the fact that *some endpoints* are OAuth protected
  # by defining an `aou_oauth` security mode, which we'll assing
  # to any protected endpoints below.
  aou_oauth:
    # TODO: Vet/fix this token and/or authorization URL to work in practice.
    # These are currently included simply to satisfy the Swagger specification,
    # as this is not directly used to dictate oauth details (just used to
    # annotate which methods require oauth).
    authorizationUrl: ""
    tokenUrl: ""
    type: oauth2
    flow: accessCode
schemes:
  - "https"
produces:
  - "application/json"
# Establish the fact that all endpoints are protected: this annotation
# ensures that client libraries know to send bearer tokens when calling
security:
  - aou_oauth: []

# Throughout, we use integer/int64 in preference to string/date-time because Swagger's
# date formatting is inconsistent between server and client. Time values are stored as
# milliseconds since the UNIX epoch.

##########################################################################################
## PATHS
##########################################################################################

## Common Path Parameters
parameters:
  workspaceNamespace:
    in: path
    name: workspaceNamespace
    type: string
    description: The Workspace namespace
    required: true
  workspaceId:
    in: path
    name: workspaceId
    type: string
    description: The Workspace ID (a.k.a. the workspace's Firecloud name)
    required: true
  cohortId:
    in: path
    name: cohortId
    type: integer
    format: int64
    required: true
    description: Cohort ID
  cohortReviewId:
    in: path
    name: cohortReviewId
    type: integer
    format: int64
    required: true
    description: Cohort Review ID
  cdrVersionId:
    in: path
    name: cdrVersionId
    type: integer
    format: int64
    required: true
    description: specifies which cdr version
  participantId:
    in: path
    name: participantId
    type: integer
    format: int64
    required: true
    description: specifies which participant
  userId:
    in: path
    name: userId
    type: integer
    format: int64
    required: true


paths:

  /v1/status:
    get:
      tags:
        - status
      description: Returns the status of the various services and integrations
      operationId: getStatus
      security: []
      responses:
        200:
          description: A map of system name to status.
          schema:
            $ref: "#/definitions/StatusResponse"


  /v1/config:
    get:
      tags:
        - config
      description: Returns some server configuration data.
      operationId: getConfig
      security: []
      responses:
        200:
          description: Configuration data
          schema:
            $ref: "#/definitions/ConfigResponse"


   # User methods ########################################################################

  /v1/me:
    get:
      tags:
        - profile
      description: Returns the user's profile information
      operationId: getMe
      responses:
        200:
          description: The user's profile.
          schema:
            $ref: "#/definitions/Profile"

  /v1/sendBugReport:
    post:
      tags:
        - bugReport
      description: Sends an email to developers about a user reported bug
      operationId: sendBugReport
      # TODO(dmohs): security: []
      parameters:
        - in: body
          name: bugReport
          description: user reported bug
          required: true
          schema:
            $ref: "#/definitions/BugReport"
      responses:
        200:
          description: Success message
          schema:
            $ref: "#/definitions/BugReport"

  # TODO(dmohs): If the username is not present in the query string, this responds with 500 Server
  # Error. It should respond with 400 Bad Request.
  /v1/is-username-taken:
    get:
      tags:
        - profile
      description: Checks to see if the given username is not available.
      operationId: isUsernameTaken
      security: []
      parameters:
        - in: query
          name: username
          type: string
          required: true
      responses:
        200:
          description: The answer.
          schema:
            $ref: "#/definitions/UsernameTakenResponse"

  /v1/invitation-key-verification:
    post:
      tags:
        - profile
      description: Verifies invitation key.
      operationId: invitationKeyVerification
      security: []
      parameters:
        - in: body
          name: invitationVerificationRequest
          schema:
            $ref: "#/definitions/InvitationVerificationRequest"
      responses:
        200:
          description: Invitation Key verified.
        400:
          description: Error occurred while verifying Invitation Key.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /v1/request-invitation-key:
    post:
      tags:
        - profile
      description: Sends support a request for the invitation key.
      operationId: requestInvitationKey
      security: []
      parameters:
        - in: query
          name: contactEmail
          type: string
      responses:
        200:
          description: Request received

  /v1/google-account:
    post:
      tags:
        - profile
      description: Creates an account in the researchallofus.org domain.
      operationId: createAccount
      security: []
      parameters:
        - in: body
          name: createAccountRequest
          schema:
            $ref: "#/definitions/CreateAccountRequest"
      responses:
        201:
          description: Account created successfully.
          schema:
            $ref: "#/definitions/Profile"
        400:
          description: Error occurred while creating account.
          schema:
            $ref: "#/definitions/ErrorResponse"

  /v1/id-verification:
    post:
      tags:
        - profile
      description: Accepts identity information for verification.
      operationId: submitIdVerification
      parameters:
        - in: body
          name: idVerificationRequest
          schema:
            $ref: "#/definitions/IdVerificationRequest"
      responses:
        200:
          description: The user's profile.
          schema:
            $ref: "#/definitions/Profile"

  /v1/update-profile:
    post:
      tags:
        - profile
      description: Updates a users profile
      operationId: updateProfile
      parameters:
        - in: body
          name: updatedProfile
          description: the new profile to use
          schema:
            $ref: "#/definitions/Profile"
      responses:
        204:
          description: Request received.

  # TODO: add signature / other state?
  /v1/account/accept-terms-of-service:
    post:
      tags:
        - profile
      description: Submits consent to the terms of service for researchers.
      operationId: submitTermsOfService
      responses:
        200:
          description: The user's profile.
          schema:
            $ref: "#/definitions/Profile"

  # TODO: add other state pertaining to ethics training?
  /v1/account/complete-ethics-training:
    post:
      tags:
        - profile
      description: Completes ethics training.
      operationId: completeEthicsTraining
      responses:
        200:
          description: The user's profile.
          schema:
            $ref: "#/definitions/Profile"

  # TODO: add demographic survey response data
  /v1/account/submit-demographic-survey:
    post:
      tags:
        - profile
      description: Submits demographic survey responses.
      operationId: submitDemographicsSurvey
      responses:
        200:
          description: The user's profile.
          schema:
            $ref: "#/definitions/Profile"

  /v1/auth-domain/{groupName}:
    post:
      tags:
        - authDomain
      description: This endpoint will create the registered auth domain.
      operationId: "createAuthDomain"
      parameters:
        - in: path
          name: groupName
          description: groupName
          required: true
          type: string
      responses:
        200:
          description: Successfully created group
          schema:
            $ref: "#/definitions/EmptyResponse"

  /v1/auth-domain/{groupName}/users:
    post:
      tags:
        - authDomain
      responses:
        204:
          description: Successfully Added User To Group
        403:
          description: You must be an admin of this group in order to remove members
          schema:
            $ref: '#/definitions/ErrorReport'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/ErrorReport'
        500:
          description: FireCloud Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'
      parameters:
        - in: path
          name: groupName
          required: true
          type: string
        - in: body
          name: request
          description: request carrying user email to add
          schema:
            $ref: "#/definitions/AuthDomainRequest"
      summary: add a user to an auth domain if you have manage groups permission
      operationId: addUserToAuthDomain
    delete:
      responses:
        204:
          description: Successfully Removed User From Group
        403:
          description: You must be an admin of this group in order to remove members
          schema:
            $ref: '#/definitions/ErrorReport'
        404:
          description: User not found
          schema:
            $ref: '#/definitions/ErrorReport'
        500:
          description: FireCloud Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'
      parameters:
        - in: path
          name: groupName
          required: true
          type: string
        - in: body
          name: request
          description: request carrying user email to add
          schema:
            $ref: "#/definitions/AuthDomainRequest"
      tags:
        - authDomain
      summary: remove a user from an auth domain if you have manage groups permission
      operationId: removeUserFromAuthDomain

  # Notebook clusters ####################################################################

  /v1/clusters:
    get:
      summary: List all clusters
      description: List all clusters, optionally filtering on a set of labels
      operationId: listClusters
      tags:
        - cluster
      parameters:
        - in: query
          name: _labels
          description: |
            Optional label key-value pairs to filter results by. Example: key1=val1,key2=val2.

            Note: this string format is a workaround because Swagger doesn't support free-form
            query string parameters. The recommended way to use this endpoint is to specify the
            labels as top-level query string parameters. For instance: GET /api/clusters?key1=val1&key2=val2.
          required: false
          type: string
      responses:
        200:
          description: A list of cluster definitions.
          schema:
            $ref: "#/definitions/ClusterListResponse"
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorReport'
        500:
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cluster:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    get:
      summary: Get details of a dataproc cluster
      description: Returns information about an existing dataproc cluster managed by Leo. Poll this to find out when your cluster has finished starting up.
      operationId: getCluster
      tags:
        - cluster
      responses:
        200:
          description: Cluster found, here are the details
          schema:
            $ref: '#/definitions/Cluster'
        404:
          description: Cluster not found
          schema:
            $ref: '#/definitions/ErrorReport'
        500:
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'
    put:
      summary: Creates a new dataproc cluster in the given project with the given name
      description: creates dataproc cluster with jupyters
      operationId: createCluster
      tags:
        - cluster
      responses:
        200:
          description: Cluster creation successful
          schema:
            $ref: '#/definitions/Cluster'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorReport'
        500:
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'
    delete:
      summary: Deletes an existing dataproc cluster in the given project
      description: deletes a dataproc cluster
      operationId: deleteCluster
      tags:
        - cluster
      responses:
        202:
          description: Cluster deletion request accepted
          schema:
            $ref: '#/definitions/EmptyResponse'
        404:
          description: Cluster not found
          schema:
            $ref: '#/definitions/ErrorReport'
        500:
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebook-list:
    get:
      summary: Get details of Python files from google Bucket directory notebook
      description: Returns list of name and path of python files from google bucket, directory notebook.
      operationId: getNoteBookList
      tags:
        - workspaces
      parameters:
        - in: path
          name: workspaceNamespace
          description: workspaceNamespace
          required: true
          type: string
        - in: path
          name: workspaceId
          description: workspaceId
          required: true
          type: string
      responses:
        200:
          description: List of files
          schema:
            type: array
            items:
              $ref: '#/definitions/FileDetail'
        404:
          description: Workspace not found
          schema:
            $ref: '#/definitions/ErrorReport'
        500:
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/localize-notebooks:
    post:
      summary: Localize files from workspace to notebook cluster
      description: localize files
      operationId: localizeNotebook
      tags:
        - cluster
      parameters:
      - in: path
        name: workspaceNamespace
        description: workspaceNamespace
        required: true
        type: string
      - in: path
        name: workspaceId
        description: workspaceId
        required: true
        type: string
      - in: body
        name: fileList
        description: List of file to be transfered
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/FileDetail'
      responses:
        200:
         description: List of files
        404:
         description: Cluster or Workspace not found
         schema:
           $ref: '#/definitions/ErrorReport'
        500:
         description: Internal Error
         schema:
          $ref: '#/definitions/ErrorReport'

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/localize-all-files:
    get:
      summary: Get file details from google bucket and then localize to notebook server
      description: Get files details from bucket folders config and notebooks and then localize to notebook server
      operationId: localizeAllFiles
      tags:
        - workspaces
      parameters:
        - in: path
          name: workspaceNamespace
          description: workspaceNamespace
          required: true
          type: string
        - in: path
          name: workspaceId
          description: workspaceId
          required: true
          type: string
      responses:
        200:
          description: Files have been localized
        404:
          description: Workspace or Cluster not found
          schema:
            $ref: '#/definitions/ErrorReport'
        500:
          description: Internal Error
          schema:
            $ref: '#/definitions/ErrorReport'

  # Billing projects #####################################################################

  /v1/billingProjects:
    get:
      tags:
        - Profile
      operationId: getBillingProjects
      summary: List billing projects for a user
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BillingProjectMembership'
        404:
          description: User Not Found
        500:
          description: Internal Server Error

  # Workspaces ###########################################################################

  /v1/workspaces:
    get:
      tags:
        - workspaces
      description: Returns all workspaces that a user has access to
      operationId: getWorkspaces
      responses:
        200:
          description: A list of workspace definitions.
          schema:
            $ref: "#/definitions/WorkspaceResponseListResponse"
    post:
      tags:
        - workspaces
      description: Creates a workspace
      operationId: createWorkspace
      parameters:
        - in: body
          name: workspace
          description: workspace definition
          schema:
            $ref: "#/definitions/Workspace"
      responses:
        200:
          description: The workspace that was created.
          schema:
            $ref: "#/definitions/Workspace"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    get:
      tags:
        - workspaces
      description: Returns the workspace definition with the specified ID and namespace
      operationId: getWorkspace
      responses:
        200:
          description: A workspace response containing workspace and access level
          schema:
            $ref: "#/definitions/WorkspaceResponse"
    patch:
      tags:
        - workspaces
      description: >
        Modifies the workspace definition with the specified ID and namespace;
        fields that are omitted will not be modified
      operationId: updateWorkspace
      parameters:
        - in: body
          name: workspace
          description: workspace definition
          schema:
            $ref: "#/definitions/UpdateWorkspaceRequest"
      responses:
        200:
          description: The updated workspace definition
          schema:
            $ref: "#/definitions/Workspace"
    delete:
      tags:
        - workspaces
      description: Deletes the workspace definition with the specified ID and namespace
      operationId: deleteWorkspace
      responses:
        202:
          description: Workspace deletion request accepted
          schema:

            $ref: '#/definitions/EmptyResponse'

  /v1/admin/workspaces/review:
    get:
      tags:
        - workspaces
      description: >
          Returns workspaces that need research purpose review. Requires
          REVIEW_RESEARCH_PURPOSE authority.
      operationId: getWorkspacesForReview
      responses:
        200:
          description: A list of workspaces
          schema:
            $ref: "#/definitions/WorkspaceListResponse"

  /v1/admin/users/id-verification/list:
    get:
      tags:
        - profile
      description: >
          Returns a list of profiles for users to be reviewed. Requires
          REVIEW_ID_VERIFICATION authority.
      operationId: getIdVerificationsForReview
      responses:
        200:
          description: A list of users to be id verified
          schema:
            $ref: "#/definitions/IdVerificationListResponse"
        403:
          description: User doesn't have the REVIEW_ID_VERIFICATION authority
          schema:
            $ref: "#/definitions/ErrorResponse"

  /v1/admin/users/id-verification/{userId}/review:
    parameters:
      - $ref: '#/parameters/userId'
    post:
      tags:
        - profile
      description: >
          Manually sets the ID verfication status for a user. Requires
          REVIEW_ID_VERIFICATION authority.
      operationId: reviewIdVerification
      parameters:
        - in: body
          name: review
          schema:
            $ref: "#/definitions/IdVerificationReviewRequest"
      responses:
        200:
          description: return updated list of profiles
          schema:
            $ref: "#/definitions/IdVerificationListResponse"

  /v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/review:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    post:
      tags:
        - workspaces
      description: Sets a research purpose review result.
      operationId: reviewWorkspace
      parameters:
        - in: body
          name: review
          description: result of the research purpose review
          schema:
            $ref: "#/definitions/ResearchPurposeReviewRequest"
      responses:
        200:
          description: success
          schema:
            $ref: "#/definitions/EmptyResponse"

  # Note: all requests tagged as "cron" must have the header X-Appengine-Cron:
  # true, which app engine itself only sets when invoking as a cronjob.
  # See https://cloud.google.com/appengine/docs/standard/java/config/cron#securing_urls_for_cron

  /v1/cron/auditBigQuery:
    get:
      security: []
      tags:
        - audit
        - cron
      description: >
        Endpoint meant to be called offline to trigger BigQuery auditing; may be
        slow to execute. Only executable via App Engine cronjob.
      operationId: auditBigQuery
      responses:
        200:
          description: Audit was successful.
          schema:
            $ref: "#/definitions/AuditBigQueryResponse"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/share:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    post:
      tags:
        - workspaces
      description: Shares a workspace with users
      operationId: shareWorkspace
      parameters:
          - in: body
            name: body
            description: users to share the workspace with
            schema:
              $ref: "#/definitions/ShareWorkspaceRequest"
      responses:
        200:
          description: Successful share response
          schema:
            $ref: "#/definitions/ShareWorkspaceResponse"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/clone:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    post:
      tags:
        - workspaces
      description: >
        Clone an existing workspace, with given modifications to workspace metadata. Caller will own
        the newly cloned workspace, and must have read access to the source workspace. In
        addition to workspace metadata, the following will also be cloned:
          - the associated Firecloud workspace
          - cohorts, along with reviews and annotations
          - notebooks located in the default notebook directory for this workspace
      operationId: cloneWorkspace
      parameters:
          - in: body
            name: body
            schema:
              $ref: "#/definitions/CloneWorkspaceRequest"
      responses:
        200:
          description: Successful clone response
          schema:
            $ref: "#/definitions/CloneWorkspaceResponse"

  # Cohorts ##############################################################################

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    get:
      tags:
        - cohorts
      description: Returns all cohort definitions in a workspace
      operationId: "getCohortsInWorkspace"
      responses:
        200:
          description: A list of cohort definitions.
          schema:
            $ref: "#/definitions/CohortListResponse"
    post:
      tags:
        - cohorts
      description: Creates a cohort definition in a workspace.
      operationId: "createCohort"
      parameters:
        - in: body
          name: cohort
          description: cohort definition
          schema:
            $ref: "#/definitions/Cohort"
      responses:
        200:
          description: The cohort definition that was created.
          schema:
            $ref: "#/definitions/Cohort"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
    get:
      tags:
        - cohorts
      description: Returns the cohort definition with the specified ID
      operationId: "getCohort"
      responses:
        200:
          description: A cohort definition
          schema:
            $ref: "#/definitions/Cohort"
    patch:
      tags:
        - cohorts
      description: >
        Modifies the cohort definition with the specified ID; fields that are omitted
        will not be modified
      operationId: "updateCohort"
      parameters:
        - in: body
          name: cohort
          description: cohort definition
          schema:
            $ref: "#/definitions/Cohort"
      responses:
        200:
          description: The updated cohort definition
          schema:
            $ref: "#/definitions/Cohort"
    delete:
      tags:
        - cohorts
      description: Deletes the cohort definition with the specified ID
      operationId: "deleteCohort"
      responses:
        202:
          description: ACCEPTED
          schema:
            $ref: '#/definitions/EmptyResponse'

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
    post:
      tags:
        - cohorts
      description: Materializes a cohort for a given CDR version to specified output
      operationId: "materializeCohort"
      parameters:
       - in: body
         name: request
         description: cohort materialization request
         schema:
           $ref: "#/definitions/MaterializeCohortRequest"
      responses:
        200:
          description: The results of materializing the cohort
          schema:
            $ref: "#/definitions/MaterializeCohortResponse"

  # Cohort Builder #######################################################################
  /v1/cohortbuilder/{cdrVersionId}/criteria/{type}/{parentId}:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: Returns builder criteria tree with the specified criteria type and parentId
      operationId: "getCriteriaByTypeAndParentId"
      parameters:
        - in: path
          name: type
          type: string
          required: true
          description: the specific type of criteria to get
        - in: path
          name: parentId
          type: integer
          format: int64
          required: true
          description: fetch children of parentId
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  /v1/cohortbuilder/{cdrVersionId}/search:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    post:
      tags:
        - cohortBuilder
      description: Searches for participants based on criteria, criteria specific parameters, and modifiers.
      operationId: "countParticipants"
      parameters:
        - in: body
          name: request
          description: object of parameters by which to perform the search
          schema:
            $ref: "#/definitions/SearchRequest"
          required: true
      responses:
        200:
          description: A count of subjects
          schema:
            type: integer
            format: int64

  /v1/cohortbuilder/{cdrVersionId}/chartinfo:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    post:
      tags:
        - cohortBuilder
      description: Searches for demographic info about subjects.
      operationId: "getChartInfo"
      parameters:
        - in: body
          name: request
          description: object of parameters by which to perform the search
          schema:
            $ref: "#/definitions/SearchRequest"
          required: true
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/ChartInfoListResponse"

  /v1/cohortbuilder/{cdrVersionId}/quicksearch/{type}/{value}:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: Quick search for criteria that matches on code and name.
      operationId: "getCriteriaTreeQuickSearch"
      parameters:
        - in: path
          name: type
          type: string
          required: true
          description: the specific type of criteria to get
        - in: path
          name: value
          type: string
          required: true
          description: value that should match code or name
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  # Cohort Review  #######################################################################
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/demographics:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortReview
      description: Will return a list all values for gender, race and ethnicity.
      operationId: "getParticipantDemographics"
      responses:
        200:
          description: An object which contains a list of all values for gender, race and ethnicity.
          schema:
            $ref: "#/definitions/ParticipantDemographics"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
      - $ref: '#/parameters/cdrVersionId'
    post:
      tags:
        - cohortReview
      description:  >
        This endpoint will create an cohort review which is a participant cohort sample
        specified by the review size parameter.
      operationId: "createCohortReview"
      parameters:
        - in: body
          name: request
          required: true
          description: cohort review creation request body
          schema:
            $ref: "#/definitions/CreateReviewRequest"
      responses:
        200:
          description: A cohortReviewId and cohort count
          schema:
            $ref: "#/definitions/CohortReview"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
      - $ref: '#/parameters/cdrVersionId'
    post:
      tags:
         - cohortReview
      description:  >
        Returns a collection of participants for the specified cohortId and cdrVersionId. This endpoint
        does pagination based on page, limit, order and column.
      operationId: "getParticipantCohortStatuses"
      parameters:
        - in: body
          name: request
          required: true
          description: request body for getting list of ParticipantCohortStatuses.
          schema:
            $ref: "#/definitions/ParticipantCohortStatusesRequest"
      responses:
        200:
          description: A collection of participants
          schema:
            $ref: "#/definitions/CohortReview"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
      - $ref: '#/parameters/cdrVersionId'
      - $ref: '#/parameters/participantId'
    get:
      tags:
        - cohortReview
      description: This endpoint will return a ParticipantCohortStatus
      operationId: "getParticipantCohortStatus"
      responses:
        200:
          description: The ParticipantCohortStatus definition
          schema:
            $ref: "#/definitions/ParticipantCohortStatus"
    put:
      tags:
        - cohortReview
      description: Modifies the ParticipantCohortStatus status
      operationId: updateParticipantCohortStatus
      parameters:
        - in: body
          name: cohortStatusRequest
          description: Contains the new review status
          schema:
            $ref: "#/definitions/ModifyCohortStatusRequest"
      responses:
        200:
          description: The updated ParticipantCohortStatus definition
          schema:
            $ref: "#/definitions/ParticipantCohortStatus"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/charts/{domain}:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortReview
      description: Returns a collection of CohortSummary for UI charting in cohort review.
      operationId: "getCohortSummary"
      parameters:
        - in: path
          name: domain
          type: string
          required: true
          description: specifies which domain the CohortSummary should belong to.
      responses:
        200:
          description: A collection of CohortSummary
          schema:
            $ref: "#/definitions/CohortSummaryListResponse"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
      - $ref: '#/parameters/cdrVersionId'
      - $ref: '#/parameters/participantId'
    post:
      tags:
        - cohortReview
      description: This endpoint will create a ParticipantCohortAnnotation.
      operationId: "createParticipantCohortAnnotation"
      parameters:
        - in: body
          name: request
          required: true
          description: ParticipantCohortAnnotation creation request body
          schema:
            $ref: "#/definitions/ParticipantCohortAnnotation"
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          schema:
            $ref: "#/definitions/ParticipantCohortAnnotation"
    get:
      tags:
        - cohortReview
      description: This endpoint will get a collection of ParticipantCohortAnnotations.
      operationId: "getParticipantCohortAnnotations"
      responses:
        200:
          description: A collection of ParticipantCohortAnnotation.
          schema:
            $ref: "#/definitions/ParticipantCohortAnnotationListResponse"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants/{participantId}/annotations/{annotationId}:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
      - $ref: '#/parameters/cdrVersionId'
      - $ref: '#/parameters/participantId'
      - in: path
        name: annotationId
        type: integer
        format: int64
        required: true
        description: specifies which annotation
    get:
      tags:
        - cohortReview
      description: This endpoint will get a ParticipantCohortAnnotation.
      operationId: "getParticipantCohortAnnotation"
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          schema:
            $ref: "#/definitions/ParticipantCohortAnnotation"
    put:
      tags:
        - cohortReview
      description: This endpoint will modify a ParticipantCohortAnnotation.
      operationId: "updateParticipantCohortAnnotation"
      parameters:
        - in: body
          name: request
          required: true
          description: ParticipantCohortAnnotation modification request body
          schema:
            $ref: "#/definitions/ModifyParticipantCohortAnnotationRequest"
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          schema:
            $ref: "#/definitions/ParticipantCohortAnnotation"
    delete:
      tags:
        - cohortReview
      description: Deletes the ParticipantCohortAnnotation with the specified ID
      operationId: "deleteParticipantCohortAnnotation"
      responses:
        202:
          description: ParticipantCohortAnnotation deletion request accepted
          schema:
            $ref: '#/definitions/EmptyResponse'

  # Cohort Annotation Definition Controller ###################################################
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
    post:
      tags:
        - cohortAnnotationDefinition
      description: This endpoint will create a CohortAnnotationDefinition.
      operationId: "createCohortAnnotationDefinition"
      parameters:
        - in: body
          name: request
          required: true
          description: CohortAnnotationDefinition creation request body
          schema:
            $ref: "#/definitions/CohortAnnotationDefinition"
      responses:
        200:
          description: A CohortAnnotationDefinition.
          schema:
            $ref: "#/definitions/CohortAnnotationDefinition"
    get:
      tags:
        - cohortAnnotationDefinition
      description: Returns a collection of CohortAnnotationDefinition.
      operationId: "getCohortAnnotationDefinitions"
      responses:
        200:
          description: A collection of CohortAnnotationDefinition
          schema:
            $ref: "#/definitions/CohortAnnotationDefinitionListResponse"

  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}:
    parameters:
      - $ref: '#/parameters/workspaceNamespace'
      - $ref: '#/parameters/workspaceId'
      - $ref: '#/parameters/cohortId'
      - in: path
        name: annotationDefinitionId
        type: integer
        format: int64
        required: true
        description: specifies which CohortAnnotationDefinition.
    get:
      tags:
        - cohortAnnotationDefinition
      description: Returns a CohortAnnotationDefinition.
      operationId: "getCohortAnnotationDefinition"
      responses:
        200:
          description: A CohortAnnotationDefinition
          schema:
            $ref: "#/definitions/CohortAnnotationDefinition"
    put:
      tags:
        - cohortAnnotationDefinition
      description: modify the CohortAnnotationDefinition.
      operationId: updateCohortAnnotationDefinition
      parameters:
        - in: body
          name: modifyCohortAnnotationDefinitionRequest
          description: Contains the new CohortAnnotationDefinition
          schema:
            $ref: "#/definitions/ModifyCohortAnnotationDefinitionRequest"
      responses:
        200:
          description: The updated ParticipantCohortStatus definition
          schema:
            $ref: "#/definitions/CohortAnnotationDefinition"
    delete:
      tags:
        - cohortAnnotationDefinition
      description: Deletes the CohortAnnotationDefinition with the specified ID
      operationId: "deleteCohortAnnotationDefinition"
      responses:
        202:
          description: CohortAnnotationDefinition deletion request accepted
          schema:
            $ref: '#/definitions/EmptyResponse'

##########################################################################################
## DEFINITIONS
##########################################################################################
definitions:

  StatusResponse:
    type: object
    required:
      - firecloudStatus
      - notebooksStatus
    properties:
      firecloudStatus:
        type: boolean
      notebooksStatus:
        type: boolean

  ConfigResponse:
    type: object
    required:
      - gsuiteDomain
    properties:
      # This should be gSuiteDomain, but the Swagger-Codegen-generated server code causes the JSON
      # response to have the keys "gsuiteDomain" and "gSuiteDomain". This weirdness is a workaround.
      gsuiteDomain:
        type: string
        description: G-Suite domain containing user accounts.
      projectId:
        type: string
        description: The cloud project in which this app is running.
      stackdriverApiKey:
        type: string
        description: |
          Stackdriver API key for error reporting, scoped to a particular
          domain. If unset, Stackdriver error reporting should be disabled.

  # Mirrors BillingProjectMembership from fireCloud.yaml
  BillingProjectMembership:
    description: ''
    required:
      - projectName
      - role
      - status
    type: object
    properties:
      projectName:
        type: string
        description: the name of the project
      role:
        type: string
        description: the role of the current user in the project
      status:
        $ref: "#/definitions/BillingProjectStatus"

  BillingProjectStatus:
    type: string
    description: >
      Initialization status of a Firecloud billing project for use with Workbench.
    enum: &BILLING_PROJECT_STATUS [none, pending, ready, error]

  DataAccessLevel:
    type: string
    description: levels of access to data in the curated data repository
    enum: &DATA_ACCESS_LEVEL [unregistered, registered, protected, revoked]

  EmailVerificationStatus:
    type: string
    description: stage of email verification
    enum: &EMAIL_VERIFICATION_STATUS [unverified, pending, subscribed]

  EmptyResponse:
    type: object
    properties:
      additionalInfo:
        type: string

  VerifyEmailRequest:
    type: object
    properties:
      emailToVerify:
        type: string
      username:
        type: string

  Authority:
    type: string
    description: actions a user can have authority/permission to perform
    enum: [
        # Note: Swagger trims any common prefix from enum values' corresponding
        # Java fields by default; this has no side-effect currently as there is
        # no common prefix. https://github.com/swagger-api/swagger-codegen/issues/4261
        REVIEW_RESEARCH_PURPOSE,
        MANAGE_GROUP,
        REVIEW_ID_VERIFICATION
    ]

  WorkspaceListResponse:
    type: object
    required:
     - items
    properties:
      items:
        type: "array"
        items:
           $ref: "#/definitions/Workspace"

  WorkspaceResponseListResponse:
    type: object
    required:
     - items
    properties:
      items:
        type: "array"
        items:
           $ref: "#/definitions/WorkspaceResponse"

  Workspace:
    type: object
    required:
     - name
    properties:
      id:
        type: string
      etag:
        type: string
        description: >
          Entity tag for optimistic concurrency control. To be set during a
          read-modify-write to ensure that the client has not attempted to
          modify a changed resource.
      name:
        type: string
      namespace:
        type: string
      description:
        type: string
      cdrVersionId:
        type: string
      creator:
        type: string
      dataAccessLevel:
        $ref: "#/definitions/DataAccessLevel"
      researchPurpose:
        $ref: "#/definitions/ResearchPurpose"
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      userRoles:
        type: "array"
        items:
           $ref: "#/definitions/UserRole"

  UserRole:
    type: object
    required:
      - email
      - role
    properties:
      email:
        type: string
      role:
        $ref: "#/definitions/WorkspaceAccessLevel"

  ShareWorkspaceRequest:
    type: object
    required:
     - items
    properties:
      workspaceEtag:
        type: string
        description: >
          Associated workspace etag retrieved via reading the workspaces API. If provided,
          validates that the workspace (and its user roles) has not been modified since this
          etag was retrieved.
      items:
        type: "array"
        items:
           $ref: "#/definitions/UserRole"

  ShareWorkspaceResponse:
    type: object
    properties:
      workspaceEtag:
        type: string
        description: >
          Updated workspace etag after the share request has been applied.

  CloneWorkspaceRequest:
    type: object
    required:
     - workspace
    properties:
      workspace:
        $ref: "#/definitions/Workspace"
        description: >
          Workspace metadata to be applied to the cloned workspace upon creation. The following
          workspace fields are accepted:
            - name (required)
            - namespace (required)
            - researchPurpose (required)
            - description: defaults to the cloned workspace description

          All other fields will be ignored and are generated server-side or are copied from the
          cloned workspace.

  CloneWorkspaceResponse:
    type: object
    properties:
      workspace:
        $ref: "#/definitions/Workspace"
        description: The newly created workspace clone.

  UpdateWorkspaceRequest:
    type: object
    required:
     - workspace
    properties:
      workspace:
        $ref: "#/definitions/Workspace"

  WorkspaceAccessLevel:
    type: string
    description: levels of access to workspace, NO ACCESS is akin to removing a user from a workspace ACL
    enum: [NO ACCESS, READER, WRITER, OWNER]

  ResearchPurpose:
    type: object
    required:
     - diseaseFocusedResearch
     - methodsDevelopment
     - controlSet
     - aggregateAnalysis
     - ancestry
     - commercialPurpose
     - population
     - reviewRequested
     - underservedPopulation
    properties:
      diseaseFocusedResearch:
        type: boolean
        default: false
      diseaseOfFocus:
        type: string
      methodsDevelopment:
        type: boolean
        default: false
      controlSet:
        type: boolean
        default: false
      aggregateAnalysis:
        type: boolean
        default: false
      ancestry:
        type: boolean
        default: false
      commercialPurpose:
        type: boolean
        default: false
      population:
        type: boolean
        default: false
      populationOfFocus:
        type: string
      reviewRequested:
        type: boolean
        default: false
      containsUnderservedPopulation:
        type: boolean
        default: false
      underservedPopulationDetails:
        type: array
        items:
          $ref: "#/definitions/underservedPopulationEnum"
      timeRequested:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      approved:
        type: boolean
      timeReviewed:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      additionalNotes:
        type: string

  underservedPopulationEnum:
    type: string
    description: Short parsable descriptions of underserved populations
    enum: [
      RACE_AMERICAN_INDIAN_OR_ALASKA_NATIVE,
      RACE_ASIAN,
      RACE_BLACK_AFRICAN_OR_AFRICAN_AMERICAN,
      RACE_HISPANIC_OR_LATINO,
      RACE_MIDDLE_EASTERN_OR_NORTH_AFRICAN,
      RACE_NATIVE_HAWAIIAN_OR_PACIFIC_ISLANDER,
      RACE_MORE_THAN_ONE_RACE,
      AGE_CHILDREN,
      AGE_ADOLESCENTS,
      AGE_OLDER_ADULTS,
      AGE_ELDERLY,
      SEX_FEMALE,
      SEX_INTERSEX,
      SEXUAL_ORIENTATION_GAY,
      SEXUAL_ORIENTATION_LESBIAN,
      SEXUAL_ORIENTATION_BISEXUAL,
      SEXUAL_ORIENTATION_POLYSEXUAL_OMNISEXUAL_SAPIOSEXUAL_OR_PANSEXUAL,
      SEXUAL_ORIENTATION_ASEXUAL,
      SEXUAL_ORIENTATION_TWO_SPIRIT,
      SEXUAL_ORIENTATION_FIGURING_OUT_SEXUALITY,
      SEXUAL_ORIENTATION_MOSTLY_STRAIGHT,
      SEXUAL_ORIENTATION_DOES_NOT_THINK_OF_HAVING_SEXUALITY,
      SEXUAL_ORIENTATION_DOES_NOT_USE_LABELS,
      SEXUAL_ORIENTATION_DOES_NOT_KNOW_ANSWER,
      GENDER_IDENTITY_WOMAN,
      GENDER_IDENTITY_NON_BINARY,
      GENDER_IDENTITY_TRANSMAN,
      GENDER_IDENTITY_TRANSWOMAN,
      GENDER_IDENTITY_GENDERQUEER,
      GENDER_IDENTITY_GENDERFLUID,
      GENDER_IDENTITY_GENDER_VARIANT,
      GENDER_IDENTITY_QUESTIONING,
      GEOGRAPHY_URBAN_CLUSTERS,
      GEOGRAPHY_RURAL,
      DISABILITY_PHYSICAL,
      DISABILITY_MENTAL,
      ACCESS_TO_CARE_NOT_PAST_TWELVE_MONTHS,
      ACCESS_TO_CARE_CANNOT_OBTAIN_OR_PAY_FOR,
      EDUCATION_INCOME_LESS_THAN_HIGH_SCHOOL_GRADUATE,
      EDUCATION_INCOME_LESS_THAN_TWENTY_FIVE_THOUSAND_FOR_FOUR_PEOPLE
    ]

  ResearchPurposeReviewRequest:
    description: Approve or reject a workspace's research purpose.
    type: object
    required:
      - approved
    properties:
      approved:
        type: boolean

  IdVerificationReviewRequest:
    type: object
    required:
      - newStatus
    properties:
      newStatus:
        $ref: "#/definitions/BlockscoreIdVerificationStatus"

  CohortListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
           $ref: "#/definitions/Cohort"

  Cohort:
    type: object
    required:
      - name
      - criteria
      - type
    properties:
      id:
        type: integer
        format: int64
      etag:
        type: string
        description: >
          Entity tag for optimistic concurrency control. To be set during a
          read-modify-write to ensure that the client has not attempted to
          modify a changed resource.
      name:
        type: string
      criteria:
        description: >
          Internal representation of the cohort definition. Clients should not depend directly
          on this, but instead call client functions to issue a SQL query for the cohort.
        type: string
      type:
        type: string
      description:
        type: string
      creator:
        type: string
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.

  MaterializeCohortRequest:
    type: object
    properties:
      cohortName:
        description: >
         The name of a cohort that is to be evaluated. Either this or cohortSpec should be specified
        type: string
      cohortSpec:
        description: >
          JSON representation of a cohort to be evaluated (using the same format used for saved
          cohorts). Either this or cohortName should be specified
        type: string
      statusFilter:
        description: >
          An array of status values; participants with these statuses will be included.
          Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED.
          Only valid for use with cohortName (cohorts saved in the database.)
        type: array
        items:
          $ref: "#/definitions/CohortStatus"
      cdrVersionName:
        description: >
          The name of a CDR version to use when evaluating the cohort; if none is specified,
          the CDR version currently associated with the workspace will be used
        type: string
      pageToken:
        description: >
          Pagination token retrieved from a previous call to materializeCohort; used for
          retrieving additional pages of results. If this is specified, all other fields on
          MaterializeCohortRequest apart from pageSize must match the values specified
          on the request that generated this token.
        type: string
      pageSize:
        description: >
          Maximum number of results to return in a response. Defaults to 1000.
        type: integer
        format: int32
      # TODO: add fieldSpec, output information

  MaterializeCohortResponse:
    type: object
    properties:
      results:
        description: >
          An array of JSON dictionaries representing results to the cohort materialization.
          (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a
          list[object] where each object is a dictionary. In Typescript clients, this is an
          Array<any> where each object is a dictionary.)
        type: array
        items:
          type: object
      nextPageToken:
        description: >
          Pagination token that can be used in a subsequent call to MaterializeCohortRequest to
          retrieve more results. If not set, there are no more results to retrieve.
        type: string

  CreateAccountRequest:
    type: object
    required:
      - password
    properties:
      profile:
        $ref: '#/definitions/Profile'
      password:
        type: string
      invitationKey:
        type: string

  InvitationVerificationRequest:
    type: object
    required:
      - invitationKey
    properties:
      invitationKey:
        type: string
        description: Invitation key for verification

  BugReport:
    type: object
    required:
      - shortDescription
      - reproSteps
      - contactEmail
    properties:
      shortDescription:
        description: A short description of the bug
        type: string
      reproSteps:
        description: Steps to reproduce the bug
        type: string
      contactEmail:
        description: The email with which to contact the bug reporter.
        type: string

  Profile:
    type: object
    required:
      - username
      - enabledInFireCloud
      - dataAccessLevel
    properties:
      userId:
        description: researchallofus userId
        type: integer
        format: int64
      username:
        description: researchallofus username
        type: string
      contactEmail:
        description: email address that can be used to contact the user
        type: string
      enabledInFireCloud:
        description: true if the user is enabled in FireCloud, false if they are not
        type: boolean
      freeTierBillingProjectName:
        description: name of the AllOfUs free tier billing project created for this user
        type: string
      freeTierBillingProjectStatus:
        description: >
          the initialization status of the free tier billing project, some
          workbench functionality may not work fully with this project until it
          is fully initialized
        $ref: "#/definitions/BillingProjectStatus"
      dataAccessLevel:
        description: what level of data access the user has
        $ref: "#/definitions/DataAccessLevel"
      givenName:
        description: the user's given name (e.g. Alice)
        type: string
      familyName:
        description: the user's family  name (e.g. Jones)
        type: string
      phoneNumber:
        description: the user's phone number
        type: string
      authorities:
        description: authorities granted to this user
        type: "array"
        items:
          $ref: "#/definitions/Authority"
      blockscoreIdVerificationStatus:
        $ref: "#/definitions/BlockscoreIdVerificationStatus"
        description: Status of ID verification
      termsOfServiceCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user consented to terms of service in milliseconds since the UNIX epoch.
      ethicsTrainingCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user completed ethics training in milliseconds since the UNIX epoch.
      demographicSurveyCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user completed a demographic survey in milliseconds since the UNIX epoch.
      disabled:
        type: boolean
      emailVerificationStatus:
        $ref: "#/definitions/EmailVerificationStatus"

  ErrorCode:
    type: string
    description: Short parsable error descriptions
    enum: [
      PARSE_ERROR,
      USER_DISABLED
    ]

  ErrorResponse:
    type: object
    properties:
      message:
        description: General error message for the response.
        type: string
      code:
        description: Short description of the type of error
        $ref: "#/definitions/ErrorCode"
      # TODO: add list of field-level error messages with field names.

  IdVerificationRequest:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      streetLine1:
        type: string
      streetLine2:
        type: string
      city:
        type: string
      state:
        type: string
      zip:
        type: string
      dob:
        type: string
      documentType:
        description: https://docs.blockscore.com/v4/curl/#documents
        type: string
      documentNumber:
        description: https://docs.blockscore.com/v4/curl/#documents
        type: string
    required:
      - firstName
      - lastName
      - addressLine1
      - city
      - state
      - zip
      - dob
      - documentType
      - documentNumber

  CriteriaListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/Criteria"

  Criteria:
    type: object
    required:
      - id
      - type
      - code
      - name
      - group
      - selectable
    properties:
      id:
        description: id of the criteria
        type: integer
        format: int64
      type:
        description: type of criteria
        type: string
      subtype:
        description: subtype of this criteria
        type: string
      code:
        description: >
          code that identifies this criteria, ex: icd9, icd10 or cpt all
          have codes that map to the concept_code column in the concept
          table.
        type: string
      name:
        description: description of criteria
        type: string
      count:
        description: est. count in the cdr
        type: integer
        format: int64
      group:
        description: specifies if child or parent
        type: boolean
      selectable:
        description: specifies if user can search with
        type: boolean
      conceptId:
        description: >
          concept ids are ids associated with a specific vocabulary item,
          in the concept table and allow you to search for that code in
          its domain table.
        type: integer
        format: int64
      domainId:
        description: >
          clue to determine which tables to search, but these only exist
          for leaves in the tree. Parents don't have domain ids and concept
          id will be used in the case that a parent is selectable.
        type: string

  ChartInfoListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/ChartInfo"

  ChartInfo:
    type: object
    required:
      - gender
      - race
      - ageRange
      - count
    properties:
      gender:
        description: gender of subject
        type: string
      race:
        description: race of subject
        type: string
      ageRange:
        description: age range of subject
        type: string
      count:
        description: number of subjects
        type: integer
        format: int64

  SearchRequest:
    description: >
      The SearchRequest describes the state of the Cohort Builder at any given moment.
      It contains two keys, `include` and `exclude`, each of which specifies an array
      of SearchGroups which are `AND`ed together, and which collectively specify which
      subjects to include or exclude from the cohort.
    type: object
    required:
      - includes
      - excludes
    properties:
      includes:
        type: array
        items:
          $ref: "#/definitions/SearchGroup"
      excludes:
        type: array
        items:
          $ref: "#/definitions/SearchGroup"
    example:
      typical:
        {
          include: [
            # SearchGroups
            [
              # SearchGroupItems
              {type: "ICD9", searchParameters: [{value: "Foo", domain: "Bar"}, {value: "C"}]},
              {type: "ICD9", searchParameters: [{value: "Baz"}]}
            ], [
              {type: "ICD10", searchParameters: [{value: "Baz", domain: "Bar"}], modifiers: []},
            ]
          ],
          exclude: []
        }
      minimum:
        {
          include: [[{type: "A Crit Type", searchParameters: [{value: "A value"}]}]]
        }

  SearchGroup:
    description: >
      A SearchGroup is a container for groups of criteria which are `AND`ed together.
    type: object
    required:
      - items
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      items:
        type: "array"
        items:
          $ref: "#/definitions/SearchGroupItem"

  SearchGroupItem:
    # TODO: When we add in modifiers we'll add that to the official description
    description: >
      A SearchGroupItem is the "line item" of the Cohort Builder.  It specifies
      a set of criteria of a given kind, possibly alongside a set of modifiers,
      the results of which are `OR`ed together with the other criteria in the
      group.
    type: object
    required:
      - type
      - searchParameters
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      type:
        description: type of criteria
        type: string
      searchParameters:
        description: values that help search for subjects
        type: "array"
        items:
          $ref: "#/definitions/SearchParameter"
      modifiers:
        description: criteria by operation or predicate
        type: "array"
        items:
          $ref: "#/definitions/Modifier"
    example:
      {
        type: "ICD9",
        searchParameters: [
          { value: "E9293", domain: "Condition", conceptId: null },
          { value: "E979-E979.9", domain: null, conceptId: null }
        ],
        modifiers: [
          { name: "age_at_event", operator: "GTE >=", operands: [ "Arg1", "Arg2" ] }
        ]
      }

  SearchParameter:
    type: object
    required:
      - parameterId
      - name
      - value
      - type
      - subtype
      - group
    properties:
      parameterId:
        description: Unique within the cohort definition
        type: string
      name:
        description: The name of the generating Criterion
        type: string
      value:
        description: The Value of the Criteria within its Category Tree
        type: string
      type:
        description: The type of the generating Criterion
        type: string
      subtype:
        description: The subtype of the generating Criterion
        type: string
      group:
        description: Specifies if the generating Criterion is a leaf or node in its Criteria tree
        type: boolean
      domain:
        description: clue to determine which tables to search
        type: string
      conceptId:
        description: The concept id that maps to concept table.
        type: integer
        format: int64
      attribute:
        description: Any applicable arguments that complete the sense of the parameter
        $ref: "#/definitions/Attribute"
    example:
      leafExample:
        value: "E9293"
        subtype: "AGE"
        domainId: "Condition"
      parentExample:
        value: "E979-E979.9"
        subtype: "BP_EHR"
        domainId: null

  Attribute:
    type: object
    required:
      - operator
      - operands
    properties:
      operator:
        type: string
      operands:
        type: "array"
        items:
          type: string
    example:
      singleValued:
        operator: "GTE"
        operands: ["20"]
      multiValued:
        operator: "BETWEEN"
        operands: ["18", "35"]

  Modifier:
    type: object
    required:
      - name
      - operator
      - operands
    properties:
      name:
        description: Semantic name of the operator
        type: string
      operator:
        description: Machine name of the operator
        type: string
      operands:
        type: "array"
        items:
          type: string
    example:
      singleValued:
        name: "age_at_event"
        operator: "GTE"
        operands: ["20"]
      multiValued:
        name: "age_at_event"
        operator: "BETWEEN"
        operands: ["18", "35"]

  CohortReview:
    type: object
    required:
      - cohortReviewId
      - cohortId
      - cdrVersionId
      - creationTime
      - matchedParticipantCount
      - reviewStatus
    properties:
      cohortReviewId:
        type: integer
        format: int64
      cohortId:
        type: integer
        format: int64
      cdrVersionId:
        type: integer
        format: int64
      creationTime:
        type: string
      matchedParticipantCount:
        type: integer
        format: int64
      reviewSize:
        type: integer
        format: int64
      reviewedCount:
        type: integer
        format: int64
      reviewStatus:
        $ref: "#/definitions/ReviewStatus"
      participantCohortStatuses:
        type: "array"
        items:
          $ref: "#/definitions/ParticipantCohortStatus"
      page:
        type: integer
      pageSize:
        type: integer
      sortOrder:
        type: string
      sortColumn:
        type: string

  ParticipantCohortStatusesRequest:
    type: object
    required:
      - page
      - pageSize
      - sortColumn
      - sortOrder
    properties:
      page:
        type: integer
        description: specific page (default is 0)
      pageSize:
        type: integer
        description: page size of results (default is 25)
      sortColumn:
        $ref: "#/definitions/ParticipantCohortStatusColumns"
        description: Column upon which to sort (default is 'participantId')
      sortOrder:
        $ref: "#/definitions/SortOrder"
        description: Sort direction (default is ascending)
      filters:
        $ref: "#/definitions/FilterList"

  ParticipantCohortStatusColumns:
    type: string
    enum: [participantId, status, gender, birthDate, race, ethnicity]

  SortOrder:
    type: string
    enum: [asc, desc]

  FilterList:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/Filter"

  Filter:
    type: object
    required:
      - property
      - operator
      - values
    properties:
      property:
        $ref: "#/definitions/ParticipantCohortStatusColumns"
      operator:
        $ref: "#/definitions/Operator"
      values:
        type: "array"
        items:
          type: string

  Operator:
    type: string
    enum: ['=', '<', '>', '<=', '>=', 'like', 'in']

  ParticipantDemographics:
    type: object
    required:
      - genderList
      - raceList
      - ethnicityList
    properties:
      genderList:
        type: "array"
        items:
          $ref: "#/definitions/ConceptIdName"
      raceList:
        type: "array"
        items:
          $ref: "#/definitions/ConceptIdName"
      ethnicityList:
        type: "array"
        items:
          $ref: "#/definitions/ConceptIdName"

  ConceptIdName:
    type: object
    required:
      - conceptId
      - conceptName
    properties:
      conceptId:
        type: integer
        format: int64
      conceptName:
        type: string

  ParticipantCohortStatus:
    type: object
    required:
      - participantId
      - status
    properties:
      participantId:
        type: integer
        format: int64
      status:
        $ref: "#/definitions/CohortStatus"
      genderConceptId:
        type: integer
        format: int64
      gender:
        type: string
      birthDate:
        type: integer
        format: int64
      raceConceptId:
        type: integer
        format: int64
      race:
        type: string
      ethnicityConceptId:
        type: integer
        format: int64
      ethnicity:
        type: string

  CohortStatus:
    type: string
    description: possible values indicating whether participants are in or out of the cohort
    enum: [EXCLUDED, INCLUDED, NEEDS_FURTHER_REVIEW, NOT_REVIEWED]

  ModifyCohortStatusRequest:
    type: object
    required:
      - status
    properties:
      status:
        $ref: "#/definitions/CohortStatus"

  ReviewStatus:
    type: string
    description: possible values indicating whether review has been created
    enum: [NONE, CREATED]

  CreateReviewRequest:
      type: object
      required:
        - size
      properties:
        size:
          description: A sample size to review
          type: integer

  CohortSummaryListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/CohortSummary"

  CohortSummary:
    type: object
    required:
      - type
      - name
      - code
      - count
    properties:
      type:
        type: string
        description: the criteria type
      name:
        type: string
        description: the name of this criteria
      code:
        type: string
        description: the code for this criteria
      count:
        type: integer
        format: int64
        description: the count for this criteria type in the cohort

  AnnotationType:
    type: string
    description: possible values representing the type of annotation.
    enum: [STRING, ENUM, DATE, BOOLEAN, INTEGER]

  CohortAnnotationDefinition:
    type: object
    required:
      - cohortId
      - columnName
      - annotationType
    properties:
      cohortAnnotationDefinitionId:
        type: integer
        format: int64
        description: the annotation definition id.
      cohortId:
        type: integer
        format: int64
        description: the cohort id.
      columnName:
        type: string
        description: the name of this annotation.
      annotationType:
        $ref: "#/definitions/AnnotationType"
      enumValues:
        type: array
        items:
          type: string


  ParticipantCohortAnnotation:
    type: object
    required:
      - cohortReviewId
      - participantId
    properties:
      annotationId:
        type: integer
        format: int64
        description: participant annotation id.
      cohortAnnotationDefinitionId:
        type: integer
        format: int64
        description: annotation definition id.
      cohortReviewId:
        type: integer
        format: int64
        description: the cohort reivew id.
      participantId:
        type: integer
        format: int64
        description: the participant id.
      annotationValueString:
        type: string
        description: The Value of the annotation if the AnnotationType is STRING
      annotationValueEnum:
        type: string
        description: The option chosen for the annotation if the AnnotationType is ENUM
      annotationValueDate:
        type: string
        description: The Value of the annotation if the AnnotationType is DATE
      annotationValueBoolean:
        type: boolean
        description: The Value of the annotation if the AnnotationType is BOOLEAN
      annotationValueInteger:
        type: integer
        description: The Value of the annotation if the AnnotationType is INTEGER

  CohortAnnotationDefinitionListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/CohortAnnotationDefinition"

  ModifyCohortAnnotationDefinitionRequest:
    type: object
    required:
      - columnName
    properties:
      columnName:
        type: string
        description: the name of this annotation.

  ParticipantCohortAnnotationListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/ParticipantCohortAnnotation"

  ModifyParticipantCohortAnnotationRequest:
    type: object
    properties:
      valueString:
        type: string
        description: The Value of the annotation if the AnnotationType is STRING
      valueEnum:
        type: string
        description: The option chosen for the annotation if the AnnotationType is ENUM
      valueDate:
        type: string
        description: The Value of the annotation if the AnnotationType is DATE
      valueBoolean:
        type: boolean
        description: The Value of the annotation if the AnnotationType is BOOLEAN
      valueInteger:
        type: integer
        description: The Value of the annotation if the AnnotationType is INTEGER

  BlockscoreIdVerificationStatus:
    type: string
    description: possible values indicating whether the user's ID has been verified
    enum: [UNVERIFIED, VERIFIED, REJECTED]


  # Mirrors notebooks definitions ###############################################
  ErrorReport:
    description: ''
    required:
      - source
      - message
      - causes
      - stackTrace
    properties:
      source:
        type: string
        description: service causing error
      message:
        type: string
        description: what went wrong
      exceptionClass:
        type: string
        description: class of exception thrown
      statusCode:
        type: integer
        description: HTTP status code
      causes:
        type: array
        description: errors triggering this one
        items:
          $ref: '#/definitions/ErrorReport'
      stackTrace:
        type: array
        description: stack trace
        items:
          $ref: '#/definitions/StackTraceElement'

  StackTraceElement:
    description: ''
    required:
      - className
      - methodName
      - fileName
      - lineNumber
    properties:
      className:
        type: string
        description: class name
      methodName:
        type: string
        description: method name
      fileName:
        type: string
        description: source file name
      lineNumber:
        type: integer
        description: line number

  # TODO: Clean up the client representation of the cluster
  Cluster:
    description: ''
    required:
      - clusterName
      - clusterNamespace
      - status
      - createdDate
      - labels
    properties:
      clusterName:
        type: string
        description: The user-supplied name for the cluster
      clusterNamespace:
        type: string
        description: The Google Project used to create the cluster
      status:
        type: string
        description: The current state of the cluster
      createdDate:
        type: string
        description: The date and time the cluster was created, in ISO-8601 format
      destroyedDate:
        type: string
        description: The date and time the cluster was destroyed, in ISO-8601 format
      labels:
        type: object
        description: The labels to be placed on the cluster. Of type Map[String,String]

  FileDetail:
    type: object
    required:
      - name
      - path
    properties:
      name:
        type: string
        description: File Name
      path:
        type: string
        description: The path is in format of gs://bucket-name/name

  ClusterListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/Cluster"

  UsernameTakenResponse:
    type: object
    required:
      - isTaken
    properties:
      isTaken:
        description: Boolean response to whether username is already taken.
        type: boolean
    example:
      isTaken: false

  WorkspaceResponse:
    type: object
    required:
      - workspace
      - accessLevel
    properties:
      workspace:
        $ref: '#/definitions/Workspace'
      accessLevel:
        $ref: '#/definitions/WorkspaceAccessLevel'

  IdVerificationListResponse:
    type: object
    required:
      - profileList
    properties:
      profileList:
        type: "array"
        items:
          $ref: "#/definitions/Profile"

  AuthDomainRequest:
    type: object
    required:
      - email
    properties:
      email:
        type: string

  AuditBigQueryResponse:
    type: object
    properties:
      numQueryIssues:
        type: integer
        format: int32
        description: >
          Number of queries issues against the Curated data repository which are
          flagged as possible audit issues. See logs/alerts for details.
