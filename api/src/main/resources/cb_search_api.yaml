swagger: '2.0'
info:
  version: "0.1.0"
  title: "AllOfUs Client API"
  description: |
    The API used by AllOfUs workbench clients (including both notebooks and our UI.)
    Endpoints in this API are intended to be used by researchers in notebooks; make sure they
    are extra-well documented and designed and that we do not break backwards compatibility!
  termsOfService: "http://www.pmi-ops.org/terms_of_service.html"
  contact:
    name: "developer_help@pmi-ops.org"
  license:
    name: "BSD"
host: "api.pmi-ops.org"
securityDefinitions:
  aou_oauth:
    x-aou-note: |
      Establish the fact that *some endpoints* are OAuth protected
      by defining an `aou_oauth` security mode, which we'll assing
      to any protected endpoints below.

      TODO: Vet/fix this token and/or authorization URL to work in practice.
      These are currently included simply to satisfy the Swagger specification,
      as this is not directly used to dictate oauth details (just used to
      annotate which methods require oauth).

      Establish the fact that all endpoints are protected: this annotation
      ensures that client libraries know to send bearer tokens when calling
    authorizationUrl: ""
    tokenUrl: ""
    type: oauth2
    flow: accessCode
schemes:
  - "https"
produces:
  - "application/json"
security:
  - aou_oauth: []

paths:

  # Cohort Builder #######################################################################
  /v1/cohortbuilder/{cdrVersionId}/criteria/menu:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: >
        Returns criteria menu options
      operationId: "findCriteriaMenuOptions"
      responses:
        200:
          description: A collection of criteria menu options
          schema:
            $ref: "#/definitions/CriteriaMenuOptionsListResponse"

  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search/term:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: >
        Returns a collection of criteria per search term
      operationId: "findCriteriaByDomainAndSearchTerm"
      parameters:
        - in: path
          name: domain
          type: string
          required: true
          description: the specific type of domain
        - in: query
          name: term
          type: string
          required: true
          description: the term to search for
        - in: query
          name: limit
          type: integer
          required: false
          description: number of criteria matches to return
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/{conceptId}:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: >
        Returns a collection of criteria per concept id
      operationId: "getStandardCriteriaByDomainAndConceptId"
      parameters:
        - in: path
          name: domain
          type: string
          required: true
          description: the specific type of domain
        - in: path
          name: conceptId
          type: integer
          format: int64
          required: true
          description: the concept id to search for
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: >
        Returns a collection of criteria by optional query parameters of the following:
        type, subtype, parentId and/or allChildren
      operationId: "getCriteriaBy"
      parameters:
        - in: path
          name: domain
          type: string
          required: true
          description: the specific domain of criteria to get
        - in: query
          name: type
          type: string
          required: false
          description: the specific type of criteria to get
        - in: query
          name: standard
          type: boolean
          default: false
          required: false
          description: reveals if source or standard
        - in: query
          name: parentId
          type: integer
          format: int64
          required: false
          description: fetch direct children of parentId
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: Returns matches on criteria table by code or name
      operationId: "getCriteriaAutoComplete"
      parameters:
        - in: path
          name: domain
          type: string
          required: true
          description: the specific domain of criteria to get
        - in: query
          name: type
          type: string
          required: false
          description: the type of the criteria were search for
        - in: query
          name: standard
          type: boolean
          default: false
          required: false
          description: the type of the criteria were search for
        - in: query
          name: term
          type: string
          required: true
          description: the term to search for
        - in: query
          name: limit
          type: integer
          required: false
          description: number of criteria matches to return
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  /v1/cohortbuilder/{cdrVersionId}/criteria/drug:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: Returns criteria tree matching value
      operationId: "getDrugBrandOrIngredientByValue"
      parameters:
        - in: query
          name: value
          type: string
          required: true
          description: matches name or code of drug
        - in: query
          name: limit
          type: integer
          required: false
          description: number of criteria matches to return
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  /v1/cohortbuilder/{cdrVersionId}/criteria/drug/ingredient/{conceptId}:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: "getDrugIngredientByConceptId"
      parameters:
        - in: path
          name: conceptId
          type: integer
          format: int64
          required: true
          description: conceptId of brand
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaListResponse"

  /v1/cohortbuilder/{cdrVersionId}/criteria/attribute/{conceptId}:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: "getCriteriaAttributeByConceptId"
      parameters:
        - in: path
          name: conceptId
          type: integer
          format: int64
          required: true
          description: conceptId of brand
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/CriteriaAttributeListResponse"

  /v1/cohortbuilder/{cdrVersionId}/search:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    post:
      tags:
        - cohortBuilder
      consumes:
        - application/json
      description: Searches for participants based on criteria, criteria specific parameters, and modifiers.
      operationId: "countParticipants"
      parameters:
        - in: body
          name: request
          description: object of parameters by which to perform the search
          schema:
            $ref: "#/definitions/SearchRequest"
          required: true
      responses:
        200:
          description: A count of subjects
          schema:
            type: integer
            format: int64

  /v1/cohortbuilder/{cdrVersionId}/chartinfo:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    post:
      tags:
        - cohortBuilder
      consumes:
        - application/json
      description: Searches for demographic info about subjects.
      operationId: "getDemoChartInfo"
      parameters:
        - in: body
          name: request
          description: object of parameters by which to perform the search
          schema:
            $ref: "#/definitions/SearchRequest"
          required: true
      responses:
        200:
          description: A collection of criteria
          schema:
            $ref: "#/definitions/DemoChartInfoListResponse"

  /v1/cohortbuilder/{cdrVersionId}/demographics:
    parameters:
      - $ref: '#/parameters/cdrVersionId'
    get:
      tags:
        - cohortBuilder
      description: Will return a list all values for gender, race and ethnicity.
      operationId: "getParticipantDemographics"
      responses:
        200:
          description: An object which contains a list of all values for gender, race and ethnicity.
          schema:
            $ref: "#/definitions/ParticipantDemographics"

definitions:

  CriteriaListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/Criteria"

  CriteriaMenuOptionsListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/CriteriaMenuOption"

  Criteria:
    type: object
    required:
      - id
      - parentId
      - type
      - name
      - group
      - selectable
      - hasAttributes
    properties:
      id:
        description: >
          Primary identifier which is unique within a CDR version. Value may
          not be stable across different CDR versions.
        type: integer
        format: int64
      parentId:
        description: >
          The parent id of the criteria. 0 if this is the root node of a
          criteria tree.
        type: integer
        format: int64
      type:
        description: >
          The tree type of this criteria, see TreeType. This will need to change to CriteriaType
          with the new implementation(change type below to ref CriteriaType)
        type: string
      subtype:
        description: >
          The subtype of this criteria, see TreeSubType. This will need to change to CriteriaSubType
          with the new implementation(change type below to ref CriteriaSubType)
        type: string
      code:
        description: >
          Code that identifies this criteria. In some vocabularies such as ICD9
          and ICD10, this code captures the tree hierarchy, e.g. '001.002.003'.
          Multiple criteria may exist for the same code within a CDR version if
          a given concept has multiple entries at different locations in the
          criteria tree (this is common in SNOMED).

          Criteria codes should generally be stable across CDR versions.
        type: string
      name:
        description: description of criteria
        type: string
      count:
        description: >
          Estimated number of participants in a particular CDR version which
          have a least one event matching this criteria.
        type: integer
        format: int64
      group:
        description: specifies if child or parent
        type: boolean
        default: false
      selectable:
        description: >
          Whether or not a client can specify this criteria in a search request.
          Selecting a group implies selecting all criteria contained within that
          group.
        type: boolean
        default: false
      conceptId:
        description: >
          The OMOP concept id associated with this criteria. May be null if this
          criteria does not match an OMOP concept, e.g. for intermediate nodes
          (groups) in the criteria tree. Concept ids are ids associated with a
          specific vocabulary item in the concept table and allow you to search
          for that code in its domain table. This may be a source or standard
          concept ID, depending on the tree for the criteria.

          Similar to a code, multiple criteria may reference the same concept
          ID due to multiple occurrences of a concept in the criteria tree. In
          other cases a criteria may share the concept ID of its parent, e.g. in
          the PPI tree a question and child answer share a concept id.

          Concept IDs should generally be stable across CDR versions.
        type: integer
        format: int64
      domainId:
        description: >
          # TODO: Remove this field.
          Deprecated. Clue to determine which OMOP tables to search, but these
          only exist for leaves in the tree. Parents don't have domain ids and
          concept id will be used in the case that a parent is selectable.
        type: string
      hasAttributes:
        description: >
          Whether this criteria has associated attributes which can be filtered
          by value during a search, for example a blood pressure measurement
          criteria might have an associated measurement value attribute.
        type: boolean
        default: false
      path:
        description: >
          A "." delimited path of all parent criteria IDs. Does not include the
          id for this criteria; root criteria nodes have a null path.
        type: string
      value:
        description: >
          A helper property to fully describe PPI/AGE data. Age holds the value of
          the age and for PPI it holds value as number or value as concept id.
        type: string
      hasHierarchy:
        description: Whether criteria is linked to a tree.
        type: boolean
        default: false
      hasAncestorData:
        description: Whether criteria needs lookup in the criteria_ancestor table.
        type: boolean
        default: false
      isStandard:
        description: Reveals if this criteria is standard or source.
        type: boolean
        default: false
  CriteriaMenuOption:
    type: object
    required:
      - domain
      - types
    properties:
      domain:
        description: The criteria domains that are searchable in Cohort Builder
        type: string
      types:
        type: array
        items:
          $ref: "#/definitions/CriteriaMenuSubOption"

  CriteriaMenuSubOption:
    type: object
    required:
      - type
      - standardFlags
    properties:
      type:
        description: The criteria types that are searchable in Cohort Builder
        type: string
      standardFlags:
        type: array
        items:
          $ref: "#/definitions/StandardFlag"

  StandardFlag:
    type: object
    required:
      - standard
    properties:
      standard:
        description: flag that determines standard or source
        type: boolean
        default: false
  CriteriaAttributeListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/CriteriaAttribute"

  CriteriaAttribute:
    type: object
    required:
      - id
      - valueAsConceptId
      - conceptName
      - type
      - estCount
    properties:
      id:
        description: id of the criteria
        type: integer
        format: int64
      valueAsConceptId:
        description: categorical concept id
        type: integer
        format: int64
      conceptName:
        description: name of concept
        type: string
      type:
        description: numerical or categorical
        type: string
      estCount:
        description: possible count
        type: string

  SearchRequest:
    description: >
      The SearchRequest describes the state of the Cohort Builder at any given moment.
      It contains two keys, `include` and `exclude`, each of which specifies an array
      of SearchGroups which are `AND`ed together, and which collectively specify which
      subjects to include or exclude from the cohort.
    type: object
    required:
      - includes
      - excludes
    properties:
      includes:
        type: array
        items:
          $ref: "#/definitions/SearchGroup"
      excludes:
        type: array
        items:
          $ref: "#/definitions/SearchGroup"
    example:
      typical:
        {
          include: [
            # SearchGroups
          [
            # SearchGroupItems
          {type: "ICD9", searchParameters: [{value: "Foo", domainId: "Bar"}, {value: "C"}]},
          {type: "ICD9", searchParameters: [{value: "Baz"}]}
          ], [
          {type: "ICD10", searchParameters: [{value: "Baz", domainId: "Bar"}], modifiers: []},
          ]
          ],
          exclude: []
        }
      minimum:
        {
          include: [[{type: "A Crit Type", searchParameters: [{value: "A value"}]}]]
        }

  SearchGroup:
    description: >
      A SearchGroup is a container for groups of criteria which are `OR`ed together.
    type: object
    required:
      - temporal
      - items
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      temporal:
        description: indicates if this search group relates to time
        type: boolean
        default: false
      mention:
        description: first, last or any mention(used in temporal realtionships)
        $ref: "#/definitions/TemporalMention"
      time:
        description: time frame between temporal items
        $ref: "#/definitions/TemporalTime"
      timeValue:
        description: time value between temporal items
        type: integer
        format: int64
      timeFrame:
        description: time increments(Day, Month or Year)
        type: string
      items:
        type: "array"
        items:
          $ref: "#/definitions/SearchGroupItem"

  SearchGroupItem:
    description: >
      A SearchGroupItem is the "line item" of the Cohort Builder.  It specifies
      a set of criteria of a given kind, possibly alongside a set of modifiers,
      the results of which are `OR`ed together with the other criteria in the
      group.
    type: object
    required:
      - type
      - searchParameters
      - modifiers
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      type:
        description: type of criteria
        type: string
      temporalGroup:
        description: temporal group that this item belongs to
        type: integer
      searchParameters:
        description: values that help search for subjects
        type: "array"
        items:
          $ref: "#/definitions/SearchParameter"
      modifiers:
        description: >
          Predicates to apply to the search parameters. Aggregate modifiers
          (i.e. NUM_OF_OCCURRENCES) are applied independently to each
          SearchParameter and furthermore, are applied independently to any
          group elements within those SearchParameters.

          Consider the following example query scenario.

          Example criteria tree:
          - parent
            - child1
            - child2

          Curated dataset contains 1 participant with 1 event each of concepts
          child1 and child2. Search request is made on "parent", with a modifier of
          {type: NUM_OF_OCCURRENCES, operands: [2]}.

          This does not match - the participant would need to have at least 2
          events of type child1 and/or of child2 and/or of parent (in the event
          that "parent" corresponds to a real concept in the data).

          Additionally, aggregate modifiers are applied secondarily to other
          modifiers. For example, combining the AGE_AT_EVENT with
          NUM_OF_OCCURRENCES - first we filter down all events by the age
          predicate, then we count occurrences.
        type: "array"
        items:
          $ref: "#/definitions/Modifier"
    example:
      {
        type: "ICD9",
        searchParameters: [
        { value: "E9293", domainId: "Condition", conceptId: null },
        { value: "E979-E979.9", domainId: null, conceptId: null }
        ],
        modifiers: [
        { name: "age_at_event", operator: "GTE >=", operands: [ "Arg1", "Arg2" ] }
        ]
      }

  SearchParameter:
    type: object
    required:
      - parameterId
      - name
      - domain
      - type
      - group
      - ancestorData
      - standard
      - attributes
    properties:
      parameterId:
        description: Unique within the cohort definition
        type: string
      name:
        description: The name of the generating Criterion
        type: string
      value:
        description: The Criteria code (or name if querying for Deceased)
        type: string
      domain:
        description: The omop domain that this criteria belongs to
        type: string
      type:
        description: The type of the generating Criterion
        type: string
      subtype:
        description: The subtype of the generating Criterion
        type: string
      group:
        description: Specifies if the generating Criterion is a leaf or node in its Criteria tree
        type: boolean
        default: false
      ancestorData:
        description: flag that determines if concept ids need to be looked up in the ancestor table
        type: boolean
        default: false
      standard:
        description: flag that determines standard or source
        type: boolean
        default: false
      conceptId:
        description: The concept id that maps to concept table, if any.
        type: integer
        format: int64
      attributes:
        description: >
          Attributes are extra inputs provided by users through the UX. Currently used by Demographics(Age),
          Measurements(Body Height, Weight.. etc) and Physical Measurements(Blood Pressure, Body Weight.. etc).
          Measurements and Physical Measurements have overlap in many areas such as body weight, but the
          difference is standard(measurements) and source(physical measurements).

           Example demo age search parameter:
           {
             "type": "DEMO",
             "searchParameters": [
               {
                 "type": "DEMO",
                 "subtype": "AGE",
                 "group": false,
                 "attributes": [{"name": "Age", "operator": "BETWEEN", "operands": [23, 31]}]
               }
             ],
             "modifiers": []
           }

           Example physical measurement blood pressure(Hypotensive (Systolic <= 90 / Diastolic <= 60))
           {
             "type": "PM",
             "searchParameters": [
               {
                 "type": "PM",
                 "subtype": "BP",
                 "group": false,
                 "attributes": [
                   {
                     "conceptId": 903118,
                     "name": "Systolic",
                     "operands": ["90"],
                     "operator":"LESS_THAN_OR_EQUAL_TO"
                   },
                   {
                     "conceptId": 903115,
                     "name": "Diastolic",
                     "operands": ["60"],
                      "operator": "LESS_THAN_OR_EQUAL_TO"
                    }
                  ]
                }
              ],
              "modifiers": []
            }
        type: "array"
        items:
          $ref: "#/definitions/Attribute"
    example:
      leafExample:
        value: "E9293"
        subtype: "AGE"
        domainId: "Condition"
      parentExample:
        value: "E979-E979.9"
        subtype: "BP_EHR"
        domainId: null

  Attribute:
    type: object
    required:
      - name
      - operands
    properties:
      name:
        description: the name of the attribute
        $ref: "#/definitions/AttrName"
      operator:
        $ref: "#/definitions/Operator"
      operands:
        type: "array"
        items:
          type: string
      conceptId:
        description: The concept id that maps to concept table.
        type: integer
        format: int64

    example:
      singleValued:
        operator: "GTE"
        operands: ["20"]
      multiValued:
        operator: "BETWEEN"
        operands: ["18", "35"]

  Modifier:
    type: object
    required:
      - name
      - operator
      - operands
    properties:
      name:
        description: name/type of modifier
        $ref: "#/definitions/ModifierType"
      operator:
        description: Machine name of the operator
        $ref: "#/definitions/Operator"
      operands:
        type: "array"
        items:
          type: string
    example:
      singleValued:
        name: "AGE_AT_EVENT"
        operator: "GREATER_THAN_OR_EQUAL_TO"
        operands: ["20"]

  ModifierType:
    type: string
    description: possible types of modifiers
    enum: [AGE_AT_EVENT, NUM_OF_OCCURRENCES, EVENT_DATE, ENCOUNTERS]

  CriteriaType:
    type: string
    description: possible criteria types
    enum: [AGE, ATC, BRAND, CPT4, DECEASED, ETHNICITY, GENDER, HCPCS, ICD10CM, ICD10PCS, ICD9CM, ICD9Proc, LOINC, PPI, RACE, RXNORM, SEX, SNOMED, VISIT]

  CriteriaSubType:
    type: string
    description: possible criteria types
    enum: [ANSWER, BMI, BP, CLIN, HC, HEIGHT, HR, HR-DETAIL, HR-IRR, HR-NOIRR, LAB, PREG, QUESTION, SURVEY, WC, WEIGHT, WHEEL]

  TemporalMention:
    type: string
    description: Mentions refer to occurrences of entry date per person
    enum: [ANY_MENTION, FIRST_MENTION, LAST_MENTION]

  TemporalTime:
    type: string
    description: time refers to the amount of time in reference to temporal mentions
    enum: [DURING_SAME_ENCOUNTER_AS, X_DAYS_BEFORE, X_DAYS_AFTER, WITHIN_X_DAYS_OF]

  AttrName:
    type: string
    description: Name that descibes the type of attribute
    enum: [ANY, NUM, CAT, AGE]

  DemoChartInfoListResponse:
    type: object
    required:
      - items
    properties:
      items:
        type: "array"
        items:
          $ref: "#/definitions/DemoChartInfo"

  DemoChartInfo:
    type: object
    required:
      - gender
      - race
      - ageRange
      - count
    properties:
      gender:
        description: gender of subject
        type: string
      race:
        description: race of subject
        type: string
      ageRange:
        description: age range of subject
        type: string
      count:
        description: number of subjects
        type: integer
        format: int64

  ParticipantDemographics:
    type: object
    required:
      - genderList
      - raceList
      - ethnicityList
    properties:
      genderList:
        type: "array"
        items:
          $ref: "#/definitions/ConceptIdName"
      raceList:
        type: "array"
        items:
          $ref: "#/definitions/ConceptIdName"
      ethnicityList:
        type: "array"
        items:
          $ref: "#/definitions/ConceptIdName"

  ConceptIdName:
    type: object
    required:
      - conceptId
      - conceptName
    properties:
      conceptId:
        type: integer
        format: int64
      conceptName:
        type: string
