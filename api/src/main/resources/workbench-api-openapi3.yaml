openapi: 3.0.0
info:
  title: AllOfUs Workbench API
  description: The API for the AllOfUs workbench.
  contact:
    name: developer_help@pmi-ops.org
  version: '0.1.0'
servers:
- url: https://api.pmi-ops.org
  variables: {}
- url: https://fake-authorization-url.pmi-ops.org
  variables: {}
- url: https://fake-token-url.pmi-ops.org
  variables: {}
paths:
  /v1/account/submit-data-use-agreement:
    post:
      tags:
      - profile
      summary: submitDataUseAgreement
      description: Submits consent to the data use agreement for researchers.
      operationId: submitDataUseAgreement
      parameters:
      - name: dataUseAgreementSignedVersion
        in: query
        description: Version \# of the Data Use Agreement that was signed.
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: initials
        in: query
        description: Initials of the user on the form.
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: The user's profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      deprecated: false
  /v1/account/submit-demographic-survey:
    post:
      tags:
      - profile
      summary: submitDemographicsSurvey
      description: Submits demographic survey responses.
      operationId: submitDemographicsSurvey
      parameters: []
      responses:
        200:
          description: The user's profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      deprecated: false
  /v1/account/sync-era-commons-status:
    post:
      tags:
      - profile
      summary: syncEraCommonsStatus
      description: Retrieves and stores the current user's NIH / eRA Commons linkage status, fetched via the FireCloud API.
      operationId: syncEraCommonsStatus
      parameters: []
      responses:
        200:
          description: The user's profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/account/sync-training-status:
    post:
      tags:
      - profile
      summary: syncComplianceTrainingStatus
      description: Retrieves moodleId(either from DB or call from Moodle API) and gets Training status on the basis of that
      operationId: syncComplianceTrainingStatus
      parameters: []
      responses:
        200:
          description: The user's profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/account/sync-two-factor-auth-status:
    post:
      tags:
      - profile
      summary: syncTwoFactorAuthStatus
      description: Syncs a user's 2FA status from google
      operationId: syncTwoFactorAuthStatus
      parameters: []
      responses:
        200:
          description: The user's profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/admin/unsafe-self-bypass-access-requirement:
    post:
      tags:
      - profile
      summary: unsafeSelfBypassAccessRequirement
      description: >
        Updates the given user to bypass the request access requirement
      operationId: unsafeSelfBypassAccessRequirement
      parameters: []
      requestBody:
        description: Whether the requirement should be bypassed or not. Defaults to true, so an empty body  will cause the requirement to be bypassed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessBypassRequest'
        required: false
      responses:
        200:
          description: success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: No module exists with name submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Self bypass is disallowed in this environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/admin/users/list:
    get:
      tags:
      - profile
      summary: getAllUsers
      description: >
        Returns a list of profiles for users to be reviewed. Requires ACCESS_CONTROL_ADMIN authority.
      operationId: getAllUsers
      parameters: []
      responses:
        200:
          description: A list of users
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/admin/users/{userId}:
    get:
      tags:
      - profile
      summary: getUser
      description: >
        Returns a user's profile for review.  Requires ACCESS_CONTROL_ADMIN authority.
      operationId: getUser
      parameters:
      - name: userId
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A user's profile
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/admin/users/{userId}/bypass-access-requirement:
    post:
      tags:
      - profile
      summary: bypassAccessRequirement
      description: >
        Updates the given user to bypass the request access requirement, e.g. "eraCommons", or "twoFactorAuth"
      operationId: bypassAccessRequirement
      parameters:
      - name: userId
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: Whether the requirement should be bypassed or not. Defaults to true, so an empty body  will cause the requirement to be bypassed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessBypassRequest'
        required: false
      responses:
        200:
          description: success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: No module exists with name submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/beta-access:
    post:
      tags:
      - profile
      summary: requestBetaAccess
      description: Request betaAccess.
      operationId: requestBetaAccess
      parameters: []
      responses:
        200:
          description: The user's profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      deprecated: false
  /v1/billingProjects:
    get:
      tags:
      - profile
      summary: getBillingProjects
      description: List billing projects for a user
      operationId: getBillingProjects
      parameters: []
      responses:
        200:
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BillingProjectMembership'
                description: OK
        404:
          description: User Not Found
        500:
          description: Internal Server Error
      deprecated: false
  /v1/google-account:
    post:
      tags:
      - profile
      summary: createAccount
      description: Creates an account in the researchallofus.org domain.
      operationId: createAccount
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: false
      responses:
        200:
          description: Account created successfully.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Error occurred while creating account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/invitation-key-verification:
    post:
      tags:
      - profile
      summary: invitationKeyVerification
      description: Verifies invitation key.
      operationId: invitationKeyVerification
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationVerificationRequest'
        required: false
      responses:
        200:
          description: Invitation Key verified.
          headers: {}
        400:
          description: Error occurred while verifying Invitation Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/is-username-taken:
    get:
      tags:
      - profile
      summary: isUsernameTaken
      description: Checks to see if the given username is not available.
      operationId: isUsernameTaken
      parameters:
      - name: username
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: The answer.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameTakenResponse'
      deprecated: false
      security: []
  /v1/page-visits:
    post:
      tags:
      - profile
      summary: updatePageVisits
      description: Updates a users page visits
      operationId: updatePageVisits
      parameters: []
      requestBody:
        description: the users pageVisits
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageVisit'
        required: false
      responses:
        200:
          description: The user's profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/profile:
    delete:
      tags:
      - profile
      summary: deleteProfile
      description: Deletes the user's profile and gsuite account, does not clean up in firecloud.
      operationId: deleteProfile
      parameters: []
      responses:
        204:
          description: Request Received.
          headers: {}
      deprecated: false
    get:
      tags:
      - profile
      summary: getMe
      description: Returns the user's profile information
      operationId: getMe
      parameters: []
      responses:
        200:
          description: The user's profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      deprecated: false
    patch:
      tags:
      - profile
      summary: updateProfile
      description: Updates a users profile
      operationId: updateProfile
      parameters: []
      requestBody:
        description: the new profile to use
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: false
      responses:
        204:
          description: Request received.
          headers: {}
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/resend-welcome-email:
    post:
      tags:
      - profile
      summary: resendWelcomeEmail
      description: Resend welcome email
      operationId: resendWelcomeEmail
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendWelcomeEmailRequest'
        required: false
      responses:
        200:
          description: Welcome Email sent.
          headers: {}
        500:
          description: Internal Server Error
      deprecated: false
      security: []
  /v1/update-contact-email:
    post:
      tags:
      - profile
      summary: updateContactEmail
      description: Only for accounts that have not logged in yet, update contact email.
      operationId: updateContactEmail
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactEmailRequest'
        required: false
      responses:
        200:
          description: Contact Email Updated
          headers: {}
        400:
          description: Invalid contact email address
        403:
          description: Unable to process this request
        500:
          description: Internal Server Error
      deprecated: false
      security: []
  /v1/update-nih-token:
    post:
      tags:
      - profile
      summary: updateNihToken
      description: Updates a users NIH token
      operationId: updateNihToken
      parameters: []
      requestBody:
        description: the token retrieved from NIH
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NihToken'
        required: false
      responses:
        200:
          description: The user's updated profile.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/admin/clusters/updateConfig:
    post:
      tags:
      - cluster
      summary: updateClusterConfig
      description: >
        Clusters are created with a default machine configuration. Setting this override changes that configuration for subsequent cluster creations. This change only takes effect after a new cluster creation, e.g. due to standard cluster expiration (~2w) or via manual reset. Requires DEVELOPER authority.
      operationId: updateClusterConfig
      parameters: []
      requestBody:
        description: Cluster config update request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterConfigRequest'
        required: false
      responses:
        200:
          description: success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
  /v1/clusters/{billingProjectId}/{workspaceFirecloudName}:
    get:
      tags:
      - cluster
      summary: listClusters
      description: >
        Returns the clusters available to the current user in the given billing project. Currently there is a single default cluster supported per billing project and this cluster should always either exist or be in the process of being initialized. In a future where researchers have more control over cluster creation, this endpoint would be extended to return all clusters.
      operationId: listClusters
      parameters:
      - name: billingProjectId
        in: path
        description: The unique identifier of the Google Billing Project containing the clusters
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceFirecloudName
        in: path
        description: The firecloudName of the workspace whose notebook we're looking at
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: Available clusters
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterListResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/clusters/{clusterNamespace}/{clusterName}:
    delete:
      tags:
      - cluster
      summary: deleteCluster
      description: Delete a cluster by name.
      operationId: deleteCluster
      parameters:
      - name: clusterNamespace
        in: path
        description: clusterNamespace
        required: true
        style: simple
        schema:
          type: string
      - name: clusterName
        in: path
        description: clusterName
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: Deletion success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/clusters/{clusterNamespace}/{clusterName}/localize:
    post:
      tags:
      - cluster
      summary: localize
      description: Localize notebook files to the corresponding notebook cluster.
      operationId: localize
      parameters:
      - name: clusterNamespace
        in: path
        description: clusterNamespace
        required: true
        style: simple
        schema:
          type: string
      - name: clusterName
        in: path
        description: clusterName
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: Localization request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterLocalizeRequest'
        required: false
      responses:
        200:
          description: Success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterLocalizeResponse'
        404:
          description: Cluster or Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/admin/workspaces/review:
    get:
      tags:
      - workspaces
      summary: getWorkspacesForReview
      description: >
        Returns workspaces that need research purpose review. Requires REVIEW_RESEARCH_PURPOSE authority.
      operationId: getWorkspacesForReview
      parameters: []
      responses:
        200:
          description: A list of workspaces
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceListResponse'
      deprecated: false
  /v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/review:
    post:
      tags:
      - workspaces
      summary: reviewWorkspace
      description: Sets a research purpose review result.
      operationId: reviewWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: result of the research purpose review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResearchPurposeReviewRequest'
        required: false
      responses:
        200:
          description: success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
  /v1/workspaces:
    get:
      tags:
      - workspaces
      summary: getWorkspaces
      description: Returns all workspaces that a user has access to
      operationId: getWorkspaces
      parameters: []
      responses:
        200:
          description: A list of workspace definitions.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponseListResponse'
      deprecated: false
    post:
      tags:
      - workspaces
      summary: createWorkspace
      description: Creates a workspace
      operationId: createWorkspace
      parameters: []
      requestBody:
        description: workspace definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: false
      responses:
        200:
          description: The workspace that was created.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
      deprecated: false
  /v1/workspaces/published:
    get:
      tags:
      - workspaces
      summary: getPublishedWorkspaces
      description: Returns a list of published workspaces
      operationId: getPublishedWorkspaces
      parameters: []
      responses:
        200:
          description: A list of workspace definitions.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponseListResponse'
      deprecated: false
  /v1/workspaces/user-recent-workspaces:
    get:
      tags:
      - workspaces
      summary: getUserRecentWorkspaces
      description: Returns the workspaces edited by the user in descending order of update time
      operationId: getUserRecentWorkspaces
      parameters: []
      responses:
        200:
          description: A list of workspaces order by last-updated time in descending order
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecentWorkspace'
                description: A list of workspaces order by last-updated time in descending order
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}:
    delete:
      tags:
      - workspaces
      summary: deleteWorkspace
      description: Deletes the workspace definition with the specified ID and namespace
      operationId: deleteWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        202:
          description: Workspace deletion request accepted
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
    get:
      tags:
      - workspaces
      summary: getWorkspace
      description: Returns the workspace definition with the specified ID and namespace
      operationId: getWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: A workspace response containing workspace and access level
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponse'
      deprecated: false
    patch:
      tags:
      - workspaces
      summary: updateWorkspace
      description: >
        Modifies the workspace definition with the specified ID and namespace; fields that are omitted will not be modified
      operationId: updateWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: workspace definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
        required: false
      responses:
        200:
          description: The updated workspace definition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/duplicate:
    post:
      tags:
      - workspaces
      summary: cloneWorkspace
      description: >
        Duplicate an existing workspace, with given modifications to workspace metadata. Caller will own the newly duplicated workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be duplicated:
          - the associated Firecloud workspace
          - cohorts, along with reviews and annotations
          - notebooks located in the default notebook directory for this workspace
      operationId: cloneWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneWorkspaceRequest'
        required: false
      responses:
        200:
          description: Successful duplicate response
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneWorkspaceResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebook-list:
    get:
      tags:
      - workspaces
      summary: getNoteBookList
      description: >
        Returns list of name and path of python files from google bucket, directory notebook.
      operationId: getNoteBookList
      parameters:
      - name: workspaceNamespace
        in: path
        description: workspaceNamespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: workspaceId
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: List of files
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDetail'
                description: List of files
        404:
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/rename:
    post:
      tags:
      - workspaces
      summary: renameNotebook
      description: Renames specified notebook
      operationId: renameNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: new name for notebook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotebookRename'
        required: true
      responses:
        200:
          description: Successful rename
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/copy:
    post:
      tags:
      - workspaces
      summary: copyNotebook
      description: Copy specified notebook in path to specified workspace in body
      operationId: copyNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: notebookName
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyRequest'
        required: true
      responses:
        200:
          description: Successful copy
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/delete:
    delete:
      tags:
      - workspaces
      summary: deleteNotebook
      description: Deletes specified notebook
      operationId: deleteNotebook
      parameters:
      - name: notebookName
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: Successful delete
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/duplicate:
    post:
      tags:
      - workspaces
      summary: cloneNotebook
      description: Duplicates specified notebook
      operationId: cloneNotebook
      parameters:
      - name: notebookName
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: Successful duplicate
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/lockingMetadata:
    get:
      tags:
      - workspaces
      summary: getNotebookLockingMetadata
      description: >
        Get the locking metadata for a notebook, if available.  If the notebook is not locked

        (e.g. at first creation) this may be empty.  Additionally, the caller of this endpoint

        may not have the appropriate permissions to determine who is locking this notebook.

        When this is the case, the lastLockedBy field is set to UNKNOWN.
      operationId: getNotebookLockingMetadata
      parameters:
      - name: notebookName
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: The locking metadata fields for the notebook
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotebookLockingMetadataResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/readonly:
    post:
      tags:
      - workspaces
      summary: readOnlyNotebook
      description: Get the HTML for a read only view of the notebook
      operationId: readOnlyNotebook
      parameters:
      - name: notebookName
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: HTML Read Only version of the notebook
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyNotebookResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/publish:
    post:
      tags:
      - workspaces
      summary: publishWorkspace
      description: >
        Makes a workspace public to all AoU registered users. Requires FEATURED_WORKSPACE_ADMIN authority.
      operationId: publishWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/share:
    post:
      tags:
      - workspaces
      summary: shareWorkspace
      description: >
        Shares a workspace with the given users and permissions. Note that the entire ACL must be provided to this method (including all existing users and roles), not just the additional roles desired. Clients should first fetch existing ACLs via the getFirecloudWorkspaceUserRoles method, make any changes desired, then pass the final list to this method.
      operationId: shareWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: users to share the workspace with
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareWorkspaceRequest'
        required: false
      responses:
        200:
          description: Successful share response
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUserRolesResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/unpublish:
    post:
      tags:
      - workspaces
      summary: unpublishWorkspace
      description: >
        Makes a workspace public to all AoU registered users. Requires FEATURED_WORKSPACE_ADMIN authority.
      operationId: unpublishWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: success
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-workspaces/update:
    post:
      tags:
      - workspaces
      summary: updateRecentWorkspaces
      description: Add/update user recent workspaces
      operationId: updateRecentWorkspaces
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: Successfully added/updated
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecentWorkspace'
                description: Successfully added/updated
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/userRoles:
    get:
      tags:
      - workspaces
      summary: getFirecloudWorkspaceUserRoles
      description: Returns the user roles for all collaborators on a workspace
      operationId: getFirecloudWorkspaceUserRoles
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: A list of workspace collaborators
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUserRolesResponse'
      deprecated: false
  /v1/auth-domain/users:
    post:
      tags:
      - authDomain
      summary: updateUserDisabledStatus
      description: enable/disable a user to an auth domain if you have ID verification authority
      operationId: updateUserDisabledStatus
      parameters: []
      requestBody:
        description: Request containing user email to update and a disabled status to update the user to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDisabledRequest'
        required: false
      responses:
        204:
          description: Successfully Updated User In Group
          headers: {}
        403:
          description: You must be an admin of this group in order to enable/disable members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: FireCloud Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/auth-domain/{groupName}:
    post:
      tags:
      - authDomain
      summary: createAuthDomain
      description: This endpoint will create the registered auth domain.
      operationId: createAuthDomain
      parameters:
      - name: groupName
        in: path
        description: groupName
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: Successfully created group
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
  /v1/cdrVersionId/{cdrVersionId}/domain/{domain}/domainValue/{domainValue}/dataDictionaryEntry:
    get:
      tags:
      - dataSet
      summary: getDataDictionaryEntry
      operationId: getDataDictionaryEntry
      parameters:
      - name: cdrVersionId
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: domain
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      - name: domainValue
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: Detailed definition of a given domain value for the specified CDR Version
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataDictionaryEntry'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/generateCode/{kernelType}:
    post:
      tags:
      - dataSet
      summary: generateCode
      description: >
        Given a Data Set, return the SQL query built from it.
      operationId: generateCode
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: kernelType
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetRequest'
        required: true
      responses:
        200:
          description: >
            A SQL query for each domain in the Data Set
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetCodeResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/preview:
    post:
      tags:
      - dataSet
      summary: previewDataSetByDomain
      description: >
        Preview data set
      operationId: previewDataSetByDomain
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetPreviewRequest'
        required: true
      responses:
        200:
          description: >
            A SQL query for each domain in the Data Set
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetPreviewResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/data-sets:
    get:
      tags:
      - dataSet
      summary: getDataSetsInWorkspace
      description: Returns all data sets in a workspace
      operationId: getDataSetsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: A list of data sets.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetListResponse'
      deprecated: false
    post:
      tags:
      - dataSet
      summary: createDataSet
      description: >
        Creates Data Set
      operationId: createDataSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetRequest'
        required: true
      responses:
        200:
          description: Data set has been created successfully
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        400:
          description: Invalid data set request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Data Set with the same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/{workspaceNamespace}/{workspaceId}/data-set/exportToNotebook:
    post:
      tags:
      - dataSet
      summary: exportToNotebook
      description: >
        Exports a data set query to a notebook
      operationId: exportToNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetExportRequest'
        required: true
      responses:
        200:
          description: Data set has been exported correctly
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: Invalid data set request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/{workspaceNamespace}/{workspaceId}/data-set/markDirty:
    post:
      tags:
      - dataSet
      summary: markDirty
      operationId: markDirty
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkDataSetRequest'
        required: false
      responses:
        200:
          description: Mark all dataset with cohort/concept id as dirty
          headers: {}
          content:
            text/plain:
              schema:
                type: boolean
                description: Mark all dataset with cohort/concept id as dirty
                example: false
              example: false
      deprecated: false
  /v1/{workspaceNamespace}/{workspaceId}/data-sets/dataSetByResourceId:
    get:
      tags:
      - dataSet
      summary: getDataSetByResourceId
      operationId: getDataSetByResourceId
      parameters:
      - name: resourceType
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: id
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: A list of data sets containg cohort/concept Id passed.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetListResponse'
      deprecated: false
  /v1/{workspaceNamespace}/{workspaceId}/data-sets/{dataSetId}:
    delete:
      tags:
      - dataSet
      summary: deleteDataSet
      description: Deletes the data set with the specified ID
      operationId: deleteDataSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: dataSetId
        in: path
        description: Data set ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ACCEPTED
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
    get:
      tags:
      - dataSet
      summary: getDataSet
      operationId: getDataSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: dataSetId
        in: path
        description: Data set ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: The data set with the specified ID
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
      deprecated: false
    patch:
      tags:
      - dataSet
      summary: updateDataSet
      operationId: updateDataSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: dataSetId
        in: path
        description: Data set ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: data set definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetRequest'
        required: false
      responses:
        200:
          description: The updated data set.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        409:
          description: Data Set with the same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/cdrVersions:
    get:
      tags:
      - cdrVersions
      summary: getCdrVersions
      description: Returns all curated data repository (CDR) versions that the user has access to
      operationId: getCdrVersions
      parameters: []
      responses:
        200:
          description: A list of CDR versions.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdrVersionListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/chartinfo:
    post:
      tags:
      - cohortBuilder
      summary: getDemoChartInfo
      description: Searches for demographic info about subjects.
      operationId: getDemoChartInfo
      parameters:
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: object of parameters by which to perform the search
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        200:
          description: A collection of criteria
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoChartInfoListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/criteria/attribute/{conceptId}:
    get:
      tags:
      - cohortBuilder
      summary: getCriteriaAttributeByConceptId
      description: Returns criteria tree with the specified name
      operationId: getCriteriaAttributeByConceptId
      parameters:
      - name: conceptId
        in: path
        description: conceptId of brand
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaAttributeListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/criteria/drug:
    get:
      tags:
      - cohortBuilder
      summary: getDrugBrandOrIngredientByValue
      description: Returns criteria tree matching value
      operationId: getDrugBrandOrIngredientByValue
      parameters:
      - name: value
        in: query
        description: matches name or code of drug
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: limit
        in: query
        description: number of criteria matches to return
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/criteria/drug/ingredient/{conceptId}:
    get:
      tags:
      - cohortBuilder
      summary: getDrugIngredientByConceptId
      description: Returns criteria tree with the specified name
      operationId: getDrugIngredientByConceptId
      parameters:
      - name: conceptId
        in: path
        description: conceptId of brand
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/criteria/menu:
    get:
      tags:
      - cohortBuilder
      summary: findCriteriaMenuOptions
      description: >
        Returns criteria menu options
      operationId: findCriteriaMenuOptions
      parameters:
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria menu options
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaMenuOptionsListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}:
    get:
      tags:
      - cohortBuilder
      summary: getCriteriaBy
      description: >
        Returns a collection of criteria by optional query parameters of the following: type, subtype, parentId and/or allChildren
      operationId: getCriteriaBy
      parameters:
      - name: domain
        in: path
        description: the specific domain of criteria to get
        required: true
        style: simple
        schema:
          type: string
      - name: type
        in: query
        description: the specific type of criteria to get
        style: form
        explode: true
        schema:
          type: string
      - name: standard
        in: query
        description: reveals if source or standard
        style: form
        explode: true
        schema:
          type: boolean
          default: false
          example: false
      - name: parentId
        in: query
        description: fetch direct children of parentId
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search:
    get:
      tags:
      - cohortBuilder
      summary: getCriteriaAutoComplete
      description: Returns matches on criteria table by code or name
      operationId: getCriteriaAutoComplete
      parameters:
      - name: domain
        in: path
        description: the specific domain of criteria to get
        required: true
        style: simple
        schema:
          type: string
      - name: type
        in: query
        description: the type of the criteria were search for
        style: form
        explode: true
        schema:
          type: string
      - name: standard
        in: query
        description: the type of the criteria were search for
        style: form
        explode: true
        schema:
          type: boolean
          default: false
          example: false
      - name: term
        in: query
        description: the term to search for
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: limit
        in: query
        description: number of criteria matches to return
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search/term:
    get:
      tags:
      - cohortBuilder
      summary: findCriteriaByDomainAndSearchTerm
      description: >
        Returns a collection of criteria per search term
      operationId: findCriteriaByDomainAndSearchTerm
      parameters:
      - name: domain
        in: path
        description: the specific type of domain
        required: true
        style: simple
        schema:
          type: string
      - name: term
        in: query
        description: the term to search for
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: limit
        in: query
        description: number of criteria matches to return
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/{conceptId}:
    get:
      tags:
      - cohortBuilder
      summary: getStandardCriteriaByDomainAndConceptId
      description: >
        Returns a collection of criteria per concept id
      operationId: getStandardCriteriaByDomainAndConceptId
      parameters:
      - name: domain
        in: path
        description: the specific type of domain
        required: true
        style: simple
        schema:
          type: string
      - name: conceptId
        in: path
        description: the concept id to search for
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/demographics:
    get:
      tags:
      - cohortBuilder
      summary: getParticipantDemographics
      description: Will return a list all values for gender, race and ethnicity.
      operationId: getParticipantDemographics
      parameters:
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: An object which contains a list of all values for gender, race and ethnicity.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantDemographics'
      deprecated: false
  /v1/cohortbuilder/{cdrVersionId}/search:
    post:
      tags:
      - cohortBuilder
      summary: countParticipants
      description: Searches for participants based on criteria, criteria specific parameters, and modifiers.
      operationId: countParticipants
      parameters:
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: object of parameters by which to perform the search
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        200:
          description: A count of subjects
          headers: {}
          content:
            text/plain:
              schema:
                type: integer
                description: A count of subjects
                format: int64
      deprecated: false
  /v1/config:
    get:
      tags:
      - config
      summary: getConfig
      description: Returns some server configuration data.
      operationId: getConfig
      parameters: []
      responses:
        200:
          description: Configuration data
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
      deprecated: false
      security: []
  /v1/cron/auditBigQuery:
    get:
      tags:
      - offlineAudit
      summary: auditBigQuery
      description: >
        Endpoint meant to be called offline to trigger BigQuery auditing; may be slow to execute. Only executable via App Engine cronjob.
      operationId: auditBigQuery
      parameters: []
      responses:
        200:
          description: Audit was successful.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditBigQueryResponse'
      deprecated: false
      security: []
  /v1/cron/billingProjectGarbageCollection:
    get:
      tags:
      - offlineBilling
      summary: billingProjectGarbageCollection
      description: Trigger a bulk transfer of ownership of billing projects associated with deleted workspaces
      operationId: billingProjectGarbageCollection
      parameters: []
      responses:
        204:
          description: Billing Project Garbage Collection was successful.
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/bufferBillingProjects:
    get:
      tags:
      - offlineBilling
      summary: bufferBillingProjects
      description: If the AoU Billing Project buffer is not full, refill with one or more billing projects.
      operationId: bufferBillingProjects
      parameters: []
      responses:
        204:
          description: No Error
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/checkFreeTierBillingUsage:
    get:
      tags:
      - offlineBilling
      summary: checkFreeTierBillingUsage
      description: Find and alert users that have exceeded their free tier billing usage
      operationId: checkFreeTierBillingUsage
      parameters: []
      responses:
        204:
          description: No Error
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/cleanBillingBuffer:
    get:
      tags:
      - offlineBilling
      summary: cleanBillingBuffer
      description: Find BillingProjectBufferEntries that have failed during the creation or assignment step and set their statuses to ERROR
      operationId: cleanBillingBuffer
      parameters: []
      responses:
        204:
          description: No Error
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/syncBillingProjectStatus:
    get:
      tags:
      - offlineBilling
      summary: syncBillingProjectStatus
      description: Fetch a BillingProjectBufferEntry that is in the CREATING state and check its status on Firecloud
      operationId: syncBillingProjectStatus
      parameters: []
      responses:
        204:
          description: No Error
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/bulkAuditProjectAccess:
    get:
      tags:
      - offlineUser
      summary: bulkAuditProjectAccess
      description: Audits project access for all users
      operationId: bulkAuditProjectAccess
      parameters: []
      responses:
        204:
          description: All users' project access were audited.
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/bulkSyncComplianceTrainingStatus:
    get:
      tags:
      - offlineUser
      summary: bulkSyncComplianceTrainingStatus
      description: sync moodle badge/training status for all users.
      operationId: bulkSyncComplianceTrainingStatus
      parameters: []
      responses:
        204:
          description: The user table is updated with training status.
          headers: {}
        404:
          description: User not found while retrieving  badge.
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/bulkSyncEraCommonsStatus:
    get:
      tags:
      - offlineUser
      summary: bulkSyncEraCommonsStatus
      description: sync eRA Commons linkage status for all users.
      operationId: bulkSyncEraCommonsStatus
      parameters: []
      responses:
        204:
          description: All users' eRA Commons statuses were updated.
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/bulkSyncTwoFactorAuthStatus:
    get:
      tags:
      - offlineUser
      summary: bulkSyncTwoFactorAuthStatus
      description: sync 2FA status for all users
      operationId: bulkSyncTwoFactorAuthStatus
      parameters: []
      responses:
        204:
          description: All users' 2FA statuses were updated.
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/cron/checkClusters:
    get:
      tags:
      - offlineCluster
      summary: checkClusters
      description: >
        Endpoint meant to be called offline to trigger cluster checks and cleanup. Enforces upgrades for older cluster deployments. May be slow to execute. Only executable via App Engine cronjob.
      operationId: checkClusters
      parameters: []
      responses:
        200:
          description: Clusters were checked and handled successfully.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckClustersResponse'
      deprecated: false
      security: []
  /v1/cron/monitoring/updateGaugeMetrics:
    get:
      tags:
      - offlineMonitoring
      summary: updateGaugeMetrics
      description: Trigger recording of all gauge metrics
      operationId: updateGaugeMetrics
      parameters: []
      responses:
        204:
          description: No content
          headers: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      security: []
  /v1/featured-workspace-config:
    get:
      tags:
      - featured-workspaces-config
      summary: getFeaturedWorkspacesConfig
      description: Returns the featured workspaces config
      operationId: getFeaturedWorkspacesConfig
      parameters: []
      responses:
        200:
          description: List of featured workspaces
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturedWorkspacesConfigResponse'
      deprecated: false
      security: []
  /v1/monitoring/billingProjectBufferStatus:
    get:
      tags:
      - monitoring
      summary: getBillingProjectBufferStatus
      description: Return statistics about the billing buffer.
      operationId: getBillingProjectBufferStatus
      parameters: []
      responses:
        200:
          description: No Error
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProjectBufferStatus'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
  /v1/status:
    get:
      tags:
      - status
      summary: getStatus
      description: Returns the status of the various services and integrations
      operationId: getStatus
      parameters: []
      responses:
        200:
          description: A map of system name to status.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
      deprecated: false
      security: []
  /v1/status-alert:
    get:
      tags:
      - status-alert
      summary: getStatusAlert
      description: Returns status alert information if any exists.
      operationId: getStatusAlert
      parameters: []
      responses:
        200:
          description: >
            A status alert information object.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusAlert'
      deprecated: false
  /v1/user/{term}:
    get:
      tags:
      - user
      summary: user
      description: Returns user information matching search terms
      operationId: user
      parameters:
      - name: term
        in: path
        description: String to find in user's name or email address. Search is a case-insensitive substring match.
        required: true
        style: simple
        schema:
          type: string
      - name: pageToken
        in: query
        description: Pagination token retrieved from a previous call to user; used for retrieving additional pages of results.
        style: form
        explode: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: Maximum number of results to return in a response. Defaults to 10.
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: sortOrder
        in: query
        description: Sort order, either 'asc' or 'desc'. Defaults to 'asc' on the user's email.
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: The user information matching supplied search terms
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
      deprecated: false
  /v1/workspaces/user-recent-resources:
    get:
      tags:
      - userMetrics
      summary: getUserRecentResources
      description: Returns the resources accessed by user order by access time desc
      operationId: getUserRecentResources
      parameters: []
      responses:
        200:
          description: A list of resources order by last access time desc order
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecentResource'
                description: A list of resources order by last access time desc order
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-resources/delete:
    delete:
      tags:
      - userMetrics
      summary: deleteRecentResource
      description: Deletes entry from recent resource
      operationId: deleteRecentResource
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: request object for updating recent resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecentResourceRequest'
        required: true
      responses:
        200:
          description: Successfully deleted
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-resources/update:
    post:
      tags:
      - userMetrics
      summary: updateRecentResource
      description: Add/update user recent resource
      operationId: updateRecentResource
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: request object for updating recent resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecentResourceRequest'
        required: true
      responses:
        200:
          description: Successfully added/updated
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentResource'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohort-reviews:
    get:
      tags:
      - cohortReview
      summary: getCohortReviewsInWorkspace
      description: Returns all cohort reviews in a workspace
      operationId: getCohortReviewsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: A list of cohort definitions.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReviewListResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohort-reviews/{cohortReviewId}:
    delete:
      tags:
      - cohortReview
      summary: deleteCohortReview
      description: Deletes the cohort review with the specified ID
      operationId: deleteCohortReview
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: specifies which cohort review
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ACCEPTED
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
    patch:
      tags:
      - cohortReview
      summary: updateCohortReview
      description: >
        Modifies the cohort review with the specified ID; fields that are omitted will not be modified
      operationId: updateCohortReview
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: specifies which cohort review
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: cohort review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortReview'
        required: false
      responses:
        200:
          description: The updated cohort review
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReview'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}:
    post:
      tags:
      - cohortReview
      summary: createCohortReview
      description: >
        This endpoint will create an cohort review which is a participant cohort sample specified by the review size parameter.
      operationId: createCohortReview
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: cohort review creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
        required: true
      responses:
        200:
          description: A cohortReviewId and cohort count
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReview'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants:
    post:
      tags:
      - cohortReview
      summary: getParticipantCohortStatuses
      description: >
        Returns a collection of participants for the specified cohortId and cdrVersionId. This endpoint does pagination based on page, limit, order and column.
      operationId: getParticipantCohortStatuses
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: cdrVersionId
        in: path
        description: specifies which cdr version
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: request body for getting list of ParticipantCohortStatuses.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageFilterRequest'
        required: true
      responses:
        200:
          description: A collection of participants
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReview'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/charts/{domain}:
    get:
      tags:
      - cohortReview
      summary: getCohortChartData
      description: Returns a collection of CohortChartData for UI charting in cohort review.
      operationId: getCohortChartData
      parameters:
      - name: domain
        in: path
        description: specifies which domain the CohortChartData should belong to.
        required: true
        style: simple
        schema:
          type: string
      - name: limit
        in: query
        description: the limit search results to
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of CohortChartData
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortChartDataListResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}:
    get:
      tags:
      - cohortReview
      summary: getParticipantCohortStatus
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantCohortStatus
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: The ParticipantCohortStatus definition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortStatus'
      deprecated: false
    put:
      tags:
      - cohortReview
      summary: updateParticipantCohortStatus
      description: Modifies the ParticipantCohortStatus status
      operationId: updateParticipantCohortStatus
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: Contains the new review status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyCohortStatusRequest'
        required: false
      responses:
        200:
          description: The updated ParticipantCohortStatus definition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortStatus'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/annotations:
    get:
      tags:
      - cohortReview
      summary: getParticipantCohortAnnotations
      description: This endpoint will get a collection of ParticipantCohortAnnotations.
      operationId: getParticipantCohortAnnotations
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of ParticipantCohortAnnotation.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortAnnotationListResponse'
      deprecated: false
    post:
      tags:
      - cohortReview
      summary: createParticipantCohortAnnotation
      description: This endpoint will create a ParticipantCohortAnnotation.
      operationId: createParticipantCohortAnnotation
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: ParticipantCohortAnnotation creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantCohortAnnotation'
        required: true
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortAnnotation'
      deprecated: false
  ? /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/annotations/{annotationId}
  : delete:
      tags:
      - cohortReview
      summary: deleteParticipantCohortAnnotation
      description: Deletes the ParticipantCohortAnnotation with the specified ID
      operationId: deleteParticipantCohortAnnotation
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: annotationId
        in: path
        description: specifies which annotation
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ParticipantCohortAnnotation deletion request accepted
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
    put:
      tags:
      - cohortReview
      summary: updateParticipantCohortAnnotation
      description: This endpoint will modify a ParticipantCohortAnnotation.
      operationId: updateParticipantCohortAnnotation
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: annotationId
        in: path
        description: specifies which annotation
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: ParticipantCohortAnnotation modification request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyParticipantCohortAnnotationRequest'
        required: true
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortAnnotation'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/charts/{domain}:
    get:
      tags:
      - cohortReview
      summary: getParticipantChartData
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantChartData
      parameters:
      - name: domain
        in: path
        description: specifies which domain the chart data should belong to.
        required: true
        style: simple
        schema:
          type: string
      - name: limit
        in: query
        description: the limit search results to
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: The Participant Chart data
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantChartDataListResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/data:
    post:
      tags:
      - cohortReview
      summary: getParticipantData
      description: >
        Returns a collection of participant data for the specified params based off the PageFilterRequest. This endpoint does pagination based on page, limit, order and column.
      operationId: getParticipantData
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: request body for getting list of participant data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageFilterRequest'
        required: true
      responses:
        200:
          description: A collection of ParticipantConditions.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantDataListResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/vocabularies:
    get:
      tags:
      - cohortReview
      summary: getVocabularies
      description: This endpoint will get a collection of OMOP vocabularies per cdrVersionId.
      operationId: getVocabularies
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of OMOP vocabularies.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VocabularyListResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts:
    get:
      tags:
      - cohorts
      summary: getCohortsInWorkspace
      description: Returns all cohort definitions in a workspace
      operationId: getCohortsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: A list of cohort definitions.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortListResponse'
      deprecated: false
    post:
      tags:
      - cohorts
      summary: createCohort
      description: Creates a cohort definition in a workspace.
      operationId: createCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: cohort definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cohort'
        required: false
      responses:
        200:
          description: The cohort definition that was created.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          description: Bad Request. Cohort name already exists
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/duplicate:
    post:
      tags:
      - cohorts
      summary: duplicateCohort
      description: Creates a duplicate of the cohort specified by cohortId
      operationId: duplicateCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: Duplicate Cohort Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateCohortRequest'
        required: false
      responses:
        200:
          description: The cohort definition that was created.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          description: Bad Request. Cohort name already exists
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}:
    delete:
      tags:
      - cohorts
      summary: deleteCohort
      description: Deletes the cohort definition with the specified ID
      operationId: deleteCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ACCEPTED
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
    get:
      tags:
      - cohorts
      summary: getCohort
      description: Returns the cohort definition with the specified ID
      operationId: getCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A cohort definition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
      deprecated: false
    patch:
      tags:
      - cohorts
      summary: updateCohort
      description: >
        Modifies the cohort definition with the specified ID; fields that are omitted will not be modified
      operationId: updateCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: cohort definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cohort'
        required: false
      responses:
        200:
          description: The updated cohort definition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/getCohortAnnotations:
    post:
      tags:
      - cohorts
      summary: getCohortAnnotations
      description: >
        Retrieves annotations for a cohort in the workspace
      operationId: getCohortAnnotations
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: a request indicating what annotations to retrieve
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnnotationsRequest'
        required: false
      responses:
        200:
          description: the requested annotations
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationsResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/getDataTableQuery:
    post:
      tags:
      - cohorts
      summary: getDataTableQuery
      description: >
        Translates a data table specification into a SQL query to run against the CDR.
      operationId: getDataTableQuery
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: a query specification for a data table
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataTableSpecification'
        required: false
      responses:
        200:
          description: the query to run against the CDR to retrieve the data
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdrQuery'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort:
    post:
      tags:
      - cohorts
      summary: materializeCohort
      description: >
        Materializes a cohort for a given CDR version to specified output.
      operationId: materializeCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: cohort materialization request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterializeCohortRequest'
        required: false
      responses:
        200:
          description: The results of materializing the cohort
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterializeCohortResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions:
    get:
      tags:
      - cohortAnnotationDefinition
      summary: getCohortAnnotationDefinitions
      description: Returns a collection of CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinitions
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of CohortAnnotationDefinition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinitionListResponse'
      deprecated: false
    post:
      tags:
      - cohortAnnotationDefinition
      summary: createCohortAnnotationDefinition
      description: This endpoint will create a CohortAnnotationDefinition.
      operationId: createCohortAnnotationDefinition
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: CohortAnnotationDefinition creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnnotationDefinition'
        required: true
      responses:
        200:
          description: A CohortAnnotationDefinition.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}:
    delete:
      tags:
      - cohortAnnotationDefinition
      summary: deleteCohortAnnotationDefinition
      description: Deletes the CohortAnnotationDefinition with the specified ID
      operationId: deleteCohortAnnotationDefinition
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: annotationDefinitionId
        in: path
        description: specifies which CohortAnnotationDefinition.
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: CohortAnnotationDefinition deletion request accepted
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
    get:
      tags:
      - cohortAnnotationDefinition
      summary: getCohortAnnotationDefinition
      description: Returns a CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinition
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: annotationDefinitionId
        in: path
        description: specifies which CohortAnnotationDefinition.
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A CohortAnnotationDefinition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
      deprecated: false
    put:
      tags:
      - cohortAnnotationDefinition
      summary: updateCohortAnnotationDefinition
      description: modify the CohortAnnotationDefinition.
      operationId: updateCohortAnnotationDefinition
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      - name: annotationDefinitionId
        in: path
        description: specifies which CohortAnnotationDefinition.
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: Contains the new CohortAnnotationDefinition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnnotationDefinition'
        required: false
      responses:
        200:
          description: The updated CohortAnnotationDefinition definition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets:
    get:
      tags:
      - conceptSets
      summary: getConceptSetsInWorkspace
      description: Returns all concept sets in a workspace
      operationId: getConceptSetsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: A list of concept sets.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSetListResponse'
      deprecated: false
    post:
      tags:
      - conceptSets
      summary: createConceptSet
      description: Creates a concept set in a workspace.
      operationId: createConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: create concept set request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConceptSetRequest'
        required: false
      responses:
        200:
          description: The concept set that was created.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}:
    delete:
      tags:
      - conceptSets
      summary: deleteConceptSet
      description: Deletes the concept set with the specified ID
      operationId: deleteConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ACCEPTED
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      deprecated: false
    get:
      tags:
      - conceptSets
      summary: getConceptSet
      description: Returns the concept set definition with the specified ID
      operationId: getConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A concept set definition
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      deprecated: false
    patch:
      tags:
      - conceptSets
      summary: updateConceptSet
      description: >
        Modifies the name or description of the concept set with the specified ID; fields that are omitted will not be modified
      operationId: updateConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: concept set definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConceptSet'
        required: false
      responses:
        200:
          description: The updated concept set.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/concepts:
    post:
      tags:
      - conceptSets
      summary: updateConceptSetConcepts
      description: >
        Adds or removes concepts from the concept set.
      operationId: updateConceptSetConcepts
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        style: simple
        schema:
          type: integer
          format: int64
      requestBody:
        description: update concept set request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConceptSetRequest'
        required: false
      responses:
        200:
          description: The updated concept set.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/copy:
    post:
      tags:
      - conceptSets
      summary: copyConceptSet
      description: Copy specified concept set in path to specified workspace in body
      operationId: copyConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyRequest'
        required: true
      responses:
        200:
          description: Successful copy
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/survey-concept-sets/{surveyName}:
    get:
      tags:
      - conceptSets
      summary: getSurveyConceptSetsInWorkspace
      description: Returns all survey concept sets in a workspace
      operationId: getSurveyConceptSetsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: surveyName
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: A list of concept sets of type surveys.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSetListResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/domainInfo:
    get:
      tags:
      - concepts
      summary: getDomainInfo
      description: >
        Returns information on the domains of data in the workspace's CDR version along with participant and concept counts
      operationId: getDomainInfo
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: information on the domains
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainInfoResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/domainValues/{domain}:
    get:
      tags:
      - concepts
      summary: getValuesFromDomain
      description: >
        Returns all column names/values for a given domain.
      operationId: getValuesFromDomain
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: domain
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: the values/column names in the domain.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainValuesResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/searchConcepts:
    post:
      tags:
      - concepts
      summary: searchConcepts
      description: >
        Searches for concepts in concept table by name, and optionally filter on domain, vocabulary IDs, or standard concept status. Uses the CDR version affiliated with the workspace specified in the path.
      operationId: searchConcepts
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      requestBody:
        description: concept search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchConceptsRequest'
        required: false
      responses:
        200:
          description: A collection of concepts
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptListResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/surveyAnswer:
    get:
      tags:
      - concepts
      summary: getSurveyAnswers
      description: >
        Returns with all the answer for survey Question
      operationId: getSurveyAnswers
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: questionConceptId
        in: query
        description: ''
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: List of Survey Details with Answer
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SurveyAnswerResponse'
                description: List of Survey Details with Answer
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/surveyInfo:
    get:
      tags:
      - concepts
      summary: getSurveyInfo
      description: >
        Returns survey information in the workspace's CDR version along with participant and question count
      operationId: getSurveyInfo
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: information about the surveys
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveysResponse'
      deprecated: false
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/{surveyName}/surveyQuestions:
    get:
      tags:
      - concepts
      summary: getSurveyQuestions
      description: >
        Returns survey questions and answers in the workspace's CDR version
      operationId: getSurveyQuestions
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        style: simple
        schema:
          type: string
      - name: workspaceId
        in: path
        description: The Workspace ID (a.k.a. the workspace's Firecloud name)
        required: true
        style: simple
        schema:
          type: string
      - name: surveyName
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: string
      responses:
        200:
          description: information about the surveys
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SurveyQuestionsResponse'
                description: information about the surveys
      deprecated: false
components:
  schemas:
    AcademicRole:
      title: AcademicRole
      enum:
      - UNDERGRADUATE
      - TRAINEE
      - FELLOW
      - EARLY_CAREER
      - NON_TENURE
      - MID_CAREER
      - LATE_CAREER
      - PROJECT_PERSONNEL
      type: string
      example: UNDERGRADUATE
    AccessBypassRequest:
      title: AccessBypassRequest
      required:
      - isBypassed
      type: object
      properties:
        isBypassed:
          type: boolean
          example: false
        moduleName:
          $ref: '#/components/schemas/AccessModule'
    AccessModule:
      title: AccessModule
      enum:
      - DATA_USE_AGREEMENT
      - COMPLIANCE_TRAINING
      - BETA_ACCESS
      - ERA_COMMONS
      - TWO_FACTOR_AUTH
      type: string
      example: DATA_USE_AGREEMENT
    Address:
      title: Address
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        state:
          type: string
        streetAddress1:
          type: string
        streetAddress2:
          type: string
        zipCode:
          type: string
    AnnotationQuery:
      title: AnnotationQuery
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
          description: An array of names of annotations to retrieve about participants, or "review_status" for the cohort review status of the participant or "person_id" for the ID of the participant. Defaults to "person_id", "review_status", and the names of all defined annotations in the cohort review. This is only valid in combination with the use of cohortName above. Only data for participants in the cohort review will be returned; if no cohort review has been created, no results will be returned.
        orderBy:
          type: array
          items:
            type: string
          description: An array of names of annotations, or "review status" or "person_id", each one optionally enclosed in "DESCENDING()" for descending sort order. Specifies the order that results should be returned. Defaults to "person_id" (in ascending order). Annotations referenced in orderBy must also be present in columns.
      description: A specification for retrieving annotation values or review statuses entered for participants.
    AnnotationType:
      title: AnnotationType
      enum:
      - STRING
      - ENUM
      - DATE
      - BOOLEAN
      - INTEGER
      type: string
      description: possible values representing the type of annotation.
      example: STRING
    ArchivalStatus:
      title: ArchivalStatus
      enum:
      - LIVE
      - ARCHIVED
      type: string
      description: CDR archival status; archived CDRs cannot be used for new workspaces.
      example: LIVE
    AttrName:
      title: AttrName
      enum:
      - ANY
      - NUM
      - CAT
      - AGE
      type: string
      description: Name that descibes the type of attribute
      example: ANY
    Attribute:
      title: Attribute
      required:
      - name
      - operands
      type: object
      properties:
        conceptId:
          type: integer
          description: The concept id that maps to concept table.
          format: int64
        name:
          $ref: '#/components/schemas/AttrName'
        operands:
          type: array
          items:
            type: string
          description: ''
        operator:
          $ref: '#/components/schemas/Operator'
    AuditBigQueryResponse:
      title: AuditBigQueryResponse
      type: object
      properties:
        numQueryIssues:
          type: integer
          description: Number of queries issues against the Curated data repository which are flagged as possible audit issues. See logs/alerts for details.
          format: int32
    Authority:
      title: Authority
      enum:
      - REVIEW_RESEARCH_PURPOSE
      - DEVELOPER
      - ACCESS_CONTROL_ADMIN
      - FEATURED_WORKSPACE_ADMIN
      type: string
      description: actions a user can have authority/permission to perform
      example: REVIEW_RESEARCH_PURPOSE
    BillingAccountType:
      title: BillingAccountType
      enum:
      - FREE_TIER
      - USER_PROVIDED
      type: string
      description: Whether a billing project is provided by the Researcher Workbench as a Free Tier project subject to quota checks, or the project has a billing account provided by the user
      example: FREE_TIER
    BillingProjectBufferStatus:
      title: BillingProjectBufferStatus
      type: object
      properties:
        bufferSize:
          type: integer
          description: Current size of the billing buffer, i.e. the number of projects ready to be claimed.
          format: int64
    BillingProjectMembership:
      title: BillingProjectMembership
      required:
      - projectName
      - role
      - status
      type: object
      properties:
        projectName:
          type: string
          description: the name of the project
        role:
          type: string
          description: the role of the current user in the project
        status:
          $ref: '#/components/schemas/BillingProjectStatus'
    BillingProjectStatus:
      title: BillingProjectStatus
      enum:
      - none
      - pending
      - ready
      - error
      type: string
      description: Initialization status of a Firecloud billing project for use with Workbench.
      example: none
    BillingStatus:
      title: BillingStatus
      enum:
      - ACTIVE
      - INACTIVE
      type: string
      description: Is the billing account associated with this workspace available to incur costs?  For a free tier project, this indicates whether a user has an available balance in their quota.  For a user-provided billing account, this corresponds to whether payment is valid and up to date.
      example: ACTIVE
    CdrQuery:
      title: CdrQuery
      required:
      - bigqueryDataset
      - bigqueryProject
      - columns
      type: object
      properties:
        bigqueryDataset:
          type: string
          description: name of the CDR BigQuery dataset
        bigqueryProject:
          type: string
          description: name of the Google Cloud project containing the CDR dataset
        columns:
          type: array
          items:
            type: string
          description: An array of names to be used for the columns being returned by the query. (Note that related table aliases will be returned with '.' as a separator, whereas '__' is used in the SQL.) This will be populated even if sql is empty (i.e. there are no results.)
        configuration:
          type: object
          description: configuration for the BigQuery job (includes named parameters); you can pass this JSON dictionary in for the configuration when calling methods like pandas.read_gbq().
        sql:
          type: string
          description: Google SQL to use when querying the CDR. If empty, it means no participants can possibly match the data table specification, and an empty data table should be returned.
    CdrVersion:
      title: CdrVersion
      required:
      - cdrVersionId
      - creationTime
      - dataAccessLevel
      - name
      type: object
      properties:
        archivalStatus:
          $ref: '#/components/schemas/ArchivalStatus'
        cdrVersionId:
          type: string
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        dataAccessLevel:
          $ref: '#/components/schemas/DataAccessLevel'
        name:
          type: string
    CdrVersionListResponse:
      title: CdrVersionListResponse
      required:
      - defaultCdrVersionId
      - items
      type: object
      properties:
        defaultCdrVersionId:
          type: string
          description: ID of the CDR versions that should be used by the user by default
        items:
          type: array
          items:
            $ref: '#/components/schemas/CdrVersion'
          description: ''
    CheckClustersResponse:
      title: CheckClustersResponse
      type: object
      properties:
        clusterDeletionCount:
          type: integer
          description: Number of clusters deleted during the check.
          format: int32
    CloneWorkspaceRequest:
      title: CloneWorkspaceRequest
      required:
      - workspace
      type: object
      properties:
        includeUserRoles:
          type: boolean
          description: Whether to duplicate the user roles (sharing settings) on the workspace. By default, duplicate follows the behavior of CreateWorkspace - it is shared solely with the creator as an OWNER. If true, all user roles are also copied onto the new workspace in addition to the caller becoming an OWNER.
          example: false
        workspace:
          $ref: '#/components/schemas/Workspace'
    CloneWorkspaceResponse:
      title: CloneWorkspaceResponse
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
    Cluster:
      title: Cluster
      required:
      - clusterName
      - clusterNamespace
      - status
      type: object
      properties:
        clusterName:
          type: string
          description: The user-supplied name for the cluster
        clusterNamespace:
          type: string
          description: The Google Project used to create the cluster
        createdDate:
          type: string
          description: The date and time the cluster was created, in ISO-8601 format
        status:
          $ref: '#/components/schemas/ClusterStatus'
      description: A Firecloud notebook cluster.
    ClusterConfig:
      title: ClusterConfig
      type: object
      properties:
        machineType:
          type: string
          description: GCE machine type, e.g. n1-standard-2.
        masterDiskSize:
          type: integer
          description: Master persistent disk size in GB.
          format: int32
    ClusterListResponse:
      title: ClusterListResponse
      required:
      - defaultCluster
      type: object
      properties:
        defaultCluster:
          $ref: '#/components/schemas/Cluster'
    ClusterLocalizeRequest:
      title: ClusterLocalizeRequest
      required:
      - notebookNames
      - playgroundMode
      - workspaceId
      - workspaceNamespace
      type: object
      properties:
        notebookNames:
          type: array
          items:
            type: string
          description: Names of notebooks to localize. This is just the basename (no gs:// needed). This is interpreted as relative to the /notebooks directory within the provided workspace's Google Cloud Storage bucket.
        playgroundMode:
          type: boolean
          description: Set to true if playgroundMode needed
          example: false
        workspaceId:
          type: string
          description: Workspace from which to source notebooks
        workspaceNamespace:
          type: string
          description: Workspace namespace from which to source notebooks
    ClusterLocalizeResponse:
      title: ClusterLocalizeResponse
      required:
      - clusterLocalDirectory
      type: object
      properties:
        clusterLocalDirectory:
          type: string
          description: The directory on the notebook cluster file system where the requested files were localized. This is the "API" directory in Jupyter terms, which means it is a relative path in the Jupyter user-facing file system, e.g. "foo/bar.ipynb".
    ClusterStatus:
      title: ClusterStatus
      enum:
      - Creating
      - Running
      - Updating
      - Error
      - Stopping
      - Stopped
      - Starting
      - Deleting
      - Deleted
      - Unknown
      type: string
      example: Creating
    Cohort:
      title: Cohort
      required:
      - criteria
      - name
      - type
      type: object
      properties:
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        creator:
          type: string
        criteria:
          type: string
          description: Internal representation of the cohort definition. Clients should not depend directly on this, but instead call client functions to issue a SQL query for the cohort.
        description:
          type: string
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        id:
          type: integer
          format: int64
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        name:
          type: string
        type:
          type: string
    CohortAnnotationDefinition:
      title: CohortAnnotationDefinition
      required:
      - annotationType
      - cohortId
      - columnName
      type: object
      properties:
        annotationType:
          $ref: '#/components/schemas/AnnotationType'
        cohortAnnotationDefinitionId:
          type: integer
          description: the annotation definition id.
          format: int64
        cohortId:
          type: integer
          description: the cohort id.
          format: int64
        columnName:
          type: string
          description: the name of this annotation.
        enumValues:
          type: array
          items:
            type: string
          description: ''
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
    CohortAnnotationDefinitionListResponse:
      title: CohortAnnotationDefinitionListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortAnnotationDefinition'
          description: ''
    CohortAnnotationsRequest:
      title: CohortAnnotationsRequest
      required:
      - cohortName
      type: object
      properties:
        annotationQuery:
          $ref: '#/components/schemas/AnnotationQuery'
        cdrVersionName:
          type: string
          description: The name of a CDR version to use when retrieving annotations; if none is specified, the CDR version currently associated with the workspace will be used
        cohortName:
          type: string
          description: The name of a cohort that annotations should be retrieved for.
        statusFilter:
          type: array
          items:
            $ref: '#/components/schemas/CohortStatus'
          description: An array of status values; participants with these statuses will have their annotations retrieved. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED.
    CohortAnnotationsResponse:
      title: CohortAnnotationsResponse
      required:
      - results
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
          description: An array of columns for the annotations being returned.
        results:
          type: array
          items:
            type: object
          description: An array of JSON dictionaries, with each dictionary representing the requested annotations and/or review status for a single person. (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a list[object] where each object is a dictionary. In Typescript clients, this is an Array<any> where each object is a dictionary.) Keys in the dictionaries will be "person_id", "review_status", or the name of an annotation.
    CohortChartData:
      title: CohortChartData
      required:
      - conceptId
      - count
      - name
      type: object
      properties:
        conceptId:
          type: integer
          description: the source concept id for this data
          format: int64
        count:
          type: integer
          description: the count for this data
          format: int64
        name:
          type: string
          description: the name of this data
    CohortChartDataListResponse:
      title: CohortChartDataListResponse
      required:
      - count
      - items
      type: object
      properties:
        count:
          type: integer
          description: total count for cohort.
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortChartData'
          description: ''
    CohortListResponse:
      title: CohortListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Cohort'
          description: ''
    CohortReview:
      title: CohortReview
      required:
      - cdrVersionId
      - cohortDefinition
      - cohortId
      - cohortName
      - cohortReviewId
      - creationTime
      - matchedParticipantCount
      - reviewStatus
      type: object
      properties:
        cdrVersionId:
          type: integer
          format: int64
        cohortDefinition:
          type: string
        cohortId:
          type: integer
          format: int64
        cohortName:
          type: string
        cohortReviewId:
          type: integer
          format: int64
        creationTime:
          type: string
        description:
          type: string
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        matchedParticipantCount:
          type: integer
          format: int64
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        participantCohortStatuses:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantCohortStatus'
          description: ''
        queryResultSize:
          type: integer
          format: int64
        reviewSize:
          type: integer
          format: int64
        reviewStatus:
          $ref: '#/components/schemas/ReviewStatus'
        reviewedCount:
          type: integer
          format: int64
        sortColumn:
          type: string
        sortOrder:
          type: string
    CohortReviewListResponse:
      title: CohortReviewListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortReview'
          description: ''
    CohortStatus:
      title: CohortStatus
      enum:
      - EXCLUDED
      - INCLUDED
      - NEEDS_FURTHER_REVIEW
      - NOT_REVIEWED
      type: string
      description: possible values indicating whether participants are in or out of the cohort
      example: EXCLUDED
    ColumnFilter:
      title: ColumnFilter
      required:
      - columnName
      type: object
      properties:
        columnName:
          type: string
          description: The name of the column to filter on.
        operator:
          $ref: '#/components/schemas/Operator'
        value:
          type: string
          description: A string to use in comparisons (case-sensitive).
        valueDate:
          type: string
          description: A date (yyyy-MM-dd) or datetime (yyyy-MM-dd HH:mm:ss zzz) value to use in comparisons.
        valueNull:
          type: boolean
          description: Set to true if the column value should be compared to null.
        valueNumber:
          type: number
          description: A number to use in comparisons (either integer or floating point.)
        valueNumbers:
          type: array
          items:
            type: number
          description: An array of numbers to use in comparisons (used with the "in" operator)
        values:
          type: array
          items:
            type: string
          description: An array of strings to use in comparisons (case-sensitive); used with the "in" operator.
      description: A filter applied to the results of a query, based on a column value in a table. Only results matching the filter will be returned. One (and only one) of the value columns should be populated. values and valueNumbers should only be used in conjunction with the "in" operator.
    Concept:
      title: Concept
      required:
      - conceptClassId
      - conceptCode
      - conceptId
      - conceptName
      - countValue
      - domainId
      - prevalence
      - standardConcept
      - vocabularyId
      type: object
      properties:
        conceptClassId:
          type: string
          description: Class of the concept (e.g. Ingredient)
        conceptCode:
          type: string
          description: Code for the concept in its vocabulary (e.g. G8107)
        conceptId:
          type: integer
          description: ID of the concept
          format: int64
        conceptName:
          type: string
          description: Name of the concept
        conceptSynonyms:
          type: array
          items:
            type: string
          description: concept synonym names
        countValue:
          type: integer
          description: Count of participants matching this concept in the CDR
          format: int64
        domainId:
          type: string
          description: Domain ID of the concept (e.g. Observation)
        prevalence:
          type: number
          description: Prevalence among participants in the CDR (a percentage of the total)
        standardConcept:
          type: boolean
          description: True if this is a standard concept, false otherwise
          example: false
        vocabularyId:
          type: string
          description: Vocabulary ID of the concept (e.g. SNOMED)
      description: A concept describing a type of entity (e.g. measurement, observation, procedure.)
    ConceptIdName:
      title: ConceptIdName
      required:
      - conceptId
      - conceptName
      type: object
      properties:
        conceptId:
          type: integer
          format: int64
        conceptName:
          type: string
    ConceptListResponse:
      title: ConceptListResponse
      required:
      - items
      type: object
      properties:
        domainCounts:
          type: array
          items:
            $ref: '#/components/schemas/DomainCount'
          description: ''
        items:
          type: array
          items:
            $ref: '#/components/schemas/Concept'
          description: ''
    ConceptSet:
      title: ConceptSet
      required:
      - name
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/Concept'
          description: Concepts in the concept set, in conceptName order.
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        creator:
          type: string
        description:
          type: string
        domain:
          $ref: '#/components/schemas/Domain'
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        id:
          type: integer
          format: int64
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        name:
          type: string
        participantCount:
          type: integer
          description: Count of participants in the CDR version for the workspace containing this concept set that match the specified concept set
          format: int32
        survey:
          $ref: '#/components/schemas/Surveys'
    ConceptSetListResponse:
      title: ConceptSetListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ConceptSet'
          description: ''
    ConceptSynonym:
      title: ConceptSynonym
      required:
      - conceptId
      - conceptSynonymName
      - languageConceptId
      type: object
      properties:
        conceptId:
          type: integer
          description: concept id
          format: int64
        conceptSynonymName:
          type: string
          description: concept synonym name
        languageConceptId:
          type: integer
          description: language concept id
          format: int64
      description: concept synonym
    ConfigResponse:
      title: ConfigResponse
      required:
      - gsuiteDomain
      type: object
      properties:
        enableComplianceTraining:
          type: boolean
          description: Feature flag for enabling compliance training in registration steps
          example: false
        enableDataUseAgreement:
          type: boolean
          description: Feature flag for enabling data use agreement
          example: false
        enableEraCommons:
          type: boolean
          description: Feature flag for enabling eRA commons
          example: false
        firecloudURL:
          type: string
          description: The Firecloud URL to use for REST requests.
        gsuiteDomain:
          type: string
          description: G-Suite domain containing user accounts.
        projectId:
          type: string
          description: The cloud project in which this app is running.
        publicApiKeyForErrorReports:
          type: string
          description: >-
            Stackdriver API key for error reporting, scoped to a particular

            domain. If unset, Stackdriver error reporting should be disabled.
        unsafeAllowSelfBypass:
          type: boolean
          description: Enable a user to bypass themself
          example: false
    CopyRequest:
      title: CopyRequest
      required:
      - newName
      - toWorkspaceName
      - toWorkspaceNamespace
      type: object
      properties:
        newName:
          type: string
        toWorkspaceName:
          type: string
        toWorkspaceNamespace:
          type: string
    CreateAccountRequest:
      title: CreateAccountRequest
      type: object
      properties:
        invitationKey:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'
    CreateConceptSetRequest:
      title: CreateConceptSetRequest
      required:
      - conceptSet
      type: object
      properties:
        addedIds:
          type: array
          items:
            type: integer
            format: int64
          description: The IDs of concepts to be added to the concept set.
        conceptSet:
          $ref: '#/components/schemas/ConceptSet'
    CreateReviewRequest:
      title: CreateReviewRequest
      required:
      - size
      type: object
      properties:
        size:
          type: integer
          description: A sample size to review
          format: int32
    Criteria:
      title: Criteria
      required:
      - group
      - hasAttributes
      - id
      - name
      - parentId
      - selectable
      - type
      type: object
      properties:
        code:
          type: string
          description: >-
            Code that identifies this criteria. In some vocabularies such as ICD9 and ICD10, this code captures the tree hierarchy, e.g. '001.002.003'. Multiple criteria may exist for the same code within a CDR version if a given concept has multiple entries at different locations in the criteria tree (this is common in SNOMED).

            Criteria codes should generally be stable across CDR versions.
        conceptId:
          type: integer
          description: >-
            The OMOP concept id associated with this criteria. May be null if this criteria does not match an OMOP concept, e.g. for intermediate nodes (groups) in the criteria tree. Concept ids are ids associated with a specific vocabulary item in the concept table and allow you to search for that code in its domain table. This may be a source or standard concept ID, depending on the tree for the criteria.

            Similar to a code, multiple criteria may reference the same concept ID due to multiple occurrences of a concept in the criteria tree. In other cases a criteria may share the concept ID of its parent, e.g. in the PPI tree a question and child answer share a concept id.

            Concept IDs should generally be stable across CDR versions.
          format: int64
        count:
          type: integer
          description: Estimated number of participants in a particular CDR version which have a least one event matching this criteria.
          format: int64
        domainId:
          type: string
          description: "# TODO: Remove this field. Deprecated. Clue to determine which OMOP tables to search, but these only exist for leaves in the tree. Parents don't have domain ids and concept id will be used in the case that a parent is selectable."
        group:
          type: boolean
          description: specifies if child or parent
          example: false
        hasAncestorData:
          type: boolean
          description: Whether criteria needs lookup in the criteria_ancestor table.
          example: false
        hasAttributes:
          type: boolean
          description: Whether this criteria has associated attributes which can be filtered by value during a search, for example a blood pressure measurement criteria might have an associated measurement value attribute.
          example: false
        hasHierarchy:
          type: boolean
          description: Whether criteria is linked to a tree.
          example: false
        id:
          type: integer
          description: Primary identifier which is unique within a CDR version. Value may not be stable across different CDR versions.
          format: int64
        isStandard:
          type: boolean
          description: Reveals if this criteria is standard or source.
          example: false
        name:
          type: string
          description: description of criteria
        parentId:
          type: integer
          description: The parent id of the criteria. 0 if this is the root node of a criteria tree.
          format: int64
        path:
          type: string
          description: A "." delimited path of all parent criteria IDs. Does not include the id for this criteria; root criteria nodes have a null path.
        selectable:
          type: boolean
          description: Whether or not a client can specify this criteria in a search request. Selecting a group implies selecting all criteria contained within that group.
          example: false
        subtype:
          type: string
          description: The subtype of this criteria, see TreeSubType. This will need to change to CriteriaSubType with the new implementation(change type below to ref CriteriaSubType)
        type:
          type: string
          description: The tree type of this criteria, see TreeType. This will need to change to CriteriaType with the new implementation(change type below to ref CriteriaType)
        value:
          type: string
          description: A helper property to fully describe PPI/AGE data. Age holds the value of the age and for PPI it holds value as number or value as concept id.
    CriteriaAttribute:
      title: CriteriaAttribute
      required:
      - conceptName
      - estCount
      - id
      - type
      - valueAsConceptId
      type: object
      properties:
        conceptName:
          type: string
          description: name of concept
        estCount:
          type: string
          description: possible count
        id:
          type: integer
          description: id of the criteria
          format: int64
        type:
          type: string
          description: numerical or categorical
        valueAsConceptId:
          type: integer
          description: categorical concept id
          format: int64
    CriteriaAttributeListResponse:
      title: CriteriaAttributeListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaAttribute'
          description: ''
    CriteriaListResponse:
      title: CriteriaListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Criteria'
          description: ''
    CriteriaMenuOption:
      title: CriteriaMenuOption
      required:
      - domain
      - types
      type: object
      properties:
        domain:
          type: string
          description: The criteria domains that are searchable in Cohort Builder
        types:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaMenuSubOption'
          description: ''
    CriteriaMenuOptionsListResponse:
      title: CriteriaMenuOptionsListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaMenuOption'
          description: ''
    CriteriaMenuSubOption:
      title: CriteriaMenuSubOption
      required:
      - standardFlags
      - type
      type: object
      properties:
        standardFlags:
          type: array
          items:
            $ref: '#/components/schemas/StandardFlag'
          description: ''
        type:
          type: string
          description: The criteria types that are searchable in Cohort Builder
    CriteriaSubType:
      title: CriteriaSubType
      enum:
      - ANSWER
      - BMI
      - BP
      - CLIN
      - HC
      - HEIGHT
      - HR
      - HR-DETAIL
      - HR-IRR
      - HR-NOIRR
      - LAB
      - PREG
      - QUESTION
      - SURVEY
      - WC
      - WEIGHT
      - WHEEL
      type: string
      description: possible criteria types
      example: ANSWER
    CriteriaType:
      title: CriteriaType
      enum:
      - AGE
      - ATC
      - BRAND
      - CPT4
      - DECEASED
      - ETHNICITY
      - GENDER
      - HCPCS
      - ICD10CM
      - ICD10PCS
      - ICD9CM
      - ICD9Proc
      - LOINC
      - PPI
      - RACE
      - RXNORM
      - SEX
      - SNOMED
      - VISIT
      type: string
      description: possible criteria types
      example: AGE
    DataAccessLevel:
      title: DataAccessLevel
      enum:
      - unregistered
      - registered
      - protected
      type: string
      description: levels of access to data in the curated data repository
      example: unregistered
    DataDictionaryEntry:
      title: DataDictionaryEntry
      type: object
      properties:
        cdrVersionId:
          type: integer
          format: int64
        dataProvenance:
          type: string
        definedTime:
          type: integer
          format: int64
        description:
          type: string
        fieldName:
          type: string
        fieldType:
          type: string
        omopCdmStandardOrCustomField:
          type: string
        relevantOmopTable:
          type: string
        sourcePpiModule:
          type: string
        transformedByRegisteredTierPrivacyMethods:
          type: boolean
          example: false
    DataSet:
      title: DataSet
      type: object
      properties:
        cohorts:
          type: array
          items:
            $ref: '#/components/schemas/Cohort'
          description: All cohorts in the data set
        conceptSets:
          type: array
          items:
            $ref: '#/components/schemas/ConceptSet'
          description: All concept sets in the data set
        description:
          type: string
        domainValuePairs:
          type: array
          items:
            $ref: '#/components/schemas/DomainValuePair'
          description: All the selected domain/value pairs in the data set
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        id:
          type: integer
          format: int64
        includesAllParticipants:
          type: boolean
          example: false
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        name:
          type: string
        prePackagedConceptSet:
          $ref: '#/components/schemas/PrePackagedConceptSetEnum'
        workspaceId:
          type: integer
          format: int64
    DataSetCodeResponse:
      title: DataSetCodeResponse
      type: object
      properties:
        code:
          type: string
          description: The code required to generate the query for the data set.
        kernelType:
          $ref: '#/components/schemas/KernelTypeEnum'
    DataSetExportRequest:
      title: DataSetExportRequest
      required:
      - dataSetRequest
      - newNotebook
      - notebookName
      type: object
      properties:
        dataSetRequest:
          $ref: '#/components/schemas/DataSetRequest'
        kernelType:
          $ref: '#/components/schemas/KernelTypeEnum'
        newNotebook:
          type: boolean
          example: false
        notebookName:
          type: string
    DataSetListResponse:
      title: DataSetListResponse
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataSet'
          description: ''
    DataSetPreviewRequest:
      title: DataSetPreviewRequest
      required:
      - domain
      type: object
      properties:
        cohortIds:
          type: array
          items:
            type: integer
            format: int64
          description: The ids of all cohorts in the data set
        conceptSetIds:
          type: array
          items:
            type: integer
            format: int64
          description: The ids of all concept sets in the data set
        domain:
          $ref: '#/components/schemas/Domain'
        includesAllParticipants:
          type: boolean
          description: Whether to include all participants or filter by cohorts
          example: false
        prePackagedConceptSet:
          $ref: '#/components/schemas/PrePackagedConceptSetEnum'
        values:
          type: array
          items:
            type: string
          description: All the selected values in the data set
    DataSetPreviewResponse:
      title: DataSetPreviewResponse
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        values:
          type: array
          items:
            $ref: '#/components/schemas/DataSetPreviewValueList'
          description: ''
    DataSetPreviewValueList:
      title: DataSetPreviewValueList
      type: object
      properties:
        queryValue:
          type: array
          items:
            type: string
          description: ''
        value:
          type: string
          description: Value selected by user which will act as column header in preview table
    DataSetQuery:
      title: DataSetQuery
      required:
      - domain
      - query
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        namedParameters:
          type: array
          items:
            $ref: '#/components/schemas/NamedParameterEntry'
          description: The set of named parameters to use for the SQL query.
        query:
          type: string
          description: The parameterized BigQuery SQL string to fetch the domain-specific subset of the data set from the CDR.
    DataSetRequest:
      title: DataSetRequest
      required:
      - name
      type: object
      properties:
        cohortIds:
          type: array
          items:
            type: integer
            format: int64
          description: The ids of all cohorts in the data set
        conceptSetIds:
          type: array
          items:
            type: integer
            format: int64
          description: The ids of all concept sets in the data set
        description:
          type: string
        domainValuePairs:
          type: array
          items:
            $ref: '#/components/schemas/DomainValuePair'
          description: All the selected domain/value pairs in the data set
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        includesAllParticipants:
          type: boolean
          description: Whether to include all participants or filter by cohorts
          example: false
        name:
          type: string
        prePackagedConceptSet:
          $ref: '#/components/schemas/PrePackagedConceptSetEnum'
        workspaceId:
          type: integer
          format: int64
    DataTableSpecification:
      title: DataTableSpecification
      type: object
      properties:
        cdrVersionName:
          type: string
          description: The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used
        cohortName:
          type: string
          description: The name of a cohort that data should be retrieved for. This and cohortSpec should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR.
        cohortSpec:
          type: string
          description: JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). This and cohortName should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR.
        maxResults:
          type: integer
          description: The maximum number of results returned in the data table. Defaults to no limit (all matching results are returned.)
          format: int64
        statusFilter:
          type: array
          items:
            $ref: '#/components/schemas/CohortStatus'
          description: An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.)
        tableQuery:
          $ref: '#/components/schemas/TableQuery'
    DemoChartInfo:
      title: DemoChartInfo
      required:
      - ageRange
      - count
      - gender
      - race
      type: object
      properties:
        ageRange:
          type: string
          description: age range of subject
        count:
          type: integer
          description: number of subjects
          format: int64
        gender:
          type: string
          description: gender of subject
        race:
          type: string
          description: race of subject
    DemoChartInfoListResponse:
      title: DemoChartInfoListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DemoChartInfo'
          description: ''
    DemographicSurvey:
      title: DemographicSurvey
      type: object
      properties:
        disability:
          type: boolean
          example: false
        education:
          $ref: '#/components/schemas/Education'
        ethnicity:
          $ref: '#/components/schemas/Ethnicity'
        gender:
          type: array
          items:
            $ref: '#/components/schemas/Gender'
          description: ''
        race:
          type: array
          items:
            $ref: '#/components/schemas/Race'
          description: ''
        yearOfBirth:
          type: number
    Disability:
      title: Disability
      enum:
      - True
      - False
      type: string
      example: True
    Domain:
      title: Domain
      enum:
      - OBSERVATION
      - PROCEDURE
      - DRUG
      - CONDITION
      - MEASUREMENT
      - DEVICE
      - DEATH
      - VISIT
      - SURVEY
      - PERSON
      - PHYSICALMEASUREMENT
      type: string
      description: a domain for concepts corresponding to a table in the OMOP schema
      example: OBSERVATION
    DomainCount:
      title: DomainCount
      required:
      - conceptCount
      - domain
      - name
      type: object
      properties:
        conceptCount:
          type: integer
          description: number of concepts matching the search query in this domain
          format: int64
        domain:
          $ref: '#/components/schemas/Domain'
        name:
          type: string
          description: display name of the domain
    DomainInfo:
      title: DomainInfo
      required:
      - allConceptCount
      - description
      - domain
      - name
      - participantCount
      - standardConceptCount
      type: object
      properties:
        allConceptCount:
          type: integer
          description: number of concepts in this domain (standard or non-standard)
          format: int64
        description:
          type: string
          description: description of the domain
        domain:
          $ref: '#/components/schemas/Domain'
        name:
          type: string
          description: display name of the domain
        participantCount:
          type: integer
          description: number of participants with data in the CDR for a concept in this domain
          format: int64
        standardConceptCount:
          type: integer
          description: number of standard concepts in this domain
          format: int64
    DomainInfoResponse:
      title: DomainInfoResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DomainInfo'
          description: ''
    DomainType:
      title: DomainType
      enum:
      - CONDITION
      - PROCEDURE
      - OBSERVATION
      - DRUG
      - ALL_EVENTS
      - DEVICE
      - VISIT
      - MEASUREMENT
      - PHYSICAL_MEASUREMENT
      - LAB
      - VITAL
      - SURVEY
      - PERSON
      type: string
      example: CONDITION
    DomainValue:
      title: DomainValue
      required:
      - value
      type: object
      properties:
        value:
          type: string
          description: The user facing display name for the value.
      description: Domain values map to various column names in OMOP.
    DomainValuePair:
      title: DomainValuePair
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        value:
          type: string
    DomainValuesResponse:
      title: DomainValuesResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DomainValue'
          description: ''
    DuplicateCohortRequest:
      title: DuplicateCohortRequest
      type: object
      properties:
        newName:
          type: string
        originalCohortId:
          type: integer
          format: int64
    Education:
      title: Education
      enum:
      - NO_EDUCATION
      - GRADES_1_12
      - UNDERGRADUATE
      - COLLEGE_GRADUATE
      - MASTER
      - DOCTORATE
      type: string
      example: NO_EDUCATION
    EducationalRole:
      title: EducationalRole
      enum:
      - TEACHER
      - STUDENT
      - ADMIN
      - FREE_TEXT
      type: string
      example: TEACHER
    EmailVerificationStatus:
      title: EmailVerificationStatus
      enum:
      - unverified
      - pending
      - subscribed
      type: string
      description: stage of email verification
      example: unverified
    EmptyResponse:
      title: EmptyResponse
      type: object
      properties:
        additionalInfo:
          type: string
    ErrorCode:
      title: ErrorCode
      enum:
      - PARSE_ERROR
      - USER_DISABLED
      type: string
      description: Short parsable error descriptions
      example: PARSE_ERROR
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        errorClassName:
          type: string
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
        errorUniqueId:
          type: string
          description: Unique ID for this error response, for correlation with backend logs
        message:
          type: string
          description: General error message for the response.
        statusCode:
          type: integer
          description: HTTP status code
          format: int32
    Ethnicity:
      title: Ethnicity
      enum:
      - HISPANIC
      - NOT_HISPANIC
      - PREFER_NO_ANSWER
      type: string
      example: HISPANIC
    FeaturedWorkspace:
      title: FeaturedWorkspace
      type: object
      properties:
        category:
          $ref: '#/components/schemas/FeaturedWorkspaceCategory'
        id:
          type: string
          description: the Firecloud id of the workspace
        name:
          type: string
          description: the name of the workspace
        namespace:
          type: string
          description: the namespace of the workspace
    FeaturedWorkspaceCategory:
      title: FeaturedWorkspaceCategory
      enum:
      - PHENOTYPE_LIBRARY
      - TUTORIAL_WORKSPACES
      type: string
      example: PHENOTYPE_LIBRARY
    FeaturedWorkspacesConfigResponse:
      title: FeaturedWorkspacesConfigResponse
      type: object
      properties:
        featuredWorkspacesList:
          type: array
          items:
            $ref: '#/components/schemas/FeaturedWorkspace'
          description: ''
    FieldSet:
      title: FieldSet
      type: object
      properties:
        annotationQuery:
          $ref: '#/components/schemas/AnnotationQuery'
        tableQuery:
          $ref: '#/components/schemas/TableQuery'
      description: A specification for fields to retrieve about participants in a cohort. Exactly one of the properties below should be specified.
    FileDetail:
      title: FileDetail
      required:
      - lastModifiedTime
      - name
      - path
      type: object
      properties:
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        name:
          type: string
          description: File Name
        path:
          type: string
          description: The path is in format of gs://bucket-name/name
    Filter:
      title: Filter
      required:
      - operator
      - property
      - values
      type: object
      properties:
        operator:
          $ref: '#/components/schemas/Operator'
        property:
          $ref: '#/components/schemas/FilterColumns'
        values:
          type: array
          items:
            type: string
          description: ''
    FilterColumns:
      title: FilterColumns
      enum:
      - PARTICIPANTID
      - STATUS
      - GENDER
      - BIRTHDATE
      - RACE
      - ETHNICITY
      - DECEASED
      - START_DATE
      - STANDARD_CODE
      - STANDARD_VOCAB
      - STANDARD_NAME
      - STANDARD_CONCEPT_ID
      - SOURCE_CODE
      - SOURCE_VOCAB
      - SOURCE_NAME
      - SOURCE_CONCEPT_ID
      - DOMAIN
      - AGE_AT_EVENT
      - NUM_OF_MENTIONS
      - FIRST_MENTION
      - LAST_MENTION
      - VISIT_TYPE
      - ROUTE
      - DOSE
      - STRENGTH
      - VAL_AS_NUMBER
      - UNIT
      - REF_RANGE
      - SURVEY_NAME
      - QUESTION
      - ANSWER
      type: string
      example: PARTICIPANTID
    FilterList:
      title: FilterList
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
          description: ''
    Gender:
      title: Gender
      enum:
      - MALE
      - FEMALE
      - NON_BINARY
      - TRANSGENDER
      - INTERSEX
      - NONE
      - PREFER_NO_ANSWER
      type: string
      example: MALE
    IndustryRole:
      title: IndustryRole
      enum:
      - PRE_DOCTORAL
      - POST_DOCTORAL
      - EARLY
      - PI
      - FREE_TEXT
      type: string
      example: PRE_DOCTORAL
    InstitutionalAffiliation:
      title: InstitutionalAffiliation
      type: object
      properties:
        institution:
          type: string
        nonAcademicAffiliation:
          $ref: '#/components/schemas/NonAcademicAffiliation'
        other:
          type: string
        role:
          type: string
    InvitationVerificationRequest:
      title: InvitationVerificationRequest
      required:
      - invitationKey
      type: object
      properties:
        invitationKey:
          type: string
          description: Invitation key for verification
    KernelTypeEnum:
      title: KernelTypeEnum
      enum:
      - Python
      - R
      type: string
      example: Python
    MarkDataSetRequest:
      title: MarkDataSetRequest
      type: object
      properties:
        id:
          type: integer
          format: int64
        resourceType:
          type: string
    MatchType:
      title: MatchType
      enum:
      - CONCEPT_CODE
      - CONCEPT_ID
      - CONCEPT_NAME
      type: string
      description: match column type on concept search
      example: CONCEPT_CODE
    MaterializeCohortRequest:
      title: MaterializeCohortRequest
      type: object
      properties:
        cdrVersionName:
          type: string
          description: The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used
        cohortName:
          type: string
          description: The name of a cohort that is to be evaluated. Either this or cohortSpec should be specified
        cohortSpec:
          type: string
          description: JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). Either this or cohortName should be specified
        fieldSet:
          $ref: '#/components/schemas/FieldSet'
        pageSize:
          type: integer
          description: Maximum number of results to return in a response. Defaults to 1000.
          format: int32
        pageToken:
          type: string
          description: Pagination token retrieved from a previous call to materializeCohort; used for retrieving additional pages of results. If this is specified, all other fields on MaterializeCohortRequest apart from pageSize must match the values specified on the request that generated this token.
        statusFilter:
          type: array
          items:
            $ref: '#/components/schemas/CohortStatus'
          description: An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.)
    MaterializeCohortResponse:
      title: MaterializeCohortResponse
      required:
      - results
      type: object
      properties:
        nextPageToken:
          type: string
          description: Pagination token that can be used in a subsequent call to MaterializeCohortRequest to retrieve more results. If not set, there are no more results to retrieve.
        results:
          type: array
          items:
            type: object
          description: An array of JSON dictionaries representing results to the cohort materialization. (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a list[object] where each object is a dictionary. In Typescript clients, this is an Array<any> where each object is a dictionary.) Keys in the dictionaries will be the columns selected in the field set provided in the request, and the values will be the values of those columns.
    Modifier:
      title: Modifier
      required:
      - name
      - operands
      - operator
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ModifierType'
        operands:
          type: array
          items:
            type: string
          description: ''
        operator:
          $ref: '#/components/schemas/Operator'
    ModifierType:
      title: ModifierType
      enum:
      - AGE_AT_EVENT
      - NUM_OF_OCCURRENCES
      - EVENT_DATE
      - ENCOUNTERS
      type: string
      description: possible types of modifiers
      example: AGE_AT_EVENT
    ModifyCohortStatusRequest:
      title: ModifyCohortStatusRequest
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CohortStatus'
    ModifyParticipantCohortAnnotationRequest:
      title: ModifyParticipantCohortAnnotationRequest
      type: object
      properties:
        annotationValueBoolean:
          type: boolean
          description: The Value of the annotation if the AnnotationType is BOOLEAN
        annotationValueDate:
          type: string
          description: The Value of the annotation if the AnnotationType is DATE
        annotationValueEnum:
          type: string
          description: The option chosen for the annotation if the AnnotationType is ENUM
        annotationValueInteger:
          type: integer
          description: The Value of the annotation if the AnnotationType is INTEGER
          format: int32
        annotationValueString:
          type: string
          description: The Value of the annotation if the AnnotationType is STRING
    NamedParameterEntry:
      title: NamedParameterEntry
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/NamedParameterValue'
    NamedParameterValue:
      title: NamedParameterValue
      required:
      - name
      - parameterType
      - parameterValue
      type: object
      properties:
        arrayType:
          type: string
        name:
          type: string
        parameterType:
          type: string
          description: 'Should be any parameter allowed by bigquery, with the exception of struct. The list of parameter types can be found here: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types'
        parameterValue:
          type: object
          description: Can be any value
    NihToken:
      title: NihToken
      required:
      - jwt
      type: object
      properties:
        jwt:
          type: string
          description: the encoded/signed JWT
    NonAcademicAffiliation:
      title: NonAcademicAffiliation
      enum:
      - INDUSTRY
      - EDUCATIONAL_INSTITUTION
      - COMMUNITY_SCIENTIST
      - FREE_TEXT
      type: string
      example: INDUSTRY
    NotebookLockingMetadataResponse:
      title: NotebookLockingMetadataResponse
      type: object
      properties:
        lastLockedBy:
          type: string
        lockExpirationTime:
          type: integer
          description: The time when the lock will expire, in ms from the Unix epoch
          format: int64
    Operator:
      title: Operator
      enum:
      - EQUAL
      - NOT_EQUAL
      - LESS_THAN
      - GREATER_THAN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - LIKE
      - IN
      - BETWEEN
      type: string
      example: EQUAL
    PageFilterRequest:
      title: PageFilterRequest
      required:
      - page
      - pageSize
      - sortOrder
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/DomainType'
        filters:
          $ref: '#/components/schemas/FilterList'
        page:
          type: integer
          description: specific page (default is 0)
          format: int32
        pageSize:
          type: integer
          description: page size of results (default is 25)
          format: int32
        sortColumn:
          $ref: '#/components/schemas/FilterColumns'
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
    PageVisit:
      title: PageVisit
      type: object
      properties:
        firstVisit:
          type: integer
          format: int64
        page:
          type: string
        userId:
          type: integer
          format: int64
    ParticipantChartData:
      title: ParticipantChartData
      required:
      - ageAtEvent
      - rank
      - standardName
      - standardVocabulary
      - startDate
      type: object
      properties:
        ageAtEvent:
          type: integer
          description: The age at event for the participant
          format: int32
        rank:
          type: integer
          description: the rank of the data
          format: int32
        standardName:
          type: string
          description: the standard name
        standardVocabulary:
          type: string
          description: the standard vocabulary
        startDate:
          type: string
          description: the date of the event
    ParticipantChartDataListResponse:
      title: ParticipantChartDataListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantChartData'
          description: ''
    ParticipantCohortAnnotation:
      title: ParticipantCohortAnnotation
      required:
      - cohortAnnotationDefinitionId
      - cohortReviewId
      - participantId
      type: object
      properties:
        annotationId:
          type: integer
          description: participant annotation id.
          format: int64
        annotationValueBoolean:
          type: boolean
          description: The Value of the annotation if the AnnotationType is BOOLEAN
        annotationValueDate:
          type: string
          description: The Value of the annotation if the AnnotationType is DATE
        annotationValueEnum:
          type: string
          description: The option chosen for the annotation if the AnnotationType is ENUM
        annotationValueInteger:
          type: integer
          description: The Value of the annotation if the AnnotationType is INTEGER
          format: int32
        annotationValueString:
          type: string
          description: The Value of the annotation if the AnnotationType is STRING
        cohortAnnotationDefinitionId:
          type: integer
          description: annotation definition id.
          format: int64
        cohortReviewId:
          type: integer
          description: the cohort reivew id.
          format: int64
        participantId:
          type: integer
          description: the participant id.
          format: int64
    ParticipantCohortAnnotationListResponse:
      title: ParticipantCohortAnnotationListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantCohortAnnotation'
          description: ''
    ParticipantCohortStatus:
      title: ParticipantCohortStatus
      required:
      - participantId
      - status
      type: object
      properties:
        birthDate:
          type: string
        deceased:
          type: boolean
          example: false
        ethnicity:
          type: string
        ethnicityConceptId:
          type: integer
          format: int64
        gender:
          type: string
        genderConceptId:
          type: integer
          format: int64
        participantId:
          type: integer
          format: int64
        race:
          type: string
        raceConceptId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/CohortStatus'
    ParticipantData:
      title: ParticipantData
      required:
      - itemDate
      type: object
      properties:
        ageAtEvent:
          type: integer
          description: The age at event for the participant
          format: int32
        answer:
          type: string
          description: an answer in this survey
        domain:
          type: string
          description: the domain of this data.
        dose:
          type: string
          description: The quantity of this data
        firstMention:
          type: string
          description: The date of first mention of this data
        itemDate:
          type: string
          description: The date of the event
        lastMention:
          type: string
          description: The date of last mention of this data
        numMentions:
          type: string
          description: The number of mentions of this data
        question:
          type: string
          description: a question in this survey
        refRange:
          type: string
          description: The reference range of this data
        route:
          type: string
          description: The route of this data
        sourceCode:
          type: string
          description: The source code of this data
        sourceConceptId:
          type: integer
          description: The source concept id
          format: int64
        sourceName:
          type: string
          description: The source name of this data
        sourceVocabulary:
          type: string
          description: The source vocabulary type of this data
        standardCode:
          type: string
          description: The standard code of this data
        standardConceptId:
          type: integer
          description: The standard concept id
          format: int64
        standardName:
          type: string
          description: The standard name of this data
        standardVocabulary:
          type: string
          description: The standard vocabulary of this data
        strength:
          type: string
          description: The strength of this data
        survey:
          type: string
          description: The name of this survey
        unit:
          type: string
          description: The unit of this data
        value:
          type: string
          description: The source value of this data
        visitType:
          type: string
          description: The visit type of this data
    ParticipantDataListResponse:
      title: ParticipantDataListResponse
      required:
      - count
      - items
      type: object
      properties:
        count:
          type: integer
          description: the total count of items.
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantData'
          description: ''
    ParticipantDemographics:
      title: ParticipantDemographics
      required:
      - ethnicityList
      - genderList
      - raceList
      type: object
      properties:
        ethnicityList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
          description: ''
        genderList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
          description: ''
        raceList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
          description: ''
    PrePackagedConceptSetEnum:
      title: PrePackagedConceptSetEnum
      enum:
      - NONE
      - DEMOGRAPHICS
      - SURVEY
      - BOTH
      type: string
      example: NONE
    Profile:
      title: Profile
      required:
      - dataAccessLevel
      - username
      type: object
      properties:
        aboutYou:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        areaOfResearch:
          type: string
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/Authority'
          description: authorities granted to this user
        betaAccessBypassTime:
          type: integer
          description: Timestamp when a user was bypassed for beta access
          format: int64
        betaAccessRequestTime:
          type: integer
          description: Timestamp when the user requests beta access.
          format: int64
        complianceTrainingBypassTime:
          type: integer
          description: Timestamp when a user was bypassed for completing compliance training
          format: int64
        complianceTrainingCompletionTime:
          type: integer
          description: Timestamp when a user completed compliance training.
          format: int64
        contactEmail:
          type: string
          description: email address that can be used to contact the user
        contactEmailFailure:
          type: boolean
          description: Whether or not contact email could be added to verification list
          example: false
        creationNonce:
          type: string
          description: A value which can be used to secure API calls during the account creation flow, prior to account login.
        currentPosition:
          type: string
          description: the user's curent position (job title)
        dataAccessLevel:
          $ref: '#/components/schemas/DataAccessLevel'
        dataUseAgreementBypassTime:
          type: integer
          description: Timestamp when a user was bypassed for completing the data use agreement.
          format: int64
        dataUseAgreementCompletionTime:
          type: integer
          description: Timestamp when a user completed the data use agreement.
          format: int64
        dataUseAgreementSignedVersion:
          type: integer
          description: Version of the data use agreement that the user last signed.
          format: int32
        demographicSurvey:
          $ref: '#/components/schemas/DemographicSurvey'
        demographicSurveyCompletionTime:
          type: integer
          description: Timestamp when the user completed a demographic survey in milliseconds since the UNIX epoch.
          format: int64
        disabled:
          type: boolean
          example: false
        emailVerificationBypassTime:
          type: integer
          description: Timestamp when a user was bypassed for completing email verification
          format: int64
        emailVerificationCompletionTime:
          type: integer
          description: Timestamp when a user completed email verification
          format: int64
        emailVerificationStatus:
          $ref: '#/components/schemas/EmailVerificationStatus'
        eraCommonsBypassTime:
          type: integer
          description: Timestamp when the user was bypassed for completing era commons linking.
          format: int64
        eraCommonsCompletionTime:
          type: integer
          description: Timestamp when the user completed era commons linking.
          format: int64
        eraCommonsLinkExpireTime:
          type: integer
          description: The FireCloud-calculated expiration time
          format: int64
          example: 0
        eraCommonsLinkedNihUsername:
          type: string
          description: The user's NIH username
        familyName:
          type: string
          description: the user's family  name (e.g. Jones)
        firstSignInTime:
          type: integer
          format: int64
        freeTierDollarQuota:
          type: number
        freeTierUsage:
          type: number
        givenName:
          type: string
          description: the user's given name (e.g. Alice)
        idVerificationBypassTime:
          type: integer
          description: Timestamp when the user is bypassed for completing identity verification
          format: int64
        idVerificationCompletionTime:
          type: integer
          description: Timestamp when the user completes identity verification.
          format: int64
        institutionalAffiliations:
          type: array
          items:
            $ref: '#/components/schemas/InstitutionalAffiliation'
          description: ''
        organization:
          type: string
          description: the user's current organization
        pageVisits:
          type: array
          items:
            $ref: '#/components/schemas/PageVisit'
          description: pages user has visited
        phoneNumber:
          type: string
          description: the user's phone number
        twoFactorAuthBypassTime:
          type: integer
          description: Timestamp when the user was bypassed for completing two factor authentication in milliseconds since the UNIX epoch.
          format: int64
        twoFactorAuthCompletionTime:
          type: integer
          description: Timestamp when the user completed two factor authentication in milliseconds since the UNIX epoch.
          format: int64
        userId:
          type: integer
          description: researchallofus userId
          format: int64
        username:
          type: string
          description: researchallofus username
    Race:
      title: Race
      enum:
      - AIAN
      - ASIAN
      - AA
      - NHOPI
      - WHITE
      - NONE
      - PREFER_NO_ANSWER
      type: string
      example: AIAN
    ReadOnlyNotebookResponse:
      title: ReadOnlyNotebookResponse
      type: object
      properties:
        html:
          type: string
    RecentResource:
      title: RecentResource
      type: object
      properties:
        cohort:
          $ref: '#/components/schemas/Cohort'
        cohortReview:
          $ref: '#/components/schemas/CohortReview'
        conceptSet:
          $ref: '#/components/schemas/ConceptSet'
        dataSet:
          $ref: '#/components/schemas/DataSet'
        modifiedTime:
          type: string
        notebook:
          $ref: '#/components/schemas/FileDetail'
        permission:
          type: string
        workspaceFirecloudName:
          type: string
        workspaceId:
          type: integer
          format: int64
        workspaceNamespace:
          type: string
    RecentResourceRequest:
      title: RecentResourceRequest
      type: object
      properties:
        notebookName:
          type: string
    RecentWorkspace:
      title: RecentWorkspace
      type: object
      properties:
        accessLevel:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
        accessedTime:
          type: string
          description: The date and time that the workspace was last accessed, in ISO-8601 format
        workspace:
          $ref: '#/components/schemas/Workspace'
    ResearchPurpose:
      title: ResearchPurpose
      required:
      - ancestry
      - anticipatedFindings
      - commercialPurpose
      - controlSet
      - diseaseFocusedResearch
      - drugDevelopment
      - educational
      - intendedStudy
      - methodsDevelopment
      - otherPurpose
      - population
      - populationHealth
      - reasonForAllOfUs
      - reviewRequested
      - socialBehavioral
      type: object
      properties:
        additionalNotes:
          type: string
        ancestry:
          type: boolean
          example: false
        anticipatedFindings:
          type: string
        approved:
          type: boolean
        commercialPurpose:
          type: boolean
          example: false
        controlSet:
          type: boolean
          example: false
        diseaseFocusedResearch:
          type: boolean
          example: false
        diseaseOfFocus:
          type: string
        drugDevelopment:
          type: boolean
          example: false
        educational:
          type: boolean
          example: false
        intendedStudy:
          type: string
        methodsDevelopment:
          type: boolean
          example: false
        otherPopulationDetails:
          type: string
        otherPurpose:
          type: boolean
          example: false
        otherPurposeDetails:
          type: string
        population:
          type: boolean
          example: false
        populationDetails:
          type: array
          items:
            $ref: '#/components/schemas/specificPopulationEnum'
          description: ''
        populationHealth:
          type: boolean
          example: false
        reasonForAllOfUs:
          type: string
        reviewRequested:
          type: boolean
          example: false
        socialBehavioral:
          type: boolean
          example: false
        timeRequested:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        timeReviewed:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
    ResearchPurposeReviewRequest:
      title: ResearchPurposeReviewRequest
      required:
      - approved
      type: object
      properties:
        approved:
          type: boolean
          example: false
      description: Approve or reject a workspace's research purpose.
    ResendWelcomeEmailRequest:
      title: ResendWelcomeEmailRequest
      required:
      - creationNonce
      - username
      type: object
      properties:
        creationNonce:
          type: string
          description: The nonce returned from the account creation API.
        username:
          type: string
          description: Username of account to resend welcome email to
    ResultFilters:
      title: ResultFilters
      type: object
      properties:
        allOf:
          type: array
          items:
            $ref: '#/components/schemas/ResultFilters'
          description: A list of result filters. All filters matching means a result should be returned (or not returned if "not" is true.)
        anyOf:
          type: array
          items:
            $ref: '#/components/schemas/ResultFilters'
          description: A list of column filters. Any filters matching means a result should be returned (or not returned if "not" is true.)
        columnFilter:
          $ref: '#/components/schemas/ColumnFilter'
        if_not:
          type: boolean
          description: Set to true if a result matching allOf or anyOf below should result in a result *not* being returned.
          example: false
      description: A list of filters applied to the results of a query. Only results matching the filter criteria should be returned. Exactly one of "allOf", "anyOf", and "columnFilter" should be set.
    ReviewStatus:
      title: ReviewStatus
      enum:
      - NONE
      - CREATED
      type: string
      description: possible values indicating whether review has been created
      example: NONE
    SearchConceptsRequest:
      title: SearchConceptsRequest
      required:
      - domain
      - includeDomainCounts
      - standardConceptFilter
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        includeDomainCounts:
          type: boolean
          description: True if per-domain counts of concepts matching the criteria should be included in the response
          example: false
        maxResults:
          type: integer
          description: The maximum number of results returned. Defaults to 20.
          format: int32
        pageNumber:
          type: integer
          description: By default it returns the first page and then its next pages from that on.
          format: int32
          example: 0
        query:
          type: string
          description: A query string that can be used to match a subset of the name (case-insensitively), the entire code value (case-insensitively), or the concept ID. If not specified, all concepts are returned.
        standardConceptFilter:
          $ref: '#/components/schemas/StandardConceptFilter'
    SearchGroup:
      title: SearchGroup
      required:
      - items
      - temporal
      type: object
      properties:
        id:
          type: string
          description: Unique within the cohort definition
        items:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroupItem'
          description: ''
        mention:
          $ref: '#/components/schemas/TemporalMention'
        temporal:
          type: boolean
          description: indicates if this search group relates to time
          example: false
        time:
          $ref: '#/components/schemas/TemporalTime'
        timeFrame:
          type: string
          description: time increments(Day, Month or Year)
        timeValue:
          type: integer
          description: time value between temporal items
          format: int64
      description: A SearchGroup is a container for groups of criteria which are `OR`ed together.
    SearchGroupItem:
      title: SearchGroupItem
      required:
      - modifiers
      - searchParameters
      - type
      type: object
      properties:
        id:
          type: string
          description: Unique within the cohort definition
        modifiers:
          type: array
          items:
            $ref: '#/components/schemas/Modifier'
          description: >-
            Predicates to apply to the search parameters. Aggregate modifiers (i.e. NUM_OF_OCCURRENCES) are applied independently to each SearchParameter and furthermore, are applied independently to any group elements within those SearchParameters.

            Consider the following example query scenario.

            Example criteria tree: - parent
              - child1
              - child2

            Curated dataset contains 1 participant with 1 event each of concepts child1 and child2. Search request is made on "parent", with a modifier of {type: NUM_OF_OCCURRENCES, operands: [2]}.

            This does not match - the participant would need to have at least 2 events of type child1 and/or of child2 and/or of parent (in the event that "parent" corresponds to a real concept in the data).

            Additionally, aggregate modifiers are applied secondarily to other modifiers. For example, combining the AGE_AT_EVENT with NUM_OF_OCCURRENCES - first we filter down all events by the age predicate, then we count occurrences.
        searchParameters:
          type: array
          items:
            $ref: '#/components/schemas/SearchParameter'
          description: values that help search for subjects
        temporalGroup:
          type: integer
          description: temporal group that this item belongs to
          format: int32
        type:
          type: string
          description: type of criteria
      description: A SearchGroupItem is the "line item" of the Cohort Builder.  It specifies a set of criteria of a given kind, possibly alongside a set of modifiers, the results of which are `OR`ed together with the other criteria in the group.
    SearchParameter:
      title: SearchParameter
      required:
      - ancestorData
      - attributes
      - domain
      - group
      - name
      - parameterId
      - standard
      - type
      type: object
      properties:
        ancestorData:
          type: boolean
          description: flag that determines if concept ids need to be looked up in the ancestor table
          example: false
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
          description: >-
            Attributes are extra inputs provided by users through the UX. Currently used by Demographics(Age), Measurements(Body Height, Weight.. etc) and Physical Measurements(Blood Pressure, Body Weight.. etc). Measurements and Physical Measurements have overlap in many areas such as body weight, but the difference is standard(measurements) and source(physical measurements).

             Example demo age search parameter:
             {
               "type": "DEMO",
               "searchParameters": [
                 {
                   "type": "DEMO",
                   "subtype": "AGE",
                   "group": false,
                   "attributes": [{"name": "Age", "operator": "BETWEEN", "operands": [23, 31]}]
                 }
               ],
               "modifiers": []
             }

             Example physical measurement blood pressure(Hypotensive (Systolic <= 90 / Diastolic <= 60))
             {
               "type": "PM",
               "searchParameters": [
                 {
                   "type": "PM",
                   "subtype": "BP",
                   "group": false,
                   "attributes": [
                     {
                       "conceptId": 903118,
                       "name": "Systolic",
                       "operands": ["90"],
                       "operator":"LESS_THAN_OR_EQUAL_TO"
                     },
                     {
                       "conceptId": 903115,
                       "name": "Diastolic",
                       "operands": ["60"],
                        "operator": "LESS_THAN_OR_EQUAL_TO"
                      }
                    ]
                  }
                ],
                "modifiers": []
              }
        conceptId:
          type: integer
          description: The concept id that maps to concept table, if any.
          format: int64
        domain:
          type: string
          description: The omop domain that this criteria belongs to
        group:
          type: boolean
          description: Specifies if the generating Criterion is a leaf or node in its Criteria tree
          example: false
        name:
          type: string
          description: The name of the generating Criterion
        parameterId:
          type: string
          description: Unique within the cohort definition
        standard:
          type: boolean
          description: flag that determines standard or source
          example: false
        subtype:
          type: string
          description: The subtype of the generating Criterion
        type:
          type: string
          description: The type of the generating Criterion
        value:
          type: string
          description: The Criteria code (or name if querying for Deceased)
    SearchRequest:
      title: SearchRequest
      required:
      - excludes
      - includes
      type: object
      properties:
        excludes:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroup'
          description: ''
        includes:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroup'
          description: ''
      description: The SearchRequest describes the state of the Cohort Builder at any given moment. It contains two keys, `include` and `exclude`, each of which specifies an array of SearchGroups which are `AND`ed together, and which collectively specify which subjects to include or exclude from the cohort.
    ShareWorkspaceRequest:
      title: ShareWorkspaceRequest
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          description: ''
        workspaceEtag:
          type: string
          description: Associated workspace etag retrieved via reading the workspaces API. If provided, validates that the workspace (and its user roles) has not been modified since this etag was retrieved.
    SortOrder:
      title: SortOrder
      enum:
      - asc
      - desc
      type: string
      example: asc
    StackTraceElement:
      title: StackTraceElement
      required:
      - className
      - fileName
      - lineNumber
      - methodName
      type: object
      properties:
        className:
          type: string
          description: class name
        fileName:
          type: string
          description: source file name
        lineNumber:
          type: integer
          description: line number
          format: int32
        methodName:
          type: string
          description: method name
    StandardConceptFilter:
      title: StandardConceptFilter
      enum:
      - ALL_CONCEPTS
      - STANDARD_CONCEPTS
      - NON_STANDARD_CONCEPTS
      - STANDARD_OR_CODE_ID_MATCH
      type: string
      description: filter on whether standard, non-standard, or all concepts should be returned\
      example: ALL_CONCEPTS
    StandardFlag:
      title: StandardFlag
      required:
      - standard
      type: object
      properties:
        standard:
          type: boolean
          description: flag that determines standard or source
          example: false
    StatusAlert:
      title: StatusAlert
      type: object
      properties:
        link:
          type: string
          description: A URL linking to an incident report where users can read more
        message:
          type: string
          description: The actual message of the status alert, e.g. 'AoU RW is down because GCP is down'
        statusAlertId:
          type: integer
          description: The primary key of the status alert in the database
          format: int64
        title:
          type: string
          description: "Title of the status alert, e.g. 'Service Incident: December 6, 2019'"
    StatusResponse:
      title: StatusResponse
      required:
      - firecloudStatus
      - notebooksStatus
      type: object
      properties:
        firecloudStatus:
          type: boolean
          example: false
        notebooksStatus:
          type: boolean
          example: false
    SurveyAnswerResponse:
      title: SurveyAnswerResponse
      type: object
      properties:
        answer:
          type: string
        conceptId:
          type: integer
          format: int64
        participationCount:
          type: integer
          format: int64
        percentAnswered:
          type: number
    SurveyModule:
      title: SurveyModule
      required:
      - conceptId
      - description
      - name
      - orderNumber
      - participantCount
      - questionCount
      type: object
      properties:
        conceptId:
          type: integer
          description: the concept ID for the survey module
          format: int64
        description:
          type: string
          description: description of the module
        name:
          type: string
          description: display name of the module
        orderNumber:
          type: integer
          description: survey release order number
          format: int32
        participantCount:
          type: integer
          description: number of participants with data in the CDR for questions in this module
          format: int64
        questionCount:
          type: integer
          description: number of questions in the module
          format: int64
    SurveyQuestionsResponse:
      title: SurveyQuestionsResponse
      type: object
      properties:
        conceptId:
          type: integer
          format: int64
        question:
          type: string
    Surveys:
      title: Surveys
      enum:
      - THE BASICS
      - LIFESTYLE
      - OVERALL HEALTH
      type: string
      description: a survey for concepts
      example: THE BASICS
    SurveysResponse:
      title: SurveysResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SurveyModule'
          description: ''
    TableQuery:
      title: TableQuery
      required:
      - tableName
      type: object
      properties:
        columns:
          type: array
          items:
            type: string
          description: An array of columns to retrieve from the table, taken from the table specified above. Defaults to all columns.
        conceptSetName:
          type: string
          description: A name of a concept set in the workspace used to filter results; results must match one of the concepts in the named concept set. If both filters and conceptSetName are specified, results must match both.
        filters:
          $ref: '#/components/schemas/ResultFilters'
        orderBy:
          type: array
          items:
            type: string
          description: An array of columns to sort the resulting data by, taken from the table specified above, each one optionally enclosed in "DESCENDING()" for descending sort order. Default sort order is "person_id" (in ascending order) followed by the ID of the specified table (in ascending order.)
        tableName:
          type: string
          description: The name of a table containing a person_id column to retrieve data from (e.g. person, observation); should be in the OMOP CDM 5.2 schema.
          externalDocs:
            description: OMOP CDM 5.2 schema definition
            url: https://github.com/OHDSI/CommonDataModel/blob/v5.2.0/PostgreSQL/OMOP%20CDM%20ddl%20-%20PostgreSQL.sql
      description: A specification for retrieving data from a single table.
    TemporalMention:
      title: TemporalMention
      enum:
      - ANY_MENTION
      - FIRST_MENTION
      - LAST_MENTION
      type: string
      description: Mentions refer to occurrences of entry date per person
      example: ANY_MENTION
    TemporalTime:
      title: TemporalTime
      enum:
      - DURING_SAME_ENCOUNTER_AS
      - X_DAYS_BEFORE
      - X_DAYS_AFTER
      - WITHIN_X_DAYS_OF
      type: string
      description: time refers to the amount of time in reference to temporal mentions
      example: DURING_SAME_ENCOUNTER_AS
    UpdateClusterConfigRequest:
      title: UpdateClusterConfigRequest
      required:
      - userEmail
      type: object
      properties:
        clusterConfig:
          $ref: '#/components/schemas/ClusterConfig'
        userEmail:
          type: string
      description: Request to update the default cluster configuration for a given user. Fields of the config may be omitted, in which case a default will be used. Set clusterConfig to null to clear it.
    UpdateConceptSetRequest:
      title: UpdateConceptSetRequest
      required:
      - etag
      type: object
      properties:
        addedIds:
          type: array
          items:
            type: integer
            format: int64
          description: The IDs of concepts to be added to the concept set.
        etag:
          type: string
          description: Etag of the concept set being modified. Validates that the concept set has not been modified since this etag was retrieved.
        removedIds:
          type: array
          items:
            type: integer
            format: int64
          description: The IDs of concepts to be removed from the concept set.
    UpdateContactEmailRequest:
      title: UpdateContactEmailRequest
      required:
      - contactEmail
      - creationNonce
      - username
      type: object
      properties:
        contactEmail:
          type: string
          description: Email to update contact email
        creationNonce:
          type: string
          description: The nonce returned from the account creation API.
        username:
          type: string
          description: Username for account.
    UpdateUserDisabledRequest:
      title: UpdateUserDisabledRequest
      required:
      - email
      type: object
      properties:
        disabled:
          type: boolean
          description: Set to true to disable user in auth domain, false otherwise
          example: false
        email:
          type: string
    UpdateWorkspaceRequest:
      title: UpdateWorkspaceRequest
      required:
      - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
    User:
      title: User
      type: object
      properties:
        email:
          type: string
          description: researchallofus email address
        familyName:
          type: string
          description: the user's family  name (e.g. Jones)
        givenName:
          type: string
          description: the user's given name (e.g. Alice)
    UserListResponse:
      title: UserListResponse
      required:
      - profileList
      type: object
      properties:
        profileList:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
          description: ''
    UserResponse:
      title: UserResponse
      type: object
      properties:
        nextPageToken:
          type: string
          description: Pagination token that can be used in a subsequent calls to retrieve more results. If not set, there are no more results to retrieve.
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: A list of users matching the provided search query.
    UserRole:
      title: UserRole
      required:
      - email
      - role
      type: object
      properties:
        email:
          type: string
        familyName:
          type: string
        givenName:
          type: string
        role:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
    UsernameTakenResponse:
      title: UsernameTakenResponse
      required:
      - isTaken
      type: object
      properties:
        isTaken:
          type: boolean
          description: Boolean response to whether username is already taken.
          example: false
      example:
        isTaken: false
    ValueSet:
      title: ValueSet
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        survey:
          $ref: '#/components/schemas/Surveys'
        values:
          $ref: '#/components/schemas/DomainValuesResponse'
    VerifyEmailRequest:
      title: VerifyEmailRequest
      type: object
      properties:
        emailToVerify:
          type: string
        username:
          type: string
    Vocabulary:
      title: Vocabulary
      required:
      - domain
      - type
      - vocabulary
      type: object
      properties:
        domain:
          type: string
          description: OMOP domain
        type:
          type: string
          description: Source or Standard
        vocabulary:
          type: string
          description: Vocabulary
    VocabularyListResponse:
      title: VocabularyListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary'
          description: ''
    Workspace:
      title: Workspace
      required:
      - name
      type: object
      properties:
        cdrVersionId:
          type: string
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        creator:
          type: string
        dataAccessLevel:
          $ref: '#/components/schemas/DataAccessLevel'
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        googleBucketName:
          type: string
        id:
          type: string
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        name:
          type: string
        namespace:
          type: string
        published:
          type: boolean
          example: false
        researchPurpose:
          $ref: '#/components/schemas/ResearchPurpose'
    WorkspaceAccessLevel:
      title: WorkspaceAccessLevel
      enum:
      - NO ACCESS
      - READER
      - WRITER
      - OWNER
      type: string
      description: levels of access to workspace, NO ACCESS is akin to removing a user from a workspace ACL.
      example: NO ACCESS
    WorkspaceActiveStatus:
      title: WorkspaceActiveStatus
      enum:
      - ACTIVE
      - DELETED
      - PENDING_DELETION_POST_1PPW_MIGRATION
      type: string
      description: Status of workspace
      example: ACTIVE
    WorkspaceListResponse:
      title: WorkspaceListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
          description: ''
    WorkspaceResponse:
      title: WorkspaceResponse
      required:
      - accessLevel
      - workspace
      type: object
      properties:
        accessLevel:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
        workspace:
          $ref: '#/components/schemas/Workspace'
    WorkspaceResponseListResponse:
      title: WorkspaceResponseListResponse
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceResponse'
          description: ''
    WorkspaceUserRolesResponse:
      title: WorkspaceUserRolesResponse
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          description: ''
        workspaceEtag:
          type: string
          description: Updated workspace etag after the share request has been applied.
    specificPopulationEnum:
      title: specificPopulationEnum
      enum:
      - RACE_ETHNICITY
      - AGE_GROUPS
      - SEX
      - GENDER_IDENTITY
      - SEXUAL_ORIENTATION
      - GEOGRAPHY
      - DISABILITY_STATUS
      - ACCESS_TO_CARE
      - EDUCATION_LEVEL
      - INCOME_LEVEL
      - OTHER
      type: string
      description: Short parsable descriptions of specific population categories
      example: RACE_ETHNICITY
    NotebookRename:
      title: NotebookRename
      type: object
      properties:
        name:
          type: string
        newName:
          type: string
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://fake-authorization-url.pmi-ops.org/
          tokenUrl: https://fake-token-url.pmi-ops.org/
          scopes:
            read_aou: Read AoU objects
            write_aou: Create and modify AoU objects
security:
- oauth2: []
tags:
- name: profile
  description: ''
- name: cluster
  description: ''
- name: workspaces
  description: ''
- name: authDomain
  description: ''
- name: dataSet
  description: ''
- name: cdrVersions
  description: ''
- name: cohortBuilder
  description: ''
- name: config
  description: ''
- name: offlineAudit
  description: ''
- name: offlineBilling
  description: ''
- name: offlineUser
  description: ''
- name: offlineCluster
  description: ''
- name: offlineMonitoring
  description: ''
- name: featured-workspaces-config
  description: ''
- name: monitoring
  description: ''
- name: status
  description: ''
- name: status-alert
  description: ''
- name: user
  description: ''
- name: userMetrics
  description: ''
- name: cohortReview
  description: ''
- name: cohorts
  description: ''
- name: cohortAnnotationDefinition
  description: ''
- name: conceptSets
  description: ''
- name: concepts
  description: ''
