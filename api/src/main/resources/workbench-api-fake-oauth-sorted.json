{
  "definitions": {
    "AcademicRole": {
      "enum": [
        "UNDERGRADUATE",
        "TRAINEE",
        "FELLOW",
        "EARLY_CAREER",
        "NON_TENURE",
        "MID_CAREER",
        "LATE_CAREER",
        "PROJECT_PERSONNEL"
      ],
      "type": "string"
    },
    "AccessBypassRequest": {
      "properties": {
        "isBypassed": {
          "default": false,
          "type": "boolean"
        },
        "moduleName": {
          "$ref": "#/definitions/AccessModule"
        }
      },
      "required": [
        "isBypassed"
      ],
      "type": "object"
    },
    "AccessModule": {
      "enum": [
        "DATA_USE_AGREEMENT",
        "COMPLIANCE_TRAINING",
        "BETA_ACCESS",
        "ERA_COMMONS",
        "TWO_FACTOR_AUTH"
      ],
      "type": "string"
    },
    "Address": {
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "streetAddress1": {
          "type": "string"
        },
        "streetAddress2": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AnnotationQuery": {
      "description": "A specification for retrieving annotation values or review statuses entered for participants.\n",
      "properties": {
        "columns": {
          "description": "An array of names of annotations to retrieve about participants, or \"review_status\" for the cohort review status of the participant or \"person_id\" for the ID of the participant. Defaults to \"person_id\", \"review_status\", and the names of all defined annotations in the cohort review. This is only valid in combination with the use of cohortName above. Only data for participants in the cohort review will be returned; if no cohort review has been created, no results will be returned.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "orderBy": {
          "description": "An array of names of annotations, or \"review status\" or \"person_id\", each one optionally enclosed in \"DESCENDING()\" for descending sort order. Specifies the order that results should be returned. Defaults to \"person_id\" (in ascending order). Annotations referenced in orderBy must also be present in columns.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AnnotationType": {
      "description": "possible values representing the type of annotation.",
      "enum": [
        "STRING",
        "ENUM",
        "DATE",
        "BOOLEAN",
        "INTEGER"
      ],
      "type": "string"
    },
    "ArchivalStatus": {
      "description": "CDR archival status; archived CDRs cannot be used for new workspaces.",
      "enum": [
        "LIVE",
        "ARCHIVED"
      ],
      "type": "string"
    },
    "AttrName": {
      "description": "Name that descibes the type of attribute",
      "enum": [
        "ANY",
        "NUM",
        "CAT",
        "AGE"
      ],
      "type": "string"
    },
    "Attribute": {
      "example": {
        "multiValued": {
          "operands": [
            "18",
            "35"
          ],
          "operator": "BETWEEN"
        },
        "singleValued": {
          "operands": [
            "20"
          ],
          "operator": "GTE"
        }
      },
      "properties": {
        "conceptId": {
          "description": "The concept id that maps to concept table.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/AttrName",
          "description": "the name of the attribute"
        },
        "operands": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "operator": {
          "$ref": "#/definitions/Operator"
        }
      },
      "required": [
        "name",
        "operands"
      ],
      "type": "object"
    },
    "AuditBigQueryResponse": {
      "properties": {
        "numQueryIssues": {
          "description": "Number of queries issues against the Curated data repository which are flagged as possible audit issues. See logs/alerts for details.\n",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Authority": {
      "description": "actions a user can have authority/permission to perform",
      "enum": [
        "REVIEW_RESEARCH_PURPOSE",
        "DEVELOPER",
        "ACCESS_CONTROL_ADMIN",
        "FEATURED_WORKSPACE_ADMIN"
      ],
      "type": "string"
    },
    "BillingAccountType": {
      "description": "Whether a billing project is provided by the Researcher Workbench as a Free Tier project subject to quota checks, or the project has a billing account provided by the user\n",
      "enum": [
        "FREE_TIER",
        "USER_PROVIDED"
      ],
      "type": "string"
    },
    "BillingProjectBufferStatus": {
      "properties": {
        "bufferSize": {
          "description": "Current size of the billing buffer, i.e. the number of projects ready to be claimed.\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BillingProjectMembership": {
      "description": "",
      "properties": {
        "projectName": {
          "description": "the name of the project",
          "type": "string"
        },
        "role": {
          "description": "the role of the current user in the project",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/BillingProjectStatus"
        }
      },
      "required": [
        "projectName",
        "role",
        "status"
      ],
      "type": "object"
    },
    "BillingProjectStatus": {
      "description": "Initialization status of a Firecloud billing project for use with Workbench.\n",
      "enum": [
        "none",
        "pending",
        "ready",
        "error"
      ],
      "type": "string"
    },
    "BillingStatus": {
      "description": "Is the billing account associated with this workspace available to incur costs?  For a free tier project, this indicates whether a user has an available balance in their quota.  For a user-provided billing account, this corresponds to whether payment is valid and up to date.\n",
      "enum": [
        "ACTIVE",
        "INACTIVE"
      ],
      "type": "string"
    },
    "CdrQuery": {
      "properties": {
        "bigqueryDataset": {
          "description": "name of the CDR BigQuery dataset",
          "type": "string"
        },
        "bigqueryProject": {
          "description": "name of the Google Cloud project containing the CDR dataset",
          "type": "string"
        },
        "columns": {
          "description": "An array of names to be used for the columns being returned by the query. (Note that related table aliases will be returned with '.' as a separator, whereas '__' is used in the SQL.) This will be populated even if sql is empty (i.e. there are no results.)\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "configuration": {
          "description": "configuration for the BigQuery job (includes named parameters); you can pass this JSON dictionary in for the configuration when calling methods like pandas.read_gbq().\n",
          "type": "object"
        },
        "sql": {
          "description": "Google SQL to use when querying the CDR. If empty, it means no participants can possibly match the data table specification, and an empty data table should be returned.\n",
          "type": "string"
        }
      },
      "required": [
        "bigqueryProject",
        "bigqueryDataset",
        "columns"
      ],
      "type": "object"
    },
    "CdrVersion": {
      "properties": {
        "archivalStatus": {
          "$ref": "#/definitions/ArchivalStatus"
        },
        "cdrVersionId": {
          "type": "string"
        },
        "creationTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "dataAccessLevel": {
          "$ref": "#/definitions/DataAccessLevel"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "cdrVersionId",
        "name",
        "dataAccessLevel",
        "creationTime"
      ],
      "type": "object"
    },
    "CdrVersionListResponse": {
      "properties": {
        "defaultCdrVersionId": {
          "description": "ID of the CDR versions that should be used by the user by default",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/CdrVersion"
          },
          "type": "array"
        }
      },
      "required": [
        "items",
        "defaultCdrVersionId"
      ],
      "type": "object"
    },
    "CheckClustersResponse": {
      "properties": {
        "clusterDeletionCount": {
          "description": "Number of clusters deleted during the check.\n",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CloneWorkspaceRequest": {
      "properties": {
        "includeUserRoles": {
          "default": false,
          "description": "Whether to duplicate the user roles (sharing settings) on the workspace. By default, duplicate follows the behavior of CreateWorkspace - it is shared solely with the creator as an OWNER. If true, all user roles are also copied onto the new workspace in addition to the caller becoming an OWNER.\n",
          "type": "boolean"
        },
        "workspace": {
          "$ref": "#/definitions/Workspace",
          "description": "Workspace metadata to be applied to the cloned workspace upon creation. The following workspace fields are accepted:\n  - name (required)\n  - namespace (required)\n  - researchPurpose (required)\n  - description: defaults to the cloned workspace description\n  - cdrVersionId defaults to the cloned workspace CDR version\n\nAll other fields will be ignored and are generated server-side or are copied from the cloned workspace.\n"
        }
      },
      "required": [
        "workspace"
      ],
      "type": "object"
    },
    "CloneWorkspaceResponse": {
      "properties": {
        "workspace": {
          "$ref": "#/definitions/Workspace",
          "description": "The newly created workspace duplicate."
        }
      },
      "type": "object"
    },
    "Cluster": {
      "description": "A Firecloud notebook cluster.",
      "properties": {
        "clusterName": {
          "description": "The user-supplied name for the cluster",
          "type": "string"
        },
        "clusterNamespace": {
          "description": "The Google Project used to create the cluster",
          "type": "string"
        },
        "createdDate": {
          "description": "The date and time the cluster was created, in ISO-8601 format",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        }
      },
      "required": [
        "clusterName",
        "clusterNamespace",
        "status"
      ]
    },
    "ClusterConfig": {
      "properties": {
        "machineType": {
          "description": "GCE machine type, e.g. n1-standard-2.",
          "type": "string"
        },
        "masterDiskSize": {
          "description": "Master persistent disk size in GB.",
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "ClusterListResponse": {
      "properties": {
        "defaultCluster": {
          "$ref": "#/definitions/Cluster"
        }
      },
      "required": [
        "defaultCluster"
      ],
      "type": "object"
    },
    "ClusterLocalizeRequest": {
      "properties": {
        "notebookNames": {
          "description": "Names of notebooks to localize. This is just the basename (no gs:// needed). This is interpreted as relative to the /notebooks directory within the provided workspace's Google Cloud Storage bucket.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "playgroundMode": {
          "default": false,
          "description": "Set to true if playgroundMode needed",
          "type": "boolean"
        },
        "workspaceId": {
          "description": "Workspace from which to source notebooks",
          "type": "string"
        },
        "workspaceNamespace": {
          "description": "Workspace namespace from which to source notebooks",
          "type": "string"
        }
      },
      "required": [
        "workspaceNamespace",
        "workspaceId",
        "notebookNames",
        "playgroundMode"
      ],
      "type": "object"
    },
    "ClusterLocalizeResponse": {
      "properties": {
        "clusterLocalDirectory": {
          "description": "The directory on the notebook cluster file system where the requested files were localized. This is the \"API\" directory in Jupyter terms, which means it is a relative path in the Jupyter user-facing file system, e.g. \"foo/bar.ipynb\".\n",
          "type": "string"
        }
      },
      "required": [
        "clusterLocalDirectory"
      ],
      "type": "object"
    },
    "ClusterStatus": {
      "enum": [
        "Creating",
        "Running",
        "Updating",
        "Error",
        "Stopping",
        "Stopped",
        "Starting",
        "Deleting",
        "Deleted",
        "Unknown"
      ],
      "type": "string"
    },
    "Cohort": {
      "properties": {
        "creationTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "creator": {
          "type": "string"
        },
        "criteria": {
          "description": "Internal representation of the cohort definition. Clients should not depend directly on this, but instead call client functions to issue a SQL query for the cohort.\n",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "etag": {
          "description": "Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.\n",
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "lastModifiedTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "criteria",
        "type"
      ],
      "type": "object"
    },
    "CohortAnnotationDefinition": {
      "properties": {
        "annotationType": {
          "$ref": "#/definitions/AnnotationType"
        },
        "cohortAnnotationDefinitionId": {
          "description": "the annotation definition id.",
          "format": "int64",
          "type": "integer"
        },
        "cohortId": {
          "description": "the cohort id.",
          "format": "int64",
          "type": "integer"
        },
        "columnName": {
          "description": "the name of this annotation.",
          "type": "string"
        },
        "enumValues": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "etag": {
          "description": "Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.\n",
          "type": "string"
        }
      },
      "required": [
        "cohortId",
        "columnName",
        "annotationType"
      ],
      "type": "object"
    },
    "CohortAnnotationDefinitionListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/CohortAnnotationDefinition"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "CohortAnnotationsRequest": {
      "properties": {
        "annotationQuery": {
          "$ref": "#/definitions/AnnotationQuery",
          "description": "Specification defining what annotations to retrieve.\n"
        },
        "cdrVersionName": {
          "description": "The name of a CDR version to use when retrieving annotations; if none is specified, the CDR version currently associated with the workspace will be used\n",
          "type": "string"
        },
        "cohortName": {
          "description": "The name of a cohort that annotations should be retrieved for.\n",
          "type": "string"
        },
        "statusFilter": {
          "description": "An array of status values; participants with these statuses will have their annotations retrieved. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED.\n",
          "items": {
            "$ref": "#/definitions/CohortStatus"
          },
          "type": "array"
        }
      },
      "required": [
        "cohortName"
      ],
      "type": "object"
    },
    "CohortAnnotationsResponse": {
      "properties": {
        "columns": {
          "description": "An array of columns for the annotations being returned.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "results": {
          "description": "An array of JSON dictionaries, with each dictionary representing the requested annotations and/or review status for a single person. (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a list[object] where each object is a dictionary. In Typescript clients, this is an Array<any> where each object is a dictionary.) Keys in the dictionaries will be \"person_id\", \"review_status\", or the name of an annotation.\n",
          "items": {
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "results"
      ],
      "type": "object"
    },
    "CohortChartData": {
      "properties": {
        "conceptId": {
          "description": "the source concept id for this data",
          "format": "int64",
          "type": "integer"
        },
        "count": {
          "description": "the count for this data",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "the name of this data",
          "type": "string"
        }
      },
      "required": [
        "name",
        "conceptId",
        "count"
      ],
      "type": "object"
    },
    "CohortChartDataListResponse": {
      "properties": {
        "count": {
          "description": "total count for cohort.",
          "format": "int64",
          "type": "integer"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/CohortChartData"
          },
          "type": "array"
        }
      },
      "required": [
        "count",
        "items"
      ],
      "type": "object"
    },
    "CohortListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/Cohort"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "CohortReview": {
      "properties": {
        "cdrVersionId": {
          "format": "int64",
          "type": "integer"
        },
        "cohortDefinition": {
          "type": "string"
        },
        "cohortId": {
          "format": "int64",
          "type": "integer"
        },
        "cohortName": {
          "type": "string"
        },
        "cohortReviewId": {
          "format": "int64",
          "type": "integer"
        },
        "creationTime": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "etag": {
          "description": "Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.\n",
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "matchedParticipantCount": {
          "format": "int64",
          "type": "integer"
        },
        "page": {
          "type": "integer"
        },
        "pageSize": {
          "type": "integer"
        },
        "participantCohortStatuses": {
          "items": {
            "$ref": "#/definitions/ParticipantCohortStatus"
          },
          "type": "array"
        },
        "queryResultSize": {
          "format": "int64",
          "type": "integer"
        },
        "reviewSize": {
          "format": "int64",
          "type": "integer"
        },
        "reviewStatus": {
          "$ref": "#/definitions/ReviewStatus"
        },
        "reviewedCount": {
          "format": "int64",
          "type": "integer"
        },
        "sortColumn": {
          "type": "string"
        },
        "sortOrder": {
          "type": "string"
        }
      },
      "required": [
        "cohortReviewId",
        "cohortId",
        "cdrVersionId",
        "creationTime",
        "matchedParticipantCount",
        "reviewStatus",
        "cohortDefinition",
        "cohortName"
      ],
      "type": "object"
    },
    "CohortReviewListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/CohortReview"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "CohortStatus": {
      "description": "possible values indicating whether participants are in or out of the cohort",
      "enum": [
        "EXCLUDED",
        "INCLUDED",
        "NEEDS_FURTHER_REVIEW",
        "NOT_REVIEWED"
      ],
      "type": "string"
    },
    "ColumnFilter": {
      "description": "A filter applied to the results of a query, based on a column value in a table. Only results matching the filter will be returned. One (and only one) of the value columns should be populated. values and valueNumbers should only be used in conjunction with the \"in\" operator.\n",
      "properties": {
        "columnName": {
          "description": "The name of the column to filter on.\n",
          "type": "string"
        },
        "operator": {
          "$ref": "#/definitions/Operator",
          "description": "The operator to use when comparing values. Defaults to EQUAL. If the \"in\" operator is used, either values or valueNumbers should be populated.\n",
          "externalDocs": {
            "description": "Documentation of BigQuery SQL operators",
            "url": "https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#comparison-operators"
          }
        },
        "value": {
          "description": "A string to use in comparisons (case-sensitive).\n",
          "type": "string"
        },
        "valueDate": {
          "description": "A date (yyyy-MM-dd) or datetime (yyyy-MM-dd HH:mm:ss zzz) value to use in comparisons.\n",
          "type": "string"
        },
        "valueNull": {
          "default": null,
          "description": "Set to true if the column value should be compared to null.\n",
          "type": "boolean"
        },
        "valueNumber": {
          "description": "A number to use in comparisons (either integer or floating point.)\n",
          "type": "number"
        },
        "valueNumbers": {
          "description": "An array of numbers to use in comparisons (used with the \"in\" operator)\n",
          "items": {
            "type": "number"
          },
          "type": "array"
        },
        "values": {
          "description": "An array of strings to use in comparisons (case-sensitive); used with the \"in\" operator.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "columnName"
      ],
      "type": "object"
    },
    "Concept": {
      "description": "A concept describing a type of entity (e.g. measurement, observation, procedure.)",
      "properties": {
        "conceptClassId": {
          "description": "Class of the concept (e.g. Ingredient)",
          "type": "string"
        },
        "conceptCode": {
          "description": "Code for the concept in its vocabulary (e.g. G8107)",
          "type": "string"
        },
        "conceptId": {
          "description": "ID of the concept",
          "format": "int64",
          "type": "integer"
        },
        "conceptName": {
          "description": "Name of the concept",
          "type": "string"
        },
        "conceptSynonyms": {
          "description": "concept synonym names",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "countValue": {
          "description": "Count of participants matching this concept in the CDR",
          "format": "int64",
          "type": "integer"
        },
        "domainId": {
          "description": "Domain ID of the concept (e.g. Observation)",
          "type": "string"
        },
        "prevalence": {
          "description": "Prevalence among participants in the CDR (a percentage of the total)",
          "format": "float",
          "type": "number"
        },
        "standardConcept": {
          "default": false,
          "description": "True if this is a standard concept, false otherwise",
          "type": "boolean"
        },
        "vocabularyId": {
          "description": "Vocabulary ID of the concept (e.g. SNOMED)",
          "type": "string"
        }
      },
      "required": [
        "conceptId",
        "conceptName",
        "domainId",
        "vocabularyId",
        "conceptCode",
        "conceptClassId",
        "standardConcept",
        "countValue",
        "prevalence"
      ],
      "type": "object"
    },
    "ConceptIdName": {
      "properties": {
        "conceptId": {
          "format": "int64",
          "type": "integer"
        },
        "conceptName": {
          "type": "string"
        }
      },
      "required": [
        "conceptId",
        "conceptName"
      ],
      "type": "object"
    },
    "ConceptListResponse": {
      "properties": {
        "domainCounts": {
          "items": {
            "$ref": "#/definitions/DomainCount"
          },
          "type": "array"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/Concept"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ConceptSet": {
      "properties": {
        "concepts": {
          "description": "Concepts in the concept set, in conceptName order.",
          "items": {
            "$ref": "#/definitions/Concept"
          },
          "type": "array"
        },
        "creationTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "creator": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/Domain",
          "description": "Domain corresponding to an OMOP table that can contain rows for the concepts in this concept set. Note that the Domain values RACE, GENDER, and ETHNICITY are not allowed here; it makes sense to specify concepts in these domains in cohort criteria, but there isn't much value in having concept sets defined for them.\n"
        },
        "etag": {
          "description": "Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.\n",
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "lastModifiedTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "participantCount": {
          "description": "Count of participants in the CDR version for the workspace containing this concept set that match the specified concept set\n",
          "format": "int32",
          "type": "integer"
        },
        "survey": {
          "$ref": "#/definitions/Surveys",
          "description": "Survey\n"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ConceptSetListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ConceptSet"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ConceptSynonym": {
      "description": "concept synonym",
      "properties": {
        "conceptId": {
          "description": "concept id",
          "format": "int64",
          "type": "integer"
        },
        "conceptSynonymName": {
          "description": "concept synonym name",
          "type": "string"
        },
        "languageConceptId": {
          "description": "language concept id",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "conceptId",
        "conceptSynonymName",
        "languageConceptId"
      ],
      "type": "object"
    },
    "ConfigResponse": {
      "properties": {
        "enableComplianceTraining": {
          "default": false,
          "description": "Feature flag for enabling compliance training in registration steps",
          "type": "boolean"
        },
        "enableDataUseAgreement": {
          "default": false,
          "description": "Feature flag for enabling data use agreement",
          "type": "boolean"
        },
        "enableEraCommons": {
          "default": false,
          "description": "Feature flag for enabling eRA commons",
          "type": "boolean"
        },
        "firecloudURL": {
          "description": "The Firecloud URL to use for REST requests.",
          "type": "string"
        },
        "gsuiteDomain": {
          "description": "G-Suite domain containing user accounts.",
          "type": "string"
        },
        "projectId": {
          "description": "The cloud project in which this app is running.",
          "type": "string"
        },
        "publicApiKeyForErrorReports": {
          "description": "Stackdriver API key for error reporting, scoped to a particular\ndomain. If unset, Stackdriver error reporting should be disabled.\n",
          "type": "string"
        },
        "unsafeAllowSelfBypass": {
          "default": false,
          "description": "Enable a user to bypass themself",
          "type": "boolean"
        }
      },
      "required": [
        "gsuiteDomain"
      ],
      "type": "object"
    },
    "CopyRequest": {
      "properties": {
        "newName": {
          "type": "string"
        },
        "toWorkspaceName": {
          "type": "string"
        },
        "toWorkspaceNamespace": {
          "type": "string"
        }
      },
      "required": [
        "toWorkspaceName",
        "toWorkspaceNamespace",
        "newName"
      ],
      "type": "object"
    },
    "CreateAccountRequest": {
      "properties": {
        "invitationKey": {
          "type": "string"
        },
        "profile": {
          "$ref": "#/definitions/Profile"
        }
      },
      "type": "object"
    },
    "CreateConceptSetRequest": {
      "properties": {
        "addedIds": {
          "description": "The IDs of concepts to be added to the concept set.",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "conceptSet": {
          "$ref": "#/definitions/ConceptSet",
          "description": "Concept set to be created; concepts is ignored"
        }
      },
      "required": [
        "conceptSet"
      ],
      "type": "object"
    },
    "CreateReviewRequest": {
      "properties": {
        "size": {
          "description": "A sample size to review",
          "type": "integer"
        }
      },
      "required": [
        "size"
      ],
      "type": "object"
    },
    "Criteria": {
      "properties": {
        "code": {
          "description": "Code that identifies this criteria. In some vocabularies such as ICD9 and ICD10, this code captures the tree hierarchy, e.g. '001.002.003'. Multiple criteria may exist for the same code within a CDR version if a given concept has multiple entries at different locations in the criteria tree (this is common in SNOMED).\nCriteria codes should generally be stable across CDR versions.\n",
          "type": "string"
        },
        "conceptId": {
          "description": "The OMOP concept id associated with this criteria. May be null if this criteria does not match an OMOP concept, e.g. for intermediate nodes (groups) in the criteria tree. Concept ids are ids associated with a specific vocabulary item in the concept table and allow you to search for that code in its domain table. This may be a source or standard concept ID, depending on the tree for the criteria.\nSimilar to a code, multiple criteria may reference the same concept ID due to multiple occurrences of a concept in the criteria tree. In other cases a criteria may share the concept ID of its parent, e.g. in the PPI tree a question and child answer share a concept id.\nConcept IDs should generally be stable across CDR versions.\n",
          "format": "int64",
          "type": "integer"
        },
        "count": {
          "description": "Estimated number of participants in a particular CDR version which have a least one event matching this criteria.\n",
          "format": "int64",
          "type": "integer"
        },
        "domainId": {
          "description": "# TODO: Remove this field. Deprecated. Clue to determine which OMOP tables to search, but these only exist for leaves in the tree. Parents don't have domain ids and concept id will be used in the case that a parent is selectable.\n",
          "type": "string"
        },
        "group": {
          "default": false,
          "description": "specifies if child or parent",
          "type": "boolean"
        },
        "hasAncestorData": {
          "default": false,
          "description": "Whether criteria needs lookup in the criteria_ancestor table.",
          "type": "boolean"
        },
        "hasAttributes": {
          "default": false,
          "description": "Whether this criteria has associated attributes which can be filtered by value during a search, for example a blood pressure measurement criteria might have an associated measurement value attribute.\n",
          "type": "boolean"
        },
        "hasHierarchy": {
          "default": false,
          "description": "Whether criteria is linked to a tree.",
          "type": "boolean"
        },
        "id": {
          "description": "Primary identifier which is unique within a CDR version. Value may not be stable across different CDR versions.\n",
          "format": "int64",
          "type": "integer"
        },
        "isStandard": {
          "default": false,
          "description": "Reveals if this criteria is standard or source.",
          "type": "boolean"
        },
        "name": {
          "description": "description of criteria",
          "type": "string"
        },
        "parentId": {
          "description": "The parent id of the criteria. 0 if this is the root node of a criteria tree.\n",
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "description": "A \".\" delimited path of all parent criteria IDs. Does not include the id for this criteria; root criteria nodes have a null path.\n",
          "type": "string"
        },
        "selectable": {
          "default": false,
          "description": "Whether or not a client can specify this criteria in a search request. Selecting a group implies selecting all criteria contained within that group.\n",
          "type": "boolean"
        },
        "subtype": {
          "description": "The subtype of this criteria, see TreeSubType. This will need to change to CriteriaSubType with the new implementation(change type below to ref CriteriaSubType)\n",
          "type": "string"
        },
        "type": {
          "description": "The tree type of this criteria, see TreeType. This will need to change to CriteriaType with the new implementation(change type below to ref CriteriaType)\n",
          "type": "string"
        },
        "value": {
          "description": "A helper property to fully describe PPI/AGE data. Age holds the value of the age and for PPI it holds value as number or value as concept id.\n",
          "type": "string"
        }
      },
      "required": [
        "id",
        "parentId",
        "type",
        "name",
        "group",
        "selectable",
        "hasAttributes"
      ],
      "type": "object"
    },
    "CriteriaAttribute": {
      "properties": {
        "conceptName": {
          "description": "name of concept",
          "type": "string"
        },
        "estCount": {
          "description": "possible count",
          "type": "string"
        },
        "id": {
          "description": "id of the criteria",
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "description": "numerical or categorical",
          "type": "string"
        },
        "valueAsConceptId": {
          "description": "categorical concept id",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "id",
        "valueAsConceptId",
        "conceptName",
        "type",
        "estCount"
      ],
      "type": "object"
    },
    "CriteriaAttributeListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/CriteriaAttribute"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "CriteriaListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/Criteria"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "CriteriaMenuOption": {
      "properties": {
        "domain": {
          "description": "The criteria domains that are searchable in Cohort Builder",
          "type": "string"
        },
        "types": {
          "items": {
            "$ref": "#/definitions/CriteriaMenuSubOption"
          },
          "type": "array"
        }
      },
      "required": [
        "domain",
        "types"
      ],
      "type": "object"
    },
    "CriteriaMenuOptionsListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/CriteriaMenuOption"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "CriteriaMenuSubOption": {
      "properties": {
        "standardFlags": {
          "items": {
            "$ref": "#/definitions/StandardFlag"
          },
          "type": "array"
        },
        "type": {
          "description": "The criteria types that are searchable in Cohort Builder",
          "type": "string"
        }
      },
      "required": [
        "type",
        "standardFlags"
      ],
      "type": "object"
    },
    "CriteriaSubType": {
      "description": "possible criteria types",
      "enum": [
        "ANSWER",
        "BMI",
        "BP",
        "CLIN",
        "HC",
        "HEIGHT",
        "HR",
        "HR-DETAIL",
        "HR-IRR",
        "HR-NOIRR",
        "LAB",
        "PREG",
        "QUESTION",
        "SURVEY",
        "WC",
        "WEIGHT",
        "WHEEL"
      ],
      "type": "string"
    },
    "CriteriaType": {
      "description": "possible criteria types",
      "enum": [
        "AGE",
        "ATC",
        "BRAND",
        "CPT4",
        "DECEASED",
        "ETHNICITY",
        "GENDER",
        "HCPCS",
        "ICD10CM",
        "ICD10PCS",
        "ICD9CM",
        "ICD9Proc",
        "LOINC",
        "PPI",
        "RACE",
        "RXNORM",
        "SEX",
        "SNOMED",
        "VISIT"
      ],
      "type": "string"
    },
    "DataAccessLevel": {
      "description": "levels of access to data in the curated data repository",
      "enum": [
        "unregistered",
        "registered",
        "protected"
      ],
      "type": "string"
    },
    "DataDictionaryEntry": {
      "properties": {
        "cdrVersionId": {
          "format": "int64",
          "type": "integer"
        },
        "dataProvenance": {
          "type": "string"
        },
        "definedTime": {
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "fieldName": {
          "type": "string"
        },
        "fieldType": {
          "type": "string"
        },
        "omopCdmStandardOrCustomField": {
          "type": "string"
        },
        "relevantOmopTable": {
          "type": "string"
        },
        "sourcePpiModule": {
          "type": "string"
        },
        "transformedByRegisteredTierPrivacyMethods": {
          "default": false,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DataSet": {
      "properties": {
        "cohorts": {
          "description": "All cohorts in the data set\n",
          "items": {
            "$ref": "#/definitions/Cohort"
          },
          "type": "array"
        },
        "conceptSets": {
          "description": "All concept sets in the data set\n",
          "items": {
            "$ref": "#/definitions/ConceptSet"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "domainValuePairs": {
          "description": "All the selected domain/value pairs in the data set\n",
          "items": {
            "$ref": "#/definitions/DomainValuePair"
          },
          "type": "array"
        },
        "etag": {
          "description": "Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.\n",
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "includesAllParticipants": {
          "default": false,
          "type": "boolean"
        },
        "lastModifiedTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "prePackagedConceptSet": {
          "$ref": "#/definitions/PrePackagedConceptSetEnum"
        },
        "workspaceId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DataSetCodeResponse": {
      "properties": {
        "code": {
          "description": "The code required to generate the query for the data set.",
          "type": "string"
        },
        "kernelType": {
          "$ref": "#/definitions/KernelTypeEnum"
        }
      },
      "type": "object"
    },
    "DataSetExportRequest": {
      "properties": {
        "dataSetRequest": {
          "$ref": "#/definitions/DataSetRequest"
        },
        "kernelType": {
          "$ref": "#/definitions/KernelTypeEnum"
        },
        "newNotebook": {
          "default": false,
          "type": "boolean"
        },
        "notebookName": {
          "type": "string"
        }
      },
      "required": [
        "dataSetRequest",
        "notebookName",
        "newNotebook"
      ],
      "type": "object"
    },
    "DataSetListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/DataSet"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DataSetPreviewRequest": {
      "properties": {
        "cohortIds": {
          "description": "The ids of all cohorts in the data set\n",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "conceptSetIds": {
          "description": "The ids of all concept sets in the data set\n",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "domain": {
          "$ref": "#/definitions/Domain"
        },
        "includesAllParticipants": {
          "default": false,
          "description": "Whether to include all participants or filter by cohorts\n",
          "type": "boolean"
        },
        "prePackagedConceptSet": {
          "$ref": "#/definitions/PrePackagedConceptSetEnum"
        },
        "values": {
          "description": "All the selected values in the data set\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "domain"
      ],
      "type": "object"
    },
    "DataSetPreviewResponse": {
      "properties": {
        "domain": {
          "$ref": "#/definitions/Domain"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/DataSetPreviewValueList"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DataSetPreviewValueList": {
      "properties": {
        "queryValue": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "value": {
          "description": "Value selected by user which will act as column header in preview table",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DataSetQuery": {
      "properties": {
        "domain": {
          "$ref": "#/definitions/Domain",
          "description": "Domain corresponding to an OMOP table that can contain rows for the concepts in this concept set. Note that the Domain values RACE, GENDER, and ETHNICITY are not allowed here; it makes sense to specify concepts in these domains in cohort criteria, but there isn't much value in having concept sets defined for them.\n"
        },
        "namedParameters": {
          "description": "The set of named parameters to use for the SQL query.\n",
          "items": {
            "$ref": "#/definitions/NamedParameterEntry"
          },
          "type": "array"
        },
        "query": {
          "description": "The parameterized BigQuery SQL string to fetch the domain-specific subset of the data set from the CDR.\n",
          "type": "string"
        }
      },
      "required": [
        "domain",
        "query"
      ],
      "type": "object"
    },
    "DataSetRequest": {
      "properties": {
        "cohortIds": {
          "description": "The ids of all cohorts in the data set\n",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "conceptSetIds": {
          "description": "The ids of all concept sets in the data set\n",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "domainValuePairs": {
          "description": "All the selected domain/value pairs in the data set\n",
          "items": {
            "$ref": "#/definitions/DomainValuePair"
          },
          "type": "array"
        },
        "etag": {
          "description": "Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.\n",
          "type": "string"
        },
        "includesAllParticipants": {
          "default": false,
          "description": "Whether to include all participants or filter by cohorts\n",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "prePackagedConceptSet": {
          "$ref": "#/definitions/PrePackagedConceptSetEnum"
        },
        "workspaceId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "DataTableSpecification": {
      "properties": {
        "cdrVersionName": {
          "description": "The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used\n",
          "type": "string"
        },
        "cohortName": {
          "description": "The name of a cohort that data should be retrieved for. This and cohortSpec should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR.\n",
          "type": "string"
        },
        "cohortSpec": {
          "description": "JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). This and cohortName should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR.\n",
          "type": "string"
        },
        "maxResults": {
          "description": "The maximum number of results returned in the data table. Defaults to no limit (all matching results are returned.)\n",
          "format": "int64",
          "type": "integer"
        },
        "statusFilter": {
          "description": "An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.)\n",
          "items": {
            "$ref": "#/definitions/CohortStatus"
          },
          "type": "array"
        },
        "tableQuery": {
          "$ref": "#/definitions/TableQuery",
          "description": "A query specifying how to pull data out of a single table. If tableQuery is not specified, just Person.person_id will be extracted.\n"
        }
      },
      "type": "object"
    },
    "DemoChartInfo": {
      "properties": {
        "ageRange": {
          "description": "age range of subject",
          "type": "string"
        },
        "count": {
          "description": "number of subjects",
          "format": "int64",
          "type": "integer"
        },
        "gender": {
          "description": "gender of subject",
          "type": "string"
        },
        "race": {
          "description": "race of subject",
          "type": "string"
        }
      },
      "required": [
        "gender",
        "race",
        "ageRange",
        "count"
      ],
      "type": "object"
    },
    "DemoChartInfoListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/DemoChartInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "DemographicSurvey": {
      "properties": {
        "disability": {
          "default": false,
          "type": "boolean"
        },
        "education": {
          "$ref": "#/definitions/Education"
        },
        "ethnicity": {
          "$ref": "#/definitions/Ethnicity"
        },
        "gender": {
          "items": {
            "$ref": "#/definitions/Gender"
          },
          "type": "array"
        },
        "race": {
          "items": {
            "$ref": "#/definitions/Race"
          },
          "type": "array"
        },
        "yearOfBirth": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "Disability": {
      "enum": [
        true,
        false
      ],
      "type": "string"
    },
    "Domain": {
      "description": "a domain for concepts corresponding to a table in the OMOP schema",
      "enum": [
        "OBSERVATION",
        "PROCEDURE",
        "DRUG",
        "CONDITION",
        "MEASUREMENT",
        "DEVICE",
        "DEATH",
        "VISIT",
        "SURVEY",
        "PERSON",
        "PHYSICALMEASUREMENT"
      ],
      "type": "string"
    },
    "DomainCount": {
      "properties": {
        "conceptCount": {
          "description": "number of concepts matching the search query in this domain",
          "format": "int64",
          "type": "integer"
        },
        "domain": {
          "$ref": "#/definitions/Domain",
          "description": "the domain ID"
        },
        "name": {
          "description": "display name of the domain",
          "type": "string"
        }
      },
      "required": [
        "domain",
        "name",
        "conceptCount"
      ],
      "type": "object"
    },
    "DomainInfo": {
      "properties": {
        "allConceptCount": {
          "description": "number of concepts in this domain (standard or non-standard)",
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "description": "description of the domain",
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/Domain",
          "description": "the domain ID"
        },
        "name": {
          "description": "display name of the domain",
          "type": "string"
        },
        "participantCount": {
          "description": "number of participants with data in the CDR for a concept in this domain",
          "format": "int64",
          "type": "integer"
        },
        "standardConceptCount": {
          "description": "number of standard concepts in this domain",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "domain",
        "name",
        "description",
        "standardConceptCount",
        "allConceptCount",
        "participantCount"
      ],
      "type": "object"
    },
    "DomainInfoResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/DomainInfo"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "DomainType": {
      "enum": [
        "CONDITION",
        "PROCEDURE",
        "OBSERVATION",
        "DRUG",
        "ALL_EVENTS",
        "DEVICE",
        "VISIT",
        "MEASUREMENT",
        "PHYSICAL_MEASUREMENT",
        "LAB",
        "VITAL",
        "SURVEY",
        "PERSON"
      ],
      "type": "string"
    },
    "DomainValue": {
      "description": "Domain values map to various column names in OMOP.\n",
      "properties": {
        "value": {
          "description": "The user facing display name for the value.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ],
      "type": "object"
    },
    "DomainValuePair": {
      "properties": {
        "domain": {
          "$ref": "#/definitions/Domain",
          "description": "Domain corresponding to an OMOP table.\n"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DomainValuesResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/DomainValue"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "DuplicateCohortRequest": {
      "properties": {
        "newName": {
          "type": "string"
        },
        "originalCohortId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Education": {
      "enum": [
        "NO_EDUCATION",
        "GRADES_1_12",
        "UNDERGRADUATE",
        "COLLEGE_GRADUATE",
        "MASTER",
        "DOCTORATE"
      ],
      "type": "string"
    },
    "EducationalRole": {
      "enum": [
        "TEACHER",
        "STUDENT",
        "ADMIN",
        "FREE_TEXT"
      ],
      "type": "string"
    },
    "EmailVerificationStatus": {
      "description": "stage of email verification",
      "enum": [
        "unverified",
        "pending",
        "subscribed"
      ],
      "type": "string"
    },
    "EmptyResponse": {
      "properties": {
        "additionalInfo": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ErrorCode": {
      "description": "Short parsable error descriptions",
      "enum": [
        "PARSE_ERROR",
        "USER_DISABLED"
      ],
      "type": "string"
    },
    "ErrorResponse": {
      "properties": {
        "errorClassName": {
          "type": "string"
        },
        "errorCode": {
          "$ref": "#/definitions/ErrorCode",
          "description": "Short description of the type of error"
        },
        "errorUniqueId": {
          "description": "Unique ID for this error response, for correlation with backend logs",
          "type": "string"
        },
        "message": {
          "description": "General error message for the response.",
          "type": "string"
        },
        "statusCode": {
          "description": "HTTP status code",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Ethnicity": {
      "enum": [
        "HISPANIC",
        "NOT_HISPANIC",
        "PREFER_NO_ANSWER"
      ],
      "type": "string"
    },
    "FeaturedWorkspace": {
      "properties": {
        "category": {
          "$ref": "#/definitions/FeaturedWorkspaceCategory",
          "description": "The category that this workspace belongs to"
        },
        "id": {
          "description": "the Firecloud id of the workspace",
          "type": "string"
        },
        "name": {
          "description": "the name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "the namespace of the workspace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FeaturedWorkspaceCategory": {
      "enum": [
        "PHENOTYPE_LIBRARY",
        "TUTORIAL_WORKSPACES"
      ],
      "type": "string"
    },
    "FeaturedWorkspacesConfigResponse": {
      "properties": {
        "featuredWorkspacesList": {
          "items": {
            "$ref": "#/definitions/FeaturedWorkspace"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "FieldSet": {
      "description": "A specification for fields to retrieve about participants in a cohort. Exactly one of the properties below should be specified.\n",
      "properties": {
        "annotationQuery": {
          "$ref": "#/definitions/AnnotationQuery",
          "description": "A query specifying how to retrieve annotation values created about participants in a cohort during cohort review. Either this or tableQuery should be set (not both.)\n"
        },
        "tableQuery": {
          "$ref": "#/definitions/TableQuery",
          "description": "A query specifying how to pull data out of a single table. Either this or annotationQuery should be set (not both.)\n"
        }
      },
      "type": "object"
    },
    "FileDetail": {
      "properties": {
        "lastModifiedTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "File Name",
          "type": "string"
        },
        "path": {
          "description": "The path is in format of gs://bucket-name/name",
          "type": "string"
        }
      },
      "required": [
        "name",
        "path",
        "lastModifiedTime"
      ],
      "type": "object"
    },
    "Filter": {
      "properties": {
        "operator": {
          "$ref": "#/definitions/Operator"
        },
        "property": {
          "$ref": "#/definitions/FilterColumns"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "property",
        "operator",
        "values"
      ]
    },
    "FilterColumns": {
      "enum": [
        "PARTICIPANTID",
        "STATUS",
        "GENDER",
        "BIRTHDATE",
        "RACE",
        "ETHNICITY",
        "DECEASED",
        "START_DATE",
        "STANDARD_CODE",
        "STANDARD_VOCAB",
        "STANDARD_NAME",
        "STANDARD_CONCEPT_ID",
        "SOURCE_CODE",
        "SOURCE_VOCAB",
        "SOURCE_NAME",
        "SOURCE_CONCEPT_ID",
        "DOMAIN",
        "AGE_AT_EVENT",
        "NUM_OF_MENTIONS",
        "FIRST_MENTION",
        "LAST_MENTION",
        "VISIT_TYPE",
        "ROUTE",
        "DOSE",
        "STRENGTH",
        "VAL_AS_NUMBER",
        "UNIT",
        "REF_RANGE",
        "SURVEY_NAME",
        "QUESTION",
        "ANSWER"
      ],
      "type": "string"
    },
    "FilterList": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/Filter"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "Gender": {
      "enum": [
        "MALE",
        "FEMALE",
        "NON_BINARY",
        "TRANSGENDER",
        "INTERSEX",
        "NONE",
        "PREFER_NO_ANSWER"
      ],
      "type": "string"
    },
    "IndustryRole": {
      "enum": [
        "PRE_DOCTORAL",
        "POST_DOCTORAL",
        "EARLY",
        "PI",
        "FREE_TEXT"
      ],
      "type": "string"
    },
    "InstitutionalAffiliation": {
      "properties": {
        "institution": {
          "type": "string"
        },
        "nonAcademicAffiliation": {
          "$ref": "#/definitions/NonAcademicAffiliation",
          "type": "string"
        },
        "other": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvitationVerificationRequest": {
      "properties": {
        "invitationKey": {
          "description": "Invitation key for verification",
          "type": "string"
        }
      },
      "required": [
        "invitationKey"
      ],
      "type": "object"
    },
    "KernelTypeEnum": {
      "enum": [
        "Python",
        "R"
      ],
      "type": "string"
    },
    "MarkDataSetRequest": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "resourceType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MatchType": {
      "description": "match column type on concept search",
      "enum": [
        "CONCEPT_CODE",
        "CONCEPT_ID",
        "CONCEPT_NAME"
      ],
      "type": "string"
    },
    "MaterializeCohortRequest": {
      "properties": {
        "cdrVersionName": {
          "description": "The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used\n",
          "type": "string"
        },
        "cohortName": {
          "description": "The name of a cohort that is to be evaluated. Either this or cohortSpec should be specified\n",
          "type": "string"
        },
        "cohortSpec": {
          "description": "JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). Either this or cohortName should be specified\n",
          "type": "string"
        },
        "fieldSet": {
          "$ref": "#/definitions/FieldSet",
          "description": "Specification defining what data to return for participants in the cohort. Defaults to just participant IDs.\n"
        },
        "pageSize": {
          "description": "Maximum number of results to return in a response. Defaults to 1000.\n",
          "format": "int32",
          "type": "integer"
        },
        "pageToken": {
          "description": "Pagination token retrieved from a previous call to materializeCohort; used for retrieving additional pages of results. If this is specified, all other fields on MaterializeCohortRequest apart from pageSize must match the values specified on the request that generated this token.\n",
          "type": "string"
        },
        "statusFilter": {
          "description": "An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.)\n",
          "items": {
            "$ref": "#/definitions/CohortStatus"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MaterializeCohortResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Pagination token that can be used in a subsequent call to MaterializeCohortRequest to retrieve more results. If not set, there are no more results to retrieve.\n",
          "type": "string"
        },
        "results": {
          "description": "An array of JSON dictionaries representing results to the cohort materialization. (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a list[object] where each object is a dictionary. In Typescript clients, this is an Array<any> where each object is a dictionary.) Keys in the dictionaries will be the columns selected in the field set provided in the request, and the values will be the values of those columns.\n",
          "items": {
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "results"
      ],
      "type": "object"
    },
    "Modifier": {
      "example": {
        "singleValued": {
          "name": "AGE_AT_EVENT",
          "operands": [
            "20"
          ],
          "operator": "GREATER_THAN_OR_EQUAL_TO"
        }
      },
      "properties": {
        "name": {
          "$ref": "#/definitions/ModifierType",
          "description": "name/type of modifier"
        },
        "operands": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "operator": {
          "$ref": "#/definitions/Operator",
          "description": "Machine name of the operator"
        }
      },
      "required": [
        "name",
        "operator",
        "operands"
      ],
      "type": "object"
    },
    "ModifierType": {
      "description": "possible types of modifiers",
      "enum": [
        "AGE_AT_EVENT",
        "NUM_OF_OCCURRENCES",
        "EVENT_DATE",
        "ENCOUNTERS"
      ],
      "type": "string"
    },
    "ModifyCohortStatusRequest": {
      "properties": {
        "status": {
          "$ref": "#/definitions/CohortStatus"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "ModifyParticipantCohortAnnotationRequest": {
      "properties": {
        "annotationValueBoolean": {
          "default": null,
          "description": "The Value of the annotation if the AnnotationType is BOOLEAN",
          "type": "boolean"
        },
        "annotationValueDate": {
          "description": "The Value of the annotation if the AnnotationType is DATE",
          "type": "string"
        },
        "annotationValueEnum": {
          "description": "The option chosen for the annotation if the AnnotationType is ENUM",
          "type": "string"
        },
        "annotationValueInteger": {
          "description": "The Value of the annotation if the AnnotationType is INTEGER",
          "type": "integer"
        },
        "annotationValueString": {
          "description": "The Value of the annotation if the AnnotationType is STRING",
          "type": "string"
        }
      },
      "type": "object"
    },
    "NamedParameterEntry": {
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/NamedParameterValue"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "NamedParameterValue": {
      "properties": {
        "arrayType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parameterType": {
          "description": "Should be any parameter allowed by bigquery, with the exception of struct. The list of parameter types can be found here: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types\n",
          "type": "string"
        },
        "parameterValue": {
          "description": "Can be any value",
          "type": "object"
        }
      },
      "required": [
        "name",
        "parameterType",
        "parameterValue"
      ],
      "type": "object"
    },
    "NihToken": {
      "properties": {
        "jwt": {
          "description": "the encoded/signed JWT",
          "type": "string"
        }
      },
      "required": [
        "jwt"
      ],
      "type": "object"
    },
    "NonAcademicAffiliation": {
      "enum": [
        "INDUSTRY",
        "EDUCATIONAL_INSTITUTION",
        "COMMUNITY_SCIENTIST",
        "FREE_TEXT"
      ],
      "type": "string"
    },
    "NotebookLockingMetadataResponse": {
      "properties": {
        "lastLockedBy": {
          "type": "string"
        },
        "lockExpirationTime": {
          "description": "The time when the lock will expire, in ms from the Unix epoch",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Operator": {
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "LESS_THAN",
        "GREATER_THAN",
        "LESS_THAN_OR_EQUAL_TO",
        "GREATER_THAN_OR_EQUAL_TO",
        "LIKE",
        "IN",
        "BETWEEN"
      ],
      "type": "string"
    },
    "PageFilterRequest": {
      "properties": {
        "domain": {
          "$ref": "#/definitions/DomainType",
          "description": "Different domain types in omop"
        },
        "filters": {
          "$ref": "#/definitions/FilterList"
        },
        "page": {
          "description": "specific page (default is 0)",
          "type": "integer"
        },
        "pageSize": {
          "description": "page size of results (default is 25)",
          "type": "integer"
        },
        "sortColumn": {
          "$ref": "#/definitions/FilterColumns",
          "description": "Column upon which to sort (default is 'participantId')"
        },
        "sortOrder": {
          "$ref": "#/definitions/SortOrder"
        }
      },
      "required": [
        "page",
        "pageSize",
        "sortOrder"
      ]
    },
    "PageVisit": {
      "properties": {
        "firstVisit": {
          "format": "int64",
          "type": "integer"
        },
        "page": {
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ParticipantChartData": {
      "properties": {
        "ageAtEvent": {
          "description": "The age at event for the participant",
          "type": "integer"
        },
        "rank": {
          "description": "the rank of the data",
          "type": "integer"
        },
        "standardName": {
          "description": "the standard name",
          "type": "string"
        },
        "standardVocabulary": {
          "description": "the standard vocabulary",
          "type": "string"
        },
        "startDate": {
          "description": "the date of the event",
          "type": "string"
        }
      },
      "required": [
        "standardName",
        "standardVocabulary",
        "startDate",
        "ageAtEvent",
        "rank"
      ],
      "type": "object"
    },
    "ParticipantChartDataListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ParticipantChartData"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ParticipantCohortAnnotation": {
      "properties": {
        "annotationId": {
          "description": "participant annotation id.",
          "format": "int64",
          "type": "integer"
        },
        "annotationValueBoolean": {
          "default": null,
          "description": "The Value of the annotation if the AnnotationType is BOOLEAN",
          "type": "boolean"
        },
        "annotationValueDate": {
          "description": "The Value of the annotation if the AnnotationType is DATE",
          "type": "string"
        },
        "annotationValueEnum": {
          "description": "The option chosen for the annotation if the AnnotationType is ENUM",
          "type": "string"
        },
        "annotationValueInteger": {
          "description": "The Value of the annotation if the AnnotationType is INTEGER",
          "type": "integer"
        },
        "annotationValueString": {
          "description": "The Value of the annotation if the AnnotationType is STRING",
          "type": "string"
        },
        "cohortAnnotationDefinitionId": {
          "description": "annotation definition id.",
          "format": "int64",
          "type": "integer"
        },
        "cohortReviewId": {
          "description": "the cohort reivew id.",
          "format": "int64",
          "type": "integer"
        },
        "participantId": {
          "description": "the participant id.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "cohortReviewId",
        "participantId",
        "cohortAnnotationDefinitionId"
      ],
      "type": "object"
    },
    "ParticipantCohortAnnotationListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/ParticipantCohortAnnotation"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "ParticipantCohortStatus": {
      "properties": {
        "birthDate": {
          "type": "string"
        },
        "deceased": {
          "default": false,
          "type": "boolean"
        },
        "ethnicity": {
          "type": "string"
        },
        "ethnicityConceptId": {
          "format": "int64",
          "type": "integer"
        },
        "gender": {
          "type": "string"
        },
        "genderConceptId": {
          "format": "int64",
          "type": "integer"
        },
        "participantId": {
          "format": "int64",
          "type": "integer"
        },
        "race": {
          "type": "string"
        },
        "raceConceptId": {
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/CohortStatus"
        }
      },
      "required": [
        "participantId",
        "status"
      ],
      "type": "object"
    },
    "ParticipantData": {
      "properties": {
        "ageAtEvent": {
          "description": "The age at event for the participant",
          "type": "integer"
        },
        "answer": {
          "description": "an answer in this survey",
          "type": "string"
        },
        "domain": {
          "description": "the domain of this data.",
          "type": "string"
        },
        "dose": {
          "description": "The quantity of this data",
          "type": "string"
        },
        "firstMention": {
          "description": "The date of first mention of this data",
          "type": "string"
        },
        "itemDate": {
          "description": "The date of the event",
          "type": "string"
        },
        "lastMention": {
          "description": "The date of last mention of this data",
          "type": "string"
        },
        "numMentions": {
          "description": "The number of mentions of this data",
          "type": "string"
        },
        "question": {
          "description": "a question in this survey",
          "type": "string"
        },
        "refRange": {
          "description": "The reference range of this data",
          "type": "string"
        },
        "route": {
          "description": "The route of this data",
          "type": "string"
        },
        "sourceCode": {
          "description": "The source code of this data",
          "type": "string"
        },
        "sourceConceptId": {
          "description": "The source concept id",
          "format": "int64",
          "type": "integer"
        },
        "sourceName": {
          "description": "The source name of this data",
          "type": "string"
        },
        "sourceVocabulary": {
          "description": "The source vocabulary type of this data",
          "type": "string"
        },
        "standardCode": {
          "description": "The standard code of this data",
          "type": "string"
        },
        "standardConceptId": {
          "description": "The standard concept id",
          "format": "int64",
          "type": "integer"
        },
        "standardName": {
          "description": "The standard name of this data",
          "type": "string"
        },
        "standardVocabulary": {
          "description": "The standard vocabulary of this data",
          "type": "string"
        },
        "strength": {
          "description": "The strength of this data",
          "type": "string"
        },
        "survey": {
          "description": "The name of this survey",
          "type": "string"
        },
        "unit": {
          "description": "The unit of this data",
          "type": "string"
        },
        "value": {
          "description": "The source value of this data",
          "type": "string"
        },
        "visitType": {
          "description": "The visit type of this data",
          "type": "string"
        }
      },
      "required": [
        "itemDate"
      ]
    },
    "ParticipantDataListResponse": {
      "properties": {
        "count": {
          "description": "the total count of items.",
          "format": "int64",
          "type": "integer"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/ParticipantData"
          },
          "type": "array"
        }
      },
      "required": [
        "items",
        "count"
      ],
      "type": "object"
    },
    "ParticipantDemographics": {
      "properties": {
        "ethnicityList": {
          "items": {
            "$ref": "#/definitions/ConceptIdName"
          },
          "type": "array"
        },
        "genderList": {
          "items": {
            "$ref": "#/definitions/ConceptIdName"
          },
          "type": "array"
        },
        "raceList": {
          "items": {
            "$ref": "#/definitions/ConceptIdName"
          },
          "type": "array"
        }
      },
      "required": [
        "genderList",
        "raceList",
        "ethnicityList"
      ],
      "type": "object"
    },
    "PrePackagedConceptSetEnum": {
      "enum": [
        "NONE",
        "DEMOGRAPHICS",
        "SURVEY",
        "BOTH"
      ],
      "type": "string"
    },
    "Profile": {
      "properties": {
        "aboutYou": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "areaOfResearch": {
          "type": "string"
        },
        "authorities": {
          "description": "authorities granted to this user",
          "items": {
            "$ref": "#/definitions/Authority"
          },
          "type": "array"
        },
        "betaAccessBypassTime": {
          "description": "Timestamp when a user was bypassed for beta access",
          "format": "int64",
          "type": "integer"
        },
        "betaAccessRequestTime": {
          "description": "Timestamp when the user requests beta access.",
          "format": "int64",
          "type": "integer"
        },
        "complianceTrainingBypassTime": {
          "description": "Timestamp when a user was bypassed for completing compliance training",
          "format": "int64",
          "type": "integer"
        },
        "complianceTrainingCompletionTime": {
          "description": "Timestamp when a user completed compliance training.",
          "format": "int64",
          "type": "integer"
        },
        "contactEmail": {
          "description": "email address that can be used to contact the user",
          "type": "string"
        },
        "contactEmailFailure": {
          "default": false,
          "description": "Whether or not contact email could be added to verification list",
          "type": "boolean"
        },
        "creationNonce": {
          "description": "A value which can be used to secure API calls during the account creation flow, prior to account login.\n",
          "type": "string"
        },
        "currentPosition": {
          "description": "the user's curent position (job title)",
          "type": "string"
        },
        "dataAccessLevel": {
          "$ref": "#/definitions/DataAccessLevel",
          "description": "what level of data access the user has"
        },
        "dataUseAgreementBypassTime": {
          "description": "Timestamp when a user was bypassed for completing the data use agreement.",
          "format": "int64",
          "type": "integer"
        },
        "dataUseAgreementCompletionTime": {
          "description": "Timestamp when a user completed the data use agreement.",
          "format": "int64",
          "type": "integer"
        },
        "dataUseAgreementSignedVersion": {
          "description": "Version of the data use agreement that the user last signed.",
          "format": "int32",
          "type": "integer"
        },
        "demographicSurvey": {
          "$ref": "#/definitions/DemographicSurvey"
        },
        "demographicSurveyCompletionTime": {
          "description": "Timestamp when the user completed a demographic survey in milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "disabled": {
          "default": false,
          "type": "boolean"
        },
        "emailVerificationBypassTime": {
          "description": "Timestamp when a user was bypassed for completing email verification",
          "format": "int64",
          "type": "integer"
        },
        "emailVerificationCompletionTime": {
          "description": "Timestamp when a user completed email verification",
          "format": "int64",
          "type": "integer"
        },
        "emailVerificationStatus": {
          "$ref": "#/definitions/EmailVerificationStatus"
        },
        "eraCommonsBypassTime": {
          "description": "Timestamp when the user was bypassed for completing era commons linking.",
          "format": "int64",
          "type": "integer"
        },
        "eraCommonsCompletionTime": {
          "description": "Timestamp when the user completed era commons linking.",
          "format": "int64",
          "type": "integer"
        },
        "eraCommonsLinkExpireTime": {
          "default": 0,
          "description": "The FireCloud-calculated expiration time",
          "format": "int64",
          "type": "integer"
        },
        "eraCommonsLinkedNihUsername": {
          "description": "The user's NIH username",
          "type": "string"
        },
        "familyName": {
          "description": "the user's family  name (e.g. Jones)",
          "type": "string"
        },
        "firstSignInTime": {
          "format": "int64",
          "type": "integer"
        },
        "freeTierDollarQuota": {
          "format": "double",
          "type": "number"
        },
        "freeTierUsage": {
          "format": "double",
          "type": "number"
        },
        "givenName": {
          "description": "the user's given name (e.g. Alice)",
          "type": "string"
        },
        "idVerificationBypassTime": {
          "description": "Timestamp when the user is bypassed for completing identity verification",
          "format": "int64",
          "type": "integer"
        },
        "idVerificationCompletionTime": {
          "description": "Timestamp when the user completes identity verification.",
          "format": "int64",
          "type": "integer"
        },
        "institutionalAffiliations": {
          "items": {
            "$ref": "#/definitions/InstitutionalAffiliation"
          },
          "type": "array"
        },
        "organization": {
          "description": "the user's current organization",
          "type": "string"
        },
        "pageVisits": {
          "description": "pages user has visited",
          "items": {
            "$ref": "#/definitions/PageVisit"
          },
          "type": "array"
        },
        "phoneNumber": {
          "description": "the user's phone number",
          "type": "string"
        },
        "twoFactorAuthBypassTime": {
          "description": "Timestamp when the user was bypassed for completing two factor authentication in milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "twoFactorAuthCompletionTime": {
          "description": "Timestamp when the user completed two factor authentication in milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "userId": {
          "description": "researchallofus userId",
          "format": "int64",
          "type": "integer"
        },
        "username": {
          "description": "researchallofus username",
          "type": "string"
        }
      },
      "required": [
        "username",
        "dataAccessLevel"
      ],
      "type": "object"
    },
    "Race": {
      "enum": [
        "AIAN",
        "ASIAN",
        "AA",
        "NHOPI",
        "WHITE",
        "NONE",
        "PREFER_NO_ANSWER"
      ],
      "type": "string"
    },
    "ReadOnlyNotebookResponse": {
      "properties": {
        "html": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecentResource": {
      "properties": {
        "cohort": {
          "$ref": "#/definitions/Cohort"
        },
        "cohortReview": {
          "$ref": "#/definitions/CohortReview"
        },
        "conceptSet": {
          "$ref": "#/definitions/ConceptSet"
        },
        "dataSet": {
          "$ref": "#/definitions/DataSet"
        },
        "modifiedTime": {
          "type": "string"
        },
        "notebook": {
          "$ref": "#/definitions/FileDetail"
        },
        "permission": {
          "type": "string"
        },
        "workspaceFirecloudName": {
          "type": "string"
        },
        "workspaceId": {
          "format": "int64",
          "type": "integer"
        },
        "workspaceNamespace": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecentResourceRequest": {
      "properties": {
        "notebookName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecentResourceResponse": {
      "items": {
        "$ref": "#/definitions/RecentResource"
      },
      "type": "array"
    },
    "RecentWorkspace": {
      "properties": {
        "accessLevel": {
          "$ref": "#/definitions/WorkspaceAccessLevel"
        },
        "accessedTime": {
          "description": "The date and time that the workspace was last accessed, in ISO-8601 format",
          "type": "string"
        },
        "workspace": {
          "$ref": "#/definitions/Workspace"
        }
      },
      "type": "object"
    },
    "RecentWorkspaceResponse": {
      "items": {
        "$ref": "#/definitions/RecentWorkspace"
      },
      "type": "array"
    },
    "ResearchPurpose": {
      "properties": {
        "additionalNotes": {
          "type": "string"
        },
        "ancestry": {
          "default": false,
          "type": "boolean"
        },
        "anticipatedFindings": {
          "type": "string"
        },
        "approved": {
          "default": null,
          "type": "boolean"
        },
        "commercialPurpose": {
          "default": false,
          "type": "boolean"
        },
        "controlSet": {
          "default": false,
          "type": "boolean"
        },
        "diseaseFocusedResearch": {
          "default": false,
          "type": "boolean"
        },
        "diseaseOfFocus": {
          "type": "string"
        },
        "drugDevelopment": {
          "default": false,
          "type": "boolean"
        },
        "educational": {
          "default": false,
          "type": "boolean"
        },
        "intendedStudy": {
          "type": "string"
        },
        "methodsDevelopment": {
          "default": false,
          "type": "boolean"
        },
        "otherPopulationDetails": {
          "type": "string"
        },
        "otherPurpose": {
          "default": false,
          "type": "boolean"
        },
        "otherPurposeDetails": {
          "type": "string"
        },
        "population": {
          "default": false,
          "type": "boolean"
        },
        "populationDetails": {
          "items": {
            "$ref": "#/definitions/specificPopulationEnum"
          },
          "type": "array"
        },
        "populationHealth": {
          "default": false,
          "type": "boolean"
        },
        "reasonForAllOfUs": {
          "type": "string"
        },
        "reviewRequested": {
          "default": false,
          "type": "boolean"
        },
        "socialBehavioral": {
          "default": false,
          "type": "boolean"
        },
        "timeRequested": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "timeReviewed": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "diseaseFocusedResearch",
        "methodsDevelopment",
        "controlSet",
        "ancestry",
        "commercialPurpose",
        "population",
        "reviewRequested",
        "socialBehavioral",
        "populationHealth",
        "educational",
        "otherPurpose",
        "reasonForAllOfUs",
        "intendedStudy",
        "anticipatedFindings",
        "drugDevelopment"
      ],
      "type": "object"
    },
    "ResearchPurposeReviewRequest": {
      "description": "Approve or reject a workspace's research purpose.",
      "properties": {
        "approved": {
          "default": false,
          "type": "boolean"
        }
      },
      "required": [
        "approved"
      ],
      "type": "object"
    },
    "ResendWelcomeEmailRequest": {
      "properties": {
        "creationNonce": {
          "description": "The nonce returned from the account creation API.",
          "type": "string"
        },
        "username": {
          "description": "Username of account to resend welcome email to",
          "type": "string"
        }
      },
      "required": [
        "username",
        "creationNonce"
      ],
      "type": "object"
    },
    "ResultFilters": {
      "description": "A list of filters applied to the results of a query. Only results matching the filter criteria should be returned. Exactly one of \"allOf\", \"anyOf\", and \"columnFilter\" should be set.\n",
      "properties": {
        "allOf": {
          "description": "A list of result filters. All filters matching means a result should be returned (or not returned if \"not\" is true.)\n",
          "items": {
            "$ref": "#/definitions/ResultFilters"
          },
          "type": "array"
        },
        "anyOf": {
          "description": "A list of column filters. Any filters matching means a result should be returned (or not returned if \"not\" is true.)\n",
          "items": {
            "$ref": "#/definitions/ResultFilters"
          },
          "type": "array"
        },
        "columnFilter": {
          "$ref": "#/definitions/ColumnFilter",
          "description": "A filter on a column in the table. Only a result matching this filter should be returned (or not returned if \"not\" is true.)\n"
        },
        "if_not": {
          "default": false,
          "description": "Set to true if a result matching allOf or anyOf below should result in a result *not* being returned.\n",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ReviewStatus": {
      "description": "possible values indicating whether review has been created",
      "enum": [
        "NONE",
        "CREATED"
      ],
      "type": "string"
    },
    "SearchConceptsRequest": {
      "properties": {
        "domain": {
          "$ref": "#/definitions/Domain",
          "description": "The domain for the concepts returned (e.g. OBSERVATION, DRUG). Note that this may map to multiple domain ID values in OMOP.\n"
        },
        "includeDomainCounts": {
          "default": false,
          "description": "True if per-domain counts of concepts matching the criteria should be included in the response",
          "type": "boolean"
        },
        "maxResults": {
          "description": "The maximum number of results returned. Defaults to 20.",
          "format": "int32",
          "type": "integer"
        },
        "pageNumber": {
          "default": 0,
          "description": "By default it returns the first page and then its next pages from that on.",
          "type": "integer"
        },
        "query": {
          "description": "A query string that can be used to match a subset of the name (case-insensitively), the entire code value (case-insensitively), or the concept ID. If not specified, all concepts are returned.\n",
          "type": "string"
        },
        "standardConceptFilter": {
          "$ref": "#/definitions/StandardConceptFilter",
          "description": "STANDARD_CONCEPTS if only standard concepts should be returned, NON_STANDARD_CONCEPTS if only non-standard concepts should be returned; defaults to ALL_CONCEPTS, meaning both standard and non-standard concepts will be returned.\n"
        }
      },
      "required": [
        "standardConceptFilter",
        "domain",
        "includeDomainCounts"
      ],
      "type": "object"
    },
    "SearchGroup": {
      "description": "A SearchGroup is a container for groups of criteria which are `OR`ed together.\n",
      "properties": {
        "id": {
          "description": "Unique within the cohort definition",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/SearchGroupItem"
          },
          "type": "array"
        },
        "mention": {
          "$ref": "#/definitions/TemporalMention",
          "description": "first, last or any mention(used in temporal realtionships)"
        },
        "temporal": {
          "default": false,
          "description": "indicates if this search group relates to time",
          "type": "boolean"
        },
        "time": {
          "$ref": "#/definitions/TemporalTime",
          "description": "time frame between temporal items"
        },
        "timeFrame": {
          "description": "time increments(Day, Month or Year)",
          "type": "string"
        },
        "timeValue": {
          "description": "time value between temporal items",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "temporal",
        "items"
      ],
      "type": "object"
    },
    "SearchGroupItem": {
      "description": "A SearchGroupItem is the \"line item\" of the Cohort Builder.  It specifies a set of criteria of a given kind, possibly alongside a set of modifiers, the results of which are `OR`ed together with the other criteria in the group.\n",
      "example": {
        "modifiers": [
          {
            "name": "age_at_event",
            "operands": [
              "Arg1",
              "Arg2"
            ],
            "operator": "GTE >="
          }
        ],
        "searchParameters": [
          {
            "conceptId": null,
            "domainId": "Condition",
            "value": "E9293"
          },
          {
            "conceptId": null,
            "domainId": null,
            "value": "E979-E979.9"
          }
        ],
        "type": "ICD9"
      },
      "properties": {
        "id": {
          "description": "Unique within the cohort definition",
          "type": "string"
        },
        "modifiers": {
          "description": "Predicates to apply to the search parameters. Aggregate modifiers (i.e. NUM_OF_OCCURRENCES) are applied independently to each SearchParameter and furthermore, are applied independently to any group elements within those SearchParameters.\nConsider the following example query scenario.\nExample criteria tree: - parent\n  - child1\n  - child2\n\nCurated dataset contains 1 participant with 1 event each of concepts child1 and child2. Search request is made on \"parent\", with a modifier of {type: NUM_OF_OCCURRENCES, operands: [2]}.\nThis does not match - the participant would need to have at least 2 events of type child1 and/or of child2 and/or of parent (in the event that \"parent\" corresponds to a real concept in the data).\nAdditionally, aggregate modifiers are applied secondarily to other modifiers. For example, combining the AGE_AT_EVENT with NUM_OF_OCCURRENCES - first we filter down all events by the age predicate, then we count occurrences.\n",
          "items": {
            "$ref": "#/definitions/Modifier"
          },
          "type": "array"
        },
        "searchParameters": {
          "description": "values that help search for subjects",
          "items": {
            "$ref": "#/definitions/SearchParameter"
          },
          "type": "array"
        },
        "temporalGroup": {
          "description": "temporal group that this item belongs to",
          "type": "integer"
        },
        "type": {
          "description": "type of criteria",
          "type": "string"
        }
      },
      "required": [
        "type",
        "searchParameters",
        "modifiers"
      ],
      "type": "object"
    },
    "SearchParameter": {
      "example": {
        "leafExample": {
          "domainId": "Condition",
          "subtype": "AGE",
          "value": "E9293"
        },
        "parentExample": {
          "domainId": null,
          "subtype": "BP_EHR",
          "value": "E979-E979.9"
        }
      },
      "properties": {
        "ancestorData": {
          "default": false,
          "description": "flag that determines if concept ids need to be looked up in the ancestor table",
          "type": "boolean"
        },
        "attributes": {
          "description": "Attributes are extra inputs provided by users through the UX. Currently used by Demographics(Age), Measurements(Body Height, Weight.. etc) and Physical Measurements(Blood Pressure, Body Weight.. etc). Measurements and Physical Measurements have overlap in many areas such as body weight, but the difference is standard(measurements) and source(physical measurements).\n\n Example demo age search parameter:\n {\n   \"type\": \"DEMO\",\n   \"searchParameters\": [\n     {\n       \"type\": \"DEMO\",\n       \"subtype\": \"AGE\",\n       \"group\": false,\n       \"attributes\": [{\"name\": \"Age\", \"operator\": \"BETWEEN\", \"operands\": [23, 31]}]\n     }\n   ],\n   \"modifiers\": []\n }\n\n Example physical measurement blood pressure(Hypotensive (Systolic <= 90 / Diastolic <= 60))\n {\n   \"type\": \"PM\",\n   \"searchParameters\": [\n     {\n       \"type\": \"PM\",\n       \"subtype\": \"BP\",\n       \"group\": false,\n       \"attributes\": [\n         {\n           \"conceptId\": 903118,\n           \"name\": \"Systolic\",\n           \"operands\": [\"90\"],\n           \"operator\":\"LESS_THAN_OR_EQUAL_TO\"\n         },\n         {\n           \"conceptId\": 903115,\n           \"name\": \"Diastolic\",\n           \"operands\": [\"60\"],\n            \"operator\": \"LESS_THAN_OR_EQUAL_TO\"\n          }\n        ]\n      }\n    ],\n    \"modifiers\": []\n  }\n",
          "items": {
            "$ref": "#/definitions/Attribute"
          },
          "type": "array"
        },
        "conceptId": {
          "description": "The concept id that maps to concept table, if any.",
          "format": "int64",
          "type": "integer"
        },
        "domain": {
          "description": "The omop domain that this criteria belongs to",
          "type": "string"
        },
        "group": {
          "default": false,
          "description": "Specifies if the generating Criterion is a leaf or node in its Criteria tree",
          "type": "boolean"
        },
        "name": {
          "description": "The name of the generating Criterion",
          "type": "string"
        },
        "parameterId": {
          "description": "Unique within the cohort definition",
          "type": "string"
        },
        "standard": {
          "default": false,
          "description": "flag that determines standard or source",
          "type": "boolean"
        },
        "subtype": {
          "description": "The subtype of the generating Criterion",
          "type": "string"
        },
        "type": {
          "description": "The type of the generating Criterion",
          "type": "string"
        },
        "value": {
          "description": "The Criteria code (or name if querying for Deceased)",
          "type": "string"
        }
      },
      "required": [
        "parameterId",
        "name",
        "domain",
        "type",
        "group",
        "ancestorData",
        "standard",
        "attributes"
      ],
      "type": "object"
    },
    "SearchRequest": {
      "description": "The SearchRequest describes the state of the Cohort Builder at any given moment. It contains two keys, `include` and `exclude`, each of which specifies an array of SearchGroups which are `AND`ed together, and which collectively specify which subjects to include or exclude from the cohort.\n",
      "example": {
        "minimum": {
          "include": [
            [
              {
                "searchParameters": [
                  {
                    "value": "A value"
                  }
                ],
                "type": "A Crit Type"
              }
            ]
          ]
        },
        "typical": {
          "exclude": [],
          "include": [
            [
              {
                "searchParameters": [
                  {
                    "domainId": "Bar",
                    "value": "Foo"
                  },
                  {
                    "value": "C"
                  }
                ],
                "type": "ICD9"
              },
              {
                "searchParameters": [
                  {
                    "value": "Baz"
                  }
                ],
                "type": "ICD9"
              }
            ],
            [
              {
                "modifiers": [],
                "searchParameters": [
                  {
                    "domainId": "Bar",
                    "value": "Baz"
                  }
                ],
                "type": "ICD10"
              }
            ]
          ]
        }
      },
      "properties": {
        "excludes": {
          "items": {
            "$ref": "#/definitions/SearchGroup"
          },
          "type": "array"
        },
        "includes": {
          "items": {
            "$ref": "#/definitions/SearchGroup"
          },
          "type": "array"
        }
      },
      "required": [
        "includes",
        "excludes"
      ],
      "type": "object"
    },
    "ShareWorkspaceRequest": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/UserRole"
          },
          "type": "array"
        },
        "workspaceEtag": {
          "description": "Associated workspace etag retrieved via reading the workspaces API. If provided, validates that the workspace (and its user roles) has not been modified since this etag was retrieved.\n",
          "type": "string"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "SortOrder": {
      "enum": [
        "asc",
        "desc"
      ],
      "type": "string"
    },
    "StackTraceElement": {
      "description": "",
      "properties": {
        "className": {
          "description": "class name",
          "type": "string"
        },
        "fileName": {
          "description": "source file name",
          "type": "string"
        },
        "lineNumber": {
          "description": "line number",
          "type": "integer"
        },
        "methodName": {
          "description": "method name",
          "type": "string"
        }
      },
      "required": [
        "className",
        "methodName",
        "fileName",
        "lineNumber"
      ]
    },
    "StandardConceptFilter": {
      "description": "filter on whether standard, non-standard, or all concepts should be returned\\",
      "enum": [
        "ALL_CONCEPTS",
        "STANDARD_CONCEPTS",
        "NON_STANDARD_CONCEPTS",
        "STANDARD_OR_CODE_ID_MATCH"
      ],
      "type": "string"
    },
    "StandardFlag": {
      "properties": {
        "standard": {
          "default": false,
          "description": "flag that determines standard or source",
          "type": "boolean"
        }
      },
      "required": [
        "standard"
      ],
      "type": "object"
    },
    "StatusAlert": {
      "properties": {
        "link": {
          "description": "A URL linking to an incident report where users can read more\n",
          "type": "string"
        },
        "message": {
          "description": "The actual message of the status alert, e.g. 'AoU RW is down because GCP is down'\n",
          "type": "string"
        },
        "statusAlertId": {
          "description": "The primary key of the status alert in the database",
          "format": "int64",
          "type": "integer"
        },
        "title": {
          "description": "Title of the status alert, e.g. 'Service Incident: December 6, 2019'\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StatusResponse": {
      "properties": {
        "firecloudStatus": {
          "default": false,
          "type": "boolean"
        },
        "notebooksStatus": {
          "default": false,
          "type": "boolean"
        }
      },
      "required": [
        "firecloudStatus",
        "notebooksStatus"
      ],
      "type": "object"
    },
    "SurveyAnswerResponse": {
      "properties": {
        "answer": {
          "type": "string"
        },
        "conceptId": {
          "format": "int64",
          "type": "integer"
        },
        "participationCount": {
          "format": "int64",
          "type": "integer"
        },
        "percentAnswered": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "SurveyModule": {
      "properties": {
        "conceptId": {
          "description": "the concept ID for the survey module",
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "description": "description of the module",
          "type": "string"
        },
        "name": {
          "description": "display name of the module",
          "type": "string"
        },
        "orderNumber": {
          "description": "survey release order number",
          "format": "int32",
          "type": "integer"
        },
        "participantCount": {
          "description": "number of participants with data in the CDR for questions in this module",
          "format": "int64",
          "type": "integer"
        },
        "questionCount": {
          "description": "number of questions in the module",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "conceptId",
        "name",
        "description",
        "questionCount",
        "participantCount",
        "orderNumber"
      ],
      "type": "object"
    },
    "SurveyQuestionsResponse": {
      "properties": {
        "conceptId": {
          "format": "int64",
          "type": "integer"
        },
        "question": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Surveys": {
      "description": "a survey for concepts",
      "enum": [
        "THE BASICS",
        "LIFESTYLE",
        "OVERALL HEALTH"
      ],
      "type": "string"
    },
    "SurveysResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/SurveyModule"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "TableQuery": {
      "description": "A specification for retrieving data from a single table.\n",
      "properties": {
        "columns": {
          "description": "An array of columns to retrieve from the table, taken from the table specified above. Defaults to all columns.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "conceptSetName": {
          "description": "A name of a concept set in the workspace used to filter results; results must match one of the concepts in the named concept set. If both filters and conceptSetName are specified, results must match both.\n",
          "type": "string"
        },
        "filters": {
          "$ref": "#/definitions/ResultFilters",
          "description": "Filters on the results. Only results matching the criteria specified in the filters will be returned. If both filters and conceptSetName are specified, results must match both.\n"
        },
        "orderBy": {
          "description": "An array of columns to sort the resulting data by, taken from the table specified above, each one optionally enclosed in \"DESCENDING()\" for descending sort order. Default sort order is \"person_id\" (in ascending order) followed by the ID of the specified table (in ascending order.)\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tableName": {
          "description": "The name of a table containing a person_id column to retrieve data from (e.g. person, observation); should be in the OMOP CDM 5.2 schema.\n",
          "externalDocs": {
            "description": "OMOP CDM 5.2 schema definition",
            "url": "https://github.com/OHDSI/CommonDataModel/blob/v5.2.0/PostgreSQL/OMOP%20CDM%20ddl%20-%20PostgreSQL.sql"
          },
          "type": "string"
        }
      },
      "required": [
        "tableName"
      ],
      "type": "object"
    },
    "TemporalMention": {
      "description": "Mentions refer to occurrences of entry date per person",
      "enum": [
        "ANY_MENTION",
        "FIRST_MENTION",
        "LAST_MENTION"
      ],
      "type": "string"
    },
    "TemporalTime": {
      "description": "time refers to the amount of time in reference to temporal mentions",
      "enum": [
        "DURING_SAME_ENCOUNTER_AS",
        "X_DAYS_BEFORE",
        "X_DAYS_AFTER",
        "WITHIN_X_DAYS_OF"
      ],
      "type": "string"
    },
    "UpdateClusterConfigRequest": {
      "description": "Request to update the default cluster configuration for a given user. Fields of the config may be omitted, in which case a default will be used. Set clusterConfig to null to clear it.\n",
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/ClusterConfig"
        },
        "userEmail": {
          "type": "string"
        }
      },
      "required": [
        "userEmail"
      ],
      "type": "object"
    },
    "UpdateConceptSetRequest": {
      "properties": {
        "addedIds": {
          "description": "The IDs of concepts to be added to the concept set.\n",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "etag": {
          "description": "Etag of the concept set being modified. Validates that the concept set has not been modified since this etag was retrieved.\n",
          "type": "string"
        },
        "removedIds": {
          "description": "The IDs of concepts to be removed from the concept set.\n",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "required": [
        "etag"
      ],
      "type": "object"
    },
    "UpdateContactEmailRequest": {
      "properties": {
        "contactEmail": {
          "description": "Email to update contact email",
          "type": "string"
        },
        "creationNonce": {
          "description": "The nonce returned from the account creation API.",
          "type": "string"
        },
        "username": {
          "description": "Username for account.",
          "type": "string"
        }
      },
      "required": [
        "contactEmail",
        "username",
        "creationNonce"
      ],
      "type": "object"
    },
    "UpdateUserDisabledRequest": {
      "properties": {
        "disabled": {
          "default": false,
          "description": "Set to true to disable user in auth domain, false otherwise",
          "type": "boolean"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "email"
      ],
      "type": "object"
    },
    "UpdateWorkspaceRequest": {
      "properties": {
        "workspace": {
          "$ref": "#/definitions/Workspace"
        }
      },
      "required": [
        "workspace"
      ],
      "type": "object"
    },
    "User": {
      "properties": {
        "email": {
          "description": "researchallofus email address",
          "type": "string"
        },
        "familyName": {
          "description": "the user's family  name (e.g. Jones)",
          "type": "string"
        },
        "givenName": {
          "description": "the user's given name (e.g. Alice)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserListResponse": {
      "properties": {
        "profileList": {
          "items": {
            "$ref": "#/definitions/Profile"
          },
          "type": "array"
        }
      },
      "required": [
        "profileList"
      ],
      "type": "object"
    },
    "UserResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Pagination token that can be used in a subsequent calls to retrieve more results. If not set, there are no more results to retrieve.\n",
          "type": "string"
        },
        "users": {
          "description": "A list of users matching the provided search query.",
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UserRole": {
      "properties": {
        "email": {
          "type": "string"
        },
        "familyName": {
          "type": "string"
        },
        "givenName": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/WorkspaceAccessLevel"
        }
      },
      "required": [
        "email",
        "role"
      ],
      "type": "object"
    },
    "UsernameTakenResponse": {
      "example": {
        "isTaken": false
      },
      "properties": {
        "isTaken": {
          "default": false,
          "description": "Boolean response to whether username is already taken.",
          "type": "boolean"
        }
      },
      "required": [
        "isTaken"
      ],
      "type": "object"
    },
    "ValueSet": {
      "properties": {
        "domain": {
          "$ref": "#/definitions/Domain",
          "description": "Domain corresponding to an OMOP table.\n"
        },
        "survey": {
          "$ref": "#/definitions/Surveys",
          "description": "Survey corresponding to an OMOP table.\n"
        },
        "values": {
          "$ref": "#/definitions/DomainValuesResponse"
        }
      },
      "type": "object"
    },
    "VerifyEmailRequest": {
      "properties": {
        "emailToVerify": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Vocabulary": {
      "properties": {
        "domain": {
          "description": "OMOP domain",
          "type": "string"
        },
        "type": {
          "description": "Source or Standard",
          "type": "string"
        },
        "vocabulary": {
          "description": "Vocabulary",
          "type": "string"
        }
      },
      "required": [
        "type",
        "domain",
        "vocabulary"
      ],
      "type": "object"
    },
    "VocabularyListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/Vocabulary"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "Workspace": {
      "properties": {
        "cdrVersionId": {
          "type": "string"
        },
        "creationTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "creator": {
          "type": "string"
        },
        "dataAccessLevel": {
          "$ref": "#/definitions/DataAccessLevel"
        },
        "etag": {
          "description": "Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.\n",
          "type": "string"
        },
        "googleBucketName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastModifiedTime": {
          "description": "Milliseconds since the UNIX epoch.",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "published": {
          "default": false,
          "type": "boolean"
        },
        "researchPurpose": {
          "$ref": "#/definitions/ResearchPurpose"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "WorkspaceAccessLevel": {
      "description": "levels of access to workspace, NO ACCESS is akin to removing a user from a workspace ACL.",
      "enum": [
        "NO ACCESS",
        "READER",
        "WRITER",
        "OWNER"
      ],
      "type": "string"
    },
    "WorkspaceActiveStatus": {
      "description": "Status of workspace",
      "enum": [
        "ACTIVE",
        "DELETED",
        "PENDING_DELETION_POST_1PPW_MIGRATION"
      ],
      "type": "string"
    },
    "WorkspaceListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/Workspace"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "WorkspaceResponse": {
      "properties": {
        "accessLevel": {
          "$ref": "#/definitions/WorkspaceAccessLevel"
        },
        "workspace": {
          "$ref": "#/definitions/Workspace"
        }
      },
      "required": [
        "workspace",
        "accessLevel"
      ],
      "type": "object"
    },
    "WorkspaceResponseListResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/WorkspaceResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "WorkspaceUserRolesResponse": {
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/UserRole"
          },
          "type": "array"
        },
        "workspaceEtag": {
          "description": "Updated workspace etag after the share request has been applied.\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "specificPopulationEnum": {
      "description": "Short parsable descriptions of specific population categories",
      "enum": [
        "RACE_ETHNICITY",
        "AGE_GROUPS",
        "SEX",
        "GENDER_IDENTITY",
        "SEXUAL_ORIENTATION",
        "GEOGRAPHY",
        "DISABILITY_STATUS",
        "ACCESS_TO_CARE",
        "EDUCATION_LEVEL",
        "INCOME_LEVEL",
        "OTHER"
      ],
      "type": "string"
    }
  },
  "host": "api.pmi-ops.org",
  "info": {
    "contact": {
      "name": "developer_help@pmi-ops.org"
    },
    "description": "The API for the AllOfUs workbench.",
    "license": {
      "name": "BSD"
    },
    "termsOfService": "http://www.pmi-ops.org/terms_of_service.html",
    "title": "AllOfUs Workbench API",
    "version": "0.1.0"
  },
  "parameters": {
    "cdrVersionId": {
      "description": "specifies which cdr version",
      "format": "int64",
      "in": "path",
      "name": "cdrVersionId",
      "required": true,
      "type": "integer"
    },
    "cohortId": {
      "description": "Cohort ID",
      "format": "int64",
      "in": "path",
      "name": "cohortId",
      "required": true,
      "type": "integer"
    },
    "cohortReviewId": {
      "description": "Cohort Review ID",
      "format": "int64",
      "in": "path",
      "name": "cohortReviewId",
      "required": true,
      "type": "integer"
    },
    "conceptSetId": {
      "description": "Concept set ID",
      "format": "int64",
      "in": "path",
      "name": "conceptSetId",
      "required": true,
      "type": "integer"
    },
    "dataSetId": {
      "description": "Data set ID",
      "format": "int64",
      "in": "path",
      "name": "dataSetId",
      "required": true,
      "type": "integer"
    },
    "participantId": {
      "description": "specifies which participant",
      "format": "int64",
      "in": "path",
      "name": "participantId",
      "required": true,
      "type": "integer"
    },
    "userId": {
      "format": "int64",
      "in": "path",
      "name": "userId",
      "required": true,
      "type": "integer"
    },
    "workspaceId": {
      "description": "The Workspace ID (a.k.a. the workspace's Firecloud name)",
      "in": "path",
      "name": "workspaceId",
      "required": true,
      "type": "string"
    },
    "workspaceNamespace": {
      "description": "The Workspace namespace",
      "in": "path",
      "name": "workspaceNamespace",
      "required": true,
      "type": "string"
    }
  },
  "paths": {
    "/v1/account/submit-data-use-agreement": {
      "post": {
        "description": "Submits consent to the data use agreement for researchers.",
        "operationId": "submitDataUseAgreement",
        "parameters": [
          {
            "description": "Version \\# of the Data Use Agreement that was signed.",
            "in": "query",
            "name": "dataUseAgreementSignedVersion",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Initials of the user on the form.",
            "in": "query",
            "name": "initials",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/submit-demographic-survey": {
      "post": {
        "description": "Submits demographic survey responses.",
        "operationId": "submitDemographicsSurvey",
        "responses": {
          "200": {
            "description": "The user's profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/sync-era-commons-status": {
      "post": {
        "description": "Retrieves and stores the current user's NIH / eRA Commons linkage status, fetched via the FireCloud API.",
        "operationId": "syncEraCommonsStatus",
        "responses": {
          "200": {
            "description": "The user's profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Sync eRA Commons status",
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/sync-training-status": {
      "post": {
        "description": "Retrieves moodleId(either from DB or call from Moodle API) and gets Training status on the basis of that",
        "operationId": "syncComplianceTrainingStatus",
        "responses": {
          "200": {
            "description": "The user's profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Sync compliance training status",
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/account/sync-two-factor-auth-status": {
      "post": {
        "description": "Syncs a user's 2FA status from google",
        "operationId": "syncTwoFactorAuthStatus",
        "responses": {
          "200": {
            "description": "The user's profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Sync two factor auth status",
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/admin/clusters/updateConfig": {
      "post": {
        "description": "Clusters are created with a default machine configuration. Setting this override changes that configuration for subsequent cluster creations. This change only takes effect after a new cluster creation, e.g. due to standard cluster expiration (~2w) or via manual reset. Requires DEVELOPER authority.\n",
        "operationId": "updateClusterConfig",
        "parameters": [
          {
            "description": "Cluster config update request.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/UpdateClusterConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "summary": "Sets default cluster creation request parameters for a user.",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/admin/unsafe-self-bypass-access-requirement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates the given user to bypass the request access requirement\n",
        "operationId": "unsafeSelfBypassAccessRequirement",
        "parameters": [
          {
            "description": "Whether the requirement should be bypassed or not. Defaults to true, so an empty body  will cause the requirement to be bypassed.\n",
            "in": "body",
            "name": "bypassed",
            "schema": {
              "$ref": "#/definitions/AccessBypassRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "No module exists with name submitted",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Self bypass is disallowed in this environment",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/admin/users/list": {
      "get": {
        "description": "Returns a list of profiles for users to be reviewed. Requires ACCESS_CONTROL_ADMIN authority.\n",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "A list of users",
            "schema": {
              "$ref": "#/definitions/UserListResponse"
            }
          },
          "403": {
            "description": "User doesn't have the ACCESS_CONTROL_ADMIN authority",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/admin/users/{userId}": {
      "get": {
        "description": "Returns a user's profile for review.  Requires ACCESS_CONTROL_ADMIN authority.\n",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "A user's profile",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "403": {
            "description": "User doesn't have the ACCESS_CONTROL_ADMIN authority",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/admin/users/{userId}/bypass-access-requirement": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates the given user to bypass the request access requirement, e.g. \"eraCommons\", or \"twoFactorAuth\"\n",
        "operationId": "bypassAccessRequirement",
        "parameters": [
          {
            "$ref": "#/parameters/userId"
          },
          {
            "description": "Whether the requirement should be bypassed or not. Defaults to true, so an empty body  will cause the requirement to be bypassed.\n",
            "in": "body",
            "name": "bypassed",
            "schema": {
              "$ref": "#/definitions/AccessBypassRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "No module exists with name submitted",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User doesn't have the ACCESS_CONTROL_ADMIN authority",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/admin/workspaces/review": {
      "get": {
        "description": "Returns workspaces that need research purpose review. Requires REVIEW_RESEARCH_PURPOSE authority.\n",
        "operationId": "getWorkspacesForReview",
        "responses": {
          "200": {
            "description": "A list of workspaces",
            "schema": {
              "$ref": "#/definitions/WorkspaceListResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/review": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Sets a research purpose review result.",
        "operationId": "reviewWorkspace",
        "parameters": [
          {
            "description": "result of the research purpose review",
            "in": "body",
            "name": "review",
            "schema": {
              "$ref": "#/definitions/ResearchPurposeReviewRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/auth-domain/users": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateUserDisabledStatus",
        "parameters": [
          {
            "description": "Request containing user email to update and a disabled status to update the user to.",
            "in": "body",
            "name": "request",
            "schema": {
              "$ref": "#/definitions/UpdateUserDisabledRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Updated User In Group"
          },
          "403": {
            "description": "You must be an admin of this group in order to enable/disable members",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "enable/disable a user to an auth domain if you have ID verification authority",
        "tags": [
          "authDomain"
        ]
      }
    },
    "/v1/auth-domain/{groupName}": {
      "post": {
        "description": "This endpoint will create the registered auth domain.",
        "operationId": "createAuthDomain",
        "parameters": [
          {
            "description": "groupName",
            "in": "path",
            "name": "groupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created group",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "authDomain"
        ]
      }
    },
    "/v1/beta-access": {
      "post": {
        "description": "Request betaAccess.",
        "operationId": "requestBetaAccess",
        "responses": {
          "200": {
            "description": "The user's profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/billingProjects": {
      "get": {
        "operationId": "getBillingProjects",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/BillingProjectMembership"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "summary": "List billing projects for a user",
        "tags": [
          "Profile"
        ]
      }
    },
    "/v1/cdrVersionId/{cdrVersionId}/domain/{domain}/domainValue/{domainValue}/dataDictionaryEntry": {
      "get": {
        "operationId": "getDataDictionaryEntry",
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "cdrVersionId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "domainValue",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed definition of a given domain value for the specified CDR Version",
            "schema": {
              "$ref": "#/definitions/DataDictionaryEntry"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      }
    },
    "/v1/cdrVersions": {
      "get": {
        "description": "Returns all curated data repository (CDR) versions that the user has access to",
        "operationId": "getCdrVersions",
        "responses": {
          "200": {
            "description": "A list of CDR versions.",
            "schema": {
              "$ref": "#/definitions/CdrVersionListResponse"
            }
          }
        },
        "tags": [
          "cdrVersions"
        ]
      }
    },
    "/v1/clusters/{billingProjectId}/{workspaceFirecloudName}": {
      "get": {
        "description": "Returns the clusters available to the current user in the given billing project. Currently there is a single default cluster supported per billing project and this cluster should always either exist or be in the process of being initialized. In a future where researchers have more control over cluster creation, this endpoint would be extended to return all clusters.\n",
        "operationId": "listClusters",
        "parameters": [
          {
            "description": "The unique identifier of the Google Billing Project containing the clusters",
            "in": "path",
            "name": "billingProjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The firecloudName of the workspace whose notebook we're looking at",
            "in": "path",
            "name": "workspaceFirecloudName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Available clusters",
            "schema": {
              "$ref": "#/definitions/ClusterListResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "List available notebook clusters",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/clusters/{clusterNamespace}/{clusterName}": {
      "delete": {
        "operationId": "deleteCluster",
        "parameters": [
          {
            "description": "clusterNamespace",
            "in": "path",
            "name": "clusterNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "clusterName",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion success",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Delete a cluster by name.",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/clusters/{clusterNamespace}/{clusterName}/localize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Localize notebook files to the corresponding notebook cluster.",
        "operationId": "localize",
        "parameters": [
          {
            "description": "clusterNamespace",
            "in": "path",
            "name": "clusterNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "clusterName",
            "in": "path",
            "name": "clusterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Localization request.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ClusterLocalizeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ClusterLocalizeResponse"
            }
          },
          "404": {
            "description": "Cluster or Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Localize files from a workspace to notebook cluster. As a side-effect, JSON workspace environment files will also be localized to the cluster.\n",
        "tags": [
          "cluster"
        ]
      }
    },
    "/v1/cohortbuilder/{cdrVersionId}/chartinfo": {
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Searches for demographic info about subjects.",
        "operationId": "getDemoChartInfo",
        "parameters": [
          {
            "description": "object of parameters by which to perform the search",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of criteria",
            "schema": {
              "$ref": "#/definitions/DemoChartInfoListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      }
    },
    "/v1/cohortbuilder/{cdrVersionId}/criteria/attribute/{conceptId}": {
      "get": {
        "description": "Returns criteria tree with the specified name",
        "operationId": "getCriteriaAttributeByConceptId",
        "parameters": [
          {
            "description": "conceptId of brand",
            "format": "int64",
            "in": "path",
            "name": "conceptId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of criteria",
            "schema": {
              "$ref": "#/definitions/CriteriaAttributeListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/criteria/drug": {
      "get": {
        "description": "Returns criteria tree matching value",
        "operationId": "getDrugBrandOrIngredientByValue",
        "parameters": [
          {
            "description": "matches name or code of drug",
            "in": "query",
            "name": "value",
            "required": true,
            "type": "string"
          },
          {
            "description": "number of criteria matches to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of criteria",
            "schema": {
              "$ref": "#/definitions/CriteriaListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/criteria/drug/ingredient/{conceptId}": {
      "get": {
        "description": "Returns criteria tree with the specified name",
        "operationId": "getDrugIngredientByConceptId",
        "parameters": [
          {
            "description": "conceptId of brand",
            "format": "int64",
            "in": "path",
            "name": "conceptId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of criteria",
            "schema": {
              "$ref": "#/definitions/CriteriaListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/criteria/menu": {
      "get": {
        "description": "Returns criteria menu options\n",
        "operationId": "findCriteriaMenuOptions",
        "responses": {
          "200": {
            "description": "A collection of criteria menu options",
            "schema": {
              "$ref": "#/definitions/CriteriaMenuOptionsListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/criteria/{domain}": {
      "get": {
        "description": "Returns a collection of criteria by optional query parameters of the following: type, subtype, parentId and/or allChildren\n",
        "operationId": "getCriteriaBy",
        "parameters": [
          {
            "description": "the specific domain of criteria to get",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "the specific type of criteria to get",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "reveals if source or standard",
            "in": "query",
            "name": "standard",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "fetch direct children of parentId",
            "format": "int64",
            "in": "query",
            "name": "parentId",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of criteria",
            "schema": {
              "$ref": "#/definitions/CriteriaListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search": {
      "get": {
        "description": "Returns matches on criteria table by code or name",
        "operationId": "getCriteriaAutoComplete",
        "parameters": [
          {
            "description": "the specific domain of criteria to get",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "the type of the criteria were search for",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "the type of the criteria were search for",
            "in": "query",
            "name": "standard",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "the term to search for",
            "in": "query",
            "name": "term",
            "required": true,
            "type": "string"
          },
          {
            "description": "number of criteria matches to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of criteria",
            "schema": {
              "$ref": "#/definitions/CriteriaListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search/term": {
      "get": {
        "description": "Returns a collection of criteria per search term\n",
        "operationId": "findCriteriaByDomainAndSearchTerm",
        "parameters": [
          {
            "description": "the specific type of domain",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "the term to search for",
            "in": "query",
            "name": "term",
            "required": true,
            "type": "string"
          },
          {
            "description": "number of criteria matches to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of criteria",
            "schema": {
              "$ref": "#/definitions/CriteriaListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/{conceptId}": {
      "get": {
        "description": "Returns a collection of criteria per concept id\n",
        "operationId": "getStandardCriteriaByDomainAndConceptId",
        "parameters": [
          {
            "description": "the specific type of domain",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "the concept id to search for",
            "format": "int64",
            "in": "path",
            "name": "conceptId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of criteria",
            "schema": {
              "$ref": "#/definitions/CriteriaListResponse"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/demographics": {
      "get": {
        "description": "Will return a list all values for gender, race and ethnicity.",
        "operationId": "getParticipantDemographics",
        "responses": {
          "200": {
            "description": "An object which contains a list of all values for gender, race and ethnicity.",
            "schema": {
              "$ref": "#/definitions/ParticipantDemographics"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ]
    },
    "/v1/cohortbuilder/{cdrVersionId}/search": {
      "parameters": [
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Searches for participants based on criteria, criteria specific parameters, and modifiers.",
        "operationId": "countParticipants",
        "parameters": [
          {
            "description": "object of parameters by which to perform the search",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A count of subjects",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        },
        "tags": [
          "cohortBuilder"
        ]
      }
    },
    "/v1/config": {
      "get": {
        "description": "Returns some server configuration data.",
        "operationId": "getConfig",
        "responses": {
          "200": {
            "description": "Configuration data",
            "schema": {
              "$ref": "#/definitions/ConfigResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "config"
        ]
      }
    },
    "/v1/cron/auditBigQuery": {
      "get": {
        "description": "Endpoint meant to be called offline to trigger BigQuery auditing; may be slow to execute. Only executable via App Engine cronjob.\n",
        "operationId": "auditBigQuery",
        "responses": {
          "200": {
            "description": "Audit was successful.",
            "schema": {
              "$ref": "#/definitions/AuditBigQueryResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineAudit",
          "cron"
        ]
      }
    },
    "/v1/cron/billingProjectGarbageCollection": {
      "get": {
        "description": "Trigger a bulk transfer of ownership of billing projects associated with deleted workspaces",
        "operationId": "billingProjectGarbageCollection",
        "responses": {
          "204": {
            "description": "Billing Project Garbage Collection was successful."
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineBilling",
          "cron"
        ]
      }
    },
    "/v1/cron/bufferBillingProjects": {
      "get": {
        "description": "If the AoU Billing Project buffer is not full, refill with one or more billing projects.",
        "operationId": "bufferBillingProjects",
        "responses": {
          "204": {
            "description": "No Error"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineBilling",
          "cron"
        ]
      }
    },
    "/v1/cron/bulkAuditProjectAccess": {
      "get": {
        "description": "Audits project access for all users",
        "operationId": "bulkAuditProjectAccess",
        "responses": {
          "204": {
            "description": "All users' project access were audited."
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineUser",
          "cron"
        ]
      }
    },
    "/v1/cron/bulkSyncComplianceTrainingStatus": {
      "get": {
        "description": "sync moodle badge/training status for all users.",
        "operationId": "bulkSyncComplianceTrainingStatus",
        "responses": {
          "204": {
            "description": "The user table is updated with training status."
          },
          "404": {
            "description": "User not found while retrieving  badge."
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineUser",
          "cron"
        ]
      }
    },
    "/v1/cron/bulkSyncEraCommonsStatus": {
      "get": {
        "description": "sync eRA Commons linkage status for all users.",
        "operationId": "bulkSyncEraCommonsStatus",
        "responses": {
          "204": {
            "description": "All users' eRA Commons statuses were updated."
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineUser",
          "cron"
        ]
      }
    },
    "/v1/cron/bulkSyncTwoFactorAuthStatus": {
      "get": {
        "description": "sync 2FA status for all users",
        "operationId": "bulkSyncTwoFactorAuthStatus",
        "responses": {
          "204": {
            "description": "All users' 2FA statuses were updated."
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineUser",
          "cron"
        ]
      }
    },
    "/v1/cron/checkClusters": {
      "get": {
        "description": "Endpoint meant to be called offline to trigger cluster checks and cleanup. Enforces upgrades for older cluster deployments. May be slow to execute. Only executable via App Engine cronjob.\n",
        "operationId": "checkClusters",
        "responses": {
          "200": {
            "description": "Clusters were checked and handled successfully.",
            "schema": {
              "$ref": "#/definitions/CheckClustersResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineCluster",
          "cron"
        ]
      }
    },
    "/v1/cron/checkFreeTierBillingUsage": {
      "get": {
        "description": "Find and alert users that have exceeded their free tier billing usage",
        "operationId": "checkFreeTierBillingUsage",
        "responses": {
          "204": {
            "description": "No Error"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineBilling",
          "cron"
        ]
      }
    },
    "/v1/cron/cleanBillingBuffer": {
      "get": {
        "description": "Find BillingProjectBufferEntries that have failed during the creation or assignment step and set their statuses to ERROR",
        "operationId": "cleanBillingBuffer",
        "responses": {
          "204": {
            "description": "No Error"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineBilling",
          "cron"
        ]
      }
    },
    "/v1/cron/monitoring/updateGaugeMetrics": {
      "get": {
        "description": "Trigger recording of all gauge metrics",
        "operationId": "updateGaugeMetrics",
        "responses": {
          "204": {
            "description": "No content"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineMonitoring",
          "cron"
        ]
      }
    },
    "/v1/cron/syncBillingProjectStatus": {
      "get": {
        "description": "Fetch a BillingProjectBufferEntry that is in the CREATING state and check its status on Firecloud",
        "operationId": "syncBillingProjectStatus",
        "responses": {
          "204": {
            "description": "No Error"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "offlineBilling",
          "cron"
        ]
      }
    },
    "/v1/featured-workspace-config": {
      "get": {
        "description": "Returns the featured workspaces config",
        "operationId": "getFeaturedWorkspacesConfig",
        "responses": {
          "200": {
            "description": "List of featured workspaces",
            "schema": {
              "$ref": "#/definitions/FeaturedWorkspacesConfigResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "featured-workspaces-config"
        ]
      }
    },
    "/v1/google-account": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates an account in the researchallofus.org domain.",
        "operationId": "createAccount",
        "parameters": [
          {
            "in": "body",
            "name": "createAccountRequest",
            "schema": {
              "$ref": "#/definitions/CreateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account created successfully.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Error occurred while creating account.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/invitation-key-verification": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Verifies invitation key.",
        "operationId": "invitationKeyVerification",
        "parameters": [
          {
            "in": "body",
            "name": "invitationVerificationRequest",
            "schema": {
              "$ref": "#/definitions/InvitationVerificationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation Key verified."
          },
          "400": {
            "description": "Error occurred while verifying Invitation Key.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/is-username-taken": {
      "get": {
        "description": "Checks to see if the given username is not available.",
        "operationId": "isUsernameTaken",
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The answer.",
            "schema": {
              "$ref": "#/definitions/UsernameTakenResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/monitoring/billingProjectBufferStatus": {
      "get": {
        "description": "Return statistics about the billing buffer.",
        "operationId": "getBillingProjectBufferStatus",
        "responses": {
          "200": {
            "description": "No Error",
            "schema": {
              "$ref": "#/definitions/BillingProjectBufferStatus"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "monitoring"
        ]
      }
    },
    "/v1/page-visits": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a users page visits",
        "operationId": "updatePageVisits",
        "parameters": [
          {
            "description": "the users pageVisits",
            "in": "body",
            "name": "pageVisit",
            "schema": {
              "$ref": "#/definitions/PageVisit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/profile": {
      "delete": {
        "description": "Deletes the user's profile and gsuite account, does not clean up in firecloud.",
        "operationId": "deleteProfile",
        "responses": {
          "204": {
            "description": "Request Received."
          }
        },
        "tags": [
          "profile"
        ]
      },
      "get": {
        "description": "Returns the user's profile information",
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "The user's profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        },
        "tags": [
          "profile"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a users profile",
        "operationId": "updateProfile",
        "parameters": [
          {
            "description": "the new profile to use",
            "in": "body",
            "name": "updatedProfile",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Request received."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/resend-welcome-email": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Resend welcome email",
        "operationId": "resendWelcomeEmail",
        "parameters": [
          {
            "in": "body",
            "name": "resendWelcomeEmail",
            "schema": {
              "$ref": "#/definitions/ResendWelcomeEmailRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Welcome Email sent."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/status": {
      "get": {
        "description": "Returns the status of the various services and integrations",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "A map of system name to status.",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          }
        },
        "security": [],
        "tags": [
          "status"
        ]
      }
    },
    "/v1/status-alert": {
      "get": {
        "description": "Returns status alert information if any exists.",
        "operationId": "getStatusAlert",
        "responses": {
          "200": {
            "description": "A status alert information object.\n",
            "schema": {
              "$ref": "#/definitions/StatusAlert"
            }
          }
        },
        "tags": [
          "status-alert"
        ]
      }
    },
    "/v1/update-contact-email": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Only for accounts that have not logged in yet, update contact email.",
        "operationId": "updateContactEmail",
        "parameters": [
          {
            "in": "body",
            "name": "updateContactEmailRequest",
            "schema": {
              "$ref": "#/definitions/UpdateContactEmailRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact Email Updated"
          },
          "400": {
            "description": "Invalid contact email address"
          },
          "403": {
            "description": "Unable to process this request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [],
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/update-nih-token": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a users NIH token",
        "operationId": "updateNihToken",
        "parameters": [
          {
            "description": "the token retrieved from NIH",
            "in": "body",
            "name": "token",
            "schema": {
              "$ref": "#/definitions/NihToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's updated profile.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "profile"
        ]
      }
    },
    "/v1/user/{term}": {
      "get": {
        "description": "Returns user information matching search terms",
        "operationId": "user",
        "parameters": [
          {
            "description": "String to find in user's name or email address. Search is a case-insensitive substring match.",
            "in": "path",
            "name": "term",
            "required": true,
            "type": "string"
          },
          {
            "description": "Pagination token retrieved from a previous call to user; used for retrieving additional pages of results.\n",
            "in": "query",
            "name": "pageToken",
            "required": false,
            "type": "string"
          },
          {
            "description": "Maximum number of results to return in a response. Defaults to 10.\n",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sort order, either 'asc' or 'desc'. Defaults to 'asc' on the user's email.",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The user information matching supplied search terms",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/v1/workspaces": {
      "get": {
        "description": "Returns all workspaces that a user has access to",
        "operationId": "getWorkspaces",
        "responses": {
          "200": {
            "description": "A list of workspace definitions.",
            "schema": {
              "$ref": "#/definitions/WorkspaceResponseListResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a workspace",
        "operationId": "createWorkspace",
        "parameters": [
          {
            "description": "workspace definition",
            "in": "body",
            "name": "workspace",
            "schema": {
              "$ref": "#/definitions/Workspace"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The workspace that was created.",
            "schema": {
              "$ref": "#/definitions/Workspace"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/published": {
      "get": {
        "description": "Returns a list of published workspaces",
        "operationId": "getPublishedWorkspaces",
        "responses": {
          "200": {
            "description": "A list of workspace definitions.",
            "schema": {
              "$ref": "#/definitions/WorkspaceResponseListResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/user-recent-resources": {
      "get": {
        "description": "Returns the resources accessed by user order by access time desc",
        "operationId": "getUserRecentResources",
        "responses": {
          "200": {
            "description": "A list of resources order by last access time desc order",
            "schema": {
              "$ref": "#/definitions/RecentResourceResponse"
            }
          }
        },
        "tags": [
          "userMetrics"
        ]
      }
    },
    "/v1/workspaces/user-recent-workspaces": {
      "get": {
        "description": "Returns the workspaces edited by the user in descending order of update time",
        "operationId": "getUserRecentWorkspaces",
        "responses": {
          "200": {
            "description": "A list of workspaces order by last-updated time in descending order",
            "schema": {
              "$ref": "#/definitions/RecentWorkspaceResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}": {
      "delete": {
        "description": "Deletes the workspace definition with the specified ID and namespace",
        "operationId": "deleteWorkspace",
        "responses": {
          "202": {
            "description": "Workspace deletion request accepted",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      },
      "get": {
        "description": "Returns the workspace definition with the specified ID and namespace",
        "operationId": "getWorkspace",
        "responses": {
          "200": {
            "description": "A workspace response containing workspace and access level",
            "schema": {
              "$ref": "#/definitions/WorkspaceResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Modifies the workspace definition with the specified ID and namespace; fields that are omitted will not be modified\n",
        "operationId": "updateWorkspace",
        "parameters": [
          {
            "description": "workspace definition",
            "in": "body",
            "name": "workspace",
            "schema": {
              "$ref": "#/definitions/UpdateWorkspaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated workspace definition",
            "schema": {
              "$ref": "#/definitions/Workspace"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohort-reviews": {
      "get": {
        "description": "Returns all cohort reviews in a workspace",
        "operationId": "getCohortReviewsInWorkspace",
        "responses": {
          "200": {
            "description": "A list of cohort definitions.",
            "schema": {
              "$ref": "#/definitions/CohortReviewListResponse"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohort-reviews/{cohortReviewId}": {
      "delete": {
        "description": "Deletes the cohort review with the specified ID",
        "operationId": "deleteCohortReview",
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "description": "specifies which cohort review",
          "format": "int64",
          "in": "path",
          "name": "cohortReviewId",
          "required": true,
          "type": "integer"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Modifies the cohort review with the specified ID; fields that are omitted will not be modified\n",
        "operationId": "updateCohortReview",
        "parameters": [
          {
            "description": "cohort review",
            "in": "body",
            "name": "cohortReview",
            "schema": {
              "$ref": "#/definitions/CohortReview"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated cohort review",
            "schema": {
              "$ref": "#/definitions/CohortReview"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts": {
      "get": {
        "description": "Returns all cohort definitions in a workspace",
        "operationId": "getCohortsInWorkspace",
        "responses": {
          "200": {
            "description": "A list of cohort definitions.",
            "schema": {
              "$ref": "#/definitions/CohortListResponse"
            }
          }
        },
        "tags": [
          "cohorts"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a cohort definition in a workspace.",
        "operationId": "createCohort",
        "parameters": [
          {
            "description": "cohort definition",
            "in": "body",
            "name": "cohort",
            "schema": {
              "$ref": "#/definitions/Cohort"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cohort definition that was created.",
            "schema": {
              "$ref": "#/definitions/Cohort"
            }
          },
          "400": {
            "description": "Bad Request. Cohort name already exists"
          }
        },
        "tags": [
          "cohorts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/duplicate": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "description": "Creates a duplicate of the cohort specified by cohortId",
        "operationId": "duplicateCohort",
        "parameters": [
          {
            "description": "Duplicate Cohort Request",
            "in": "body",
            "name": "DuplicateCohortRequest",
            "schema": {
              "$ref": "#/definitions/DuplicateCohortRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cohort definition that was created.",
            "schema": {
              "$ref": "#/definitions/Cohort"
            }
          },
          "400": {
            "description": "Bad Request. Cohort name already exists"
          }
        },
        "tags": [
          "cohorts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}": {
      "delete": {
        "description": "Deletes the cohort definition with the specified ID",
        "operationId": "deleteCohort",
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "cohorts"
        ]
      },
      "get": {
        "description": "Returns the cohort definition with the specified ID",
        "operationId": "getCohort",
        "responses": {
          "200": {
            "description": "A cohort definition",
            "schema": {
              "$ref": "#/definitions/Cohort"
            }
          }
        },
        "tags": [
          "cohorts"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortId"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Modifies the cohort definition with the specified ID; fields that are omitted will not be modified\n",
        "operationId": "updateCohort",
        "parameters": [
          {
            "description": "cohort definition",
            "in": "body",
            "name": "cohort",
            "schema": {
              "$ref": "#/definitions/Cohort"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated cohort definition",
            "schema": {
              "$ref": "#/definitions/Cohort"
            }
          }
        },
        "tags": [
          "cohorts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions": {
      "get": {
        "description": "Returns a collection of CohortAnnotationDefinition.",
        "operationId": "getCohortAnnotationDefinitions",
        "responses": {
          "200": {
            "description": "A collection of CohortAnnotationDefinition",
            "schema": {
              "$ref": "#/definitions/CohortAnnotationDefinitionListResponse"
            }
          }
        },
        "tags": [
          "cohortAnnotationDefinition"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint will create a CohortAnnotationDefinition.",
        "operationId": "createCohortAnnotationDefinition",
        "parameters": [
          {
            "description": "CohortAnnotationDefinition creation request body",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CohortAnnotationDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A CohortAnnotationDefinition.",
            "schema": {
              "$ref": "#/definitions/CohortAnnotationDefinition"
            }
          }
        },
        "tags": [
          "cohortAnnotationDefinition"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}": {
      "delete": {
        "description": "Deletes the CohortAnnotationDefinition with the specified ID",
        "operationId": "deleteCohortAnnotationDefinition",
        "responses": {
          "202": {
            "description": "CohortAnnotationDefinition deletion request accepted",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "cohortAnnotationDefinition"
        ]
      },
      "get": {
        "description": "Returns a CohortAnnotationDefinition.",
        "operationId": "getCohortAnnotationDefinition",
        "responses": {
          "200": {
            "description": "A CohortAnnotationDefinition",
            "schema": {
              "$ref": "#/definitions/CohortAnnotationDefinition"
            }
          }
        },
        "tags": [
          "cohortAnnotationDefinition"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortId"
        },
        {
          "description": "specifies which CohortAnnotationDefinition.",
          "format": "int64",
          "in": "path",
          "name": "annotationDefinitionId",
          "required": true,
          "type": "integer"
        }
      ],
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "modify the CohortAnnotationDefinition.",
        "operationId": "updateCohortAnnotationDefinition",
        "parameters": [
          {
            "description": "Contains the new CohortAnnotationDefinition",
            "in": "body",
            "name": "cohortAnnotationDefinition",
            "schema": {
              "$ref": "#/definitions/CohortAnnotationDefinition"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated CohortAnnotationDefinition definition",
            "schema": {
              "$ref": "#/definitions/CohortAnnotationDefinition"
            }
          }
        },
        "tags": [
          "cohortAnnotationDefinition"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets": {
      "get": {
        "description": "Returns all concept sets in a workspace",
        "operationId": "getConceptSetsInWorkspace",
        "responses": {
          "200": {
            "description": "A list of concept sets.",
            "schema": {
              "$ref": "#/definitions/ConceptSetListResponse"
            }
          }
        },
        "tags": [
          "conceptSets"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a concept set in a workspace.",
        "operationId": "createConceptSet",
        "parameters": [
          {
            "description": "create concept set request",
            "in": "body",
            "name": "request",
            "schema": {
              "$ref": "#/definitions/CreateConceptSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The concept set that was created.",
            "schema": {
              "$ref": "#/definitions/ConceptSet"
            }
          }
        },
        "tags": [
          "conceptSets"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}": {
      "delete": {
        "description": "Deletes the concept set with the specified ID",
        "operationId": "deleteConceptSet",
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "conceptSets"
        ]
      },
      "get": {
        "description": "Returns the concept set definition with the specified ID",
        "operationId": "getConceptSet",
        "responses": {
          "200": {
            "description": "A concept set definition",
            "schema": {
              "$ref": "#/definitions/ConceptSet"
            }
          }
        },
        "tags": [
          "conceptSets"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/conceptSetId"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Modifies the name or description of the concept set with the specified ID; fields that are omitted will not be modified\n",
        "operationId": "updateConceptSet",
        "parameters": [
          {
            "description": "concept set definition",
            "in": "body",
            "name": "conceptSet",
            "schema": {
              "$ref": "#/definitions/ConceptSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated concept set.",
            "schema": {
              "$ref": "#/definitions/ConceptSet"
            }
          }
        },
        "tags": [
          "conceptSets"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/concepts": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/conceptSetId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Adds or removes concepts from the concept set.\n",
        "operationId": "updateConceptSetConcepts",
        "parameters": [
          {
            "description": "update concept set request",
            "in": "body",
            "name": "request",
            "schema": {
              "$ref": "#/definitions/UpdateConceptSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated concept set.",
            "schema": {
              "$ref": "#/definitions/ConceptSet"
            }
          }
        },
        "tags": [
          "conceptSets"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/copy": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "in": "path",
          "name": "conceptSetId",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Copy specified concept set in path to specified workspace in body",
        "operationId": "copyConceptSet",
        "parameters": [
          {
            "in": "body",
            "name": "copyConceptSetRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful copy",
            "schema": {
              "$ref": "#/definitions/ConceptSet"
            }
          }
        },
        "tags": [
          "conceptSets"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/generateCode/{kernelType}": {
      "post": {
        "description": "Given a Data Set, return the SQL query built from it.\n",
        "operationId": "generateCode",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          },
          {
            "in": "path",
            "name": "kernelType",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "dataSet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A SQL query for each domain in the Data Set\n",
            "schema": {
              "$ref": "#/definitions/DataSetCodeResponse"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/preview": {
      "post": {
        "description": "Preview data set\n",
        "operationId": "previewDataSetByDomain",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          },
          {
            "in": "body",
            "name": "dataSetPreviewRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSetPreviewRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A SQL query for each domain in the Data Set\n",
            "schema": {
              "$ref": "#/definitions/DataSetPreviewResponse"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-sets": {
      "get": {
        "description": "Returns all data sets in a workspace",
        "operationId": "getDataSetsInWorkspace",
        "responses": {
          "200": {
            "description": "A list of data sets.",
            "schema": {
              "$ref": "#/definitions/DataSetListResponse"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "description": "Creates Data Set\n",
        "operationId": "createDataSet",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          },
          {
            "in": "body",
            "name": "dataSetRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data set has been created successfully",
            "schema": {
              "$ref": "#/definitions/DataSet"
            }
          },
          "400": {
            "description": "Invalid data set request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Data Set with the same name already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/domainInfo": {
      "get": {
        "description": "Returns information on the domains of data in the workspace's CDR version along with participant and concept counts\n",
        "operationId": "getDomainInfo",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "information on the domains",
            "schema": {
              "$ref": "#/definitions/DomainInfoResponse"
            }
          }
        },
        "tags": [
          "concepts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/domainValues/{domain}": {
      "get": {
        "description": "Returns all column names/values for a given domain.\n",
        "operationId": "getValuesFromDomain",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          },
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the values/column names in the domain.",
            "schema": {
              "$ref": "#/definitions/DomainValuesResponse"
            }
          }
        },
        "tags": [
          "concepts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/duplicate": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Duplicate an existing workspace, with given modifications to workspace metadata. Caller will own the newly duplicated workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be duplicated:\n  - the associated Firecloud workspace\n  - cohorts, along with reviews and annotations\n  - notebooks located in the default notebook directory for this workspace\n",
        "operationId": "cloneWorkspace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/CloneWorkspaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful duplicate response",
            "schema": {
              "$ref": "#/definitions/CloneWorkspaceResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/getCohortAnnotations": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Retrieves annotations for a cohort in the workspace\n",
        "operationId": "getCohortAnnotations",
        "parameters": [
          {
            "description": "a request indicating what annotations to retrieve",
            "in": "body",
            "name": "request",
            "schema": {
              "$ref": "#/definitions/CohortAnnotationsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the requested annotations",
            "schema": {
              "$ref": "#/definitions/CohortAnnotationsResponse"
            }
          }
        },
        "tags": [
          "cohorts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/getDataTableQuery": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Translates a data table specification into a SQL query to run against the CDR.\n",
        "operationId": "getDataTableQuery",
        "parameters": [
          {
            "description": "a query specification for a data table",
            "in": "body",
            "name": "request",
            "schema": {
              "$ref": "#/definitions/DataTableSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the query to run against the CDR to retrieve the data",
            "schema": {
              "$ref": "#/definitions/CdrQuery"
            }
          }
        },
        "tags": [
          "cohorts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Materializes a cohort for a given CDR version to specified output.\n",
        "operationId": "materializeCohort",
        "parameters": [
          {
            "description": "cohort materialization request",
            "in": "body",
            "name": "request",
            "schema": {
              "$ref": "#/definitions/MaterializeCohortRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The results of materializing the cohort",
            "schema": {
              "$ref": "#/definitions/MaterializeCohortResponse"
            }
          }
        },
        "tags": [
          "cohorts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebook-list": {
      "get": {
        "description": "Returns list of name and path of python files from google bucket, directory notebook.\n",
        "operationId": "getNoteBookList",
        "parameters": [
          {
            "description": "workspaceNamespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "workspaceId",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of files",
            "schema": {
              "items": {
                "$ref": "#/definitions/FileDetail"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "summary": "Get details of Python files from google Bucket directory notebook",
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/rename": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Renames specified notebook",
        "operationId": "renameNotebook",
        "parameters": [
          {
            "description": "new name for notebook",
            "in": "body",
            "name": "NotebookRename",
            "required": true,
            "schema": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "newName": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful rename",
            "schema": {
              "$ref": "#/definitions/FileDetail"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/copy": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "in": "path",
          "name": "notebookName",
          "required": true,
          "type": "string"
        }
      ],
      "post": {
        "description": "Copy specified notebook in path to specified workspace in body",
        "operationId": "copyNotebook",
        "parameters": [
          {
            "in": "body",
            "name": "copyNotebookRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful copy",
            "schema": {
              "$ref": "#/definitions/FileDetail"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/delete": {
      "delete": {
        "description": "Deletes specified notebook",
        "operationId": "deleteNotebook",
        "parameters": [
          {
            "in": "path",
            "name": "notebookName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful delete",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/duplicate": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "description": "Duplicates specified notebook",
        "operationId": "cloneNotebook",
        "parameters": [
          {
            "in": "path",
            "name": "notebookName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful duplicate",
            "schema": {
              "$ref": "#/definitions/FileDetail"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/lockingMetadata": {
      "get": {
        "description": "Get the locking metadata for a notebook, if available.  If the notebook is not locked\n(e.g. at first creation) this may be empty.  Additionally, the caller of this endpoint\nmay not have the appropriate permissions to determine who is locking this notebook.\nWhen this is the case, the lastLockedBy field is set to UNKNOWN.\n",
        "operationId": "getNotebookLockingMetadata",
        "parameters": [
          {
            "in": "path",
            "name": "notebookName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The locking metadata fields for the notebook",
            "schema": {
              "$ref": "#/definitions/NotebookLockingMetadataResponse"
            }
          }
        },
        "summary": "Get the locking metadata for a notebook",
        "tags": [
          "workspaces"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/readonly": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "description": "Get the HTML for a read only view of the notebook",
        "operationId": "readOnlyNotebook",
        "parameters": [
          {
            "in": "path",
            "name": "notebookName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "HTML Read Only version of the notebook",
            "schema": {
              "$ref": "#/definitions/ReadOnlyNotebookResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/publish": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "description": "Makes a workspace public to all AoU registered users. Requires FEATURED_WORKSPACE_ADMIN authority.\n",
        "operationId": "publishWorkspace",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortId"
        },
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint will create an cohort review which is a participant cohort sample specified by the review size parameter.\n",
        "operationId": "createCohortReview",
        "parameters": [
          {
            "description": "cohort review creation request body",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateReviewRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A cohortReviewId and cohort count",
            "schema": {
              "$ref": "#/definitions/CohortReview"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortId"
        },
        {
          "$ref": "#/parameters/cdrVersionId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Returns a collection of participants for the specified cohortId and cdrVersionId. This endpoint does pagination based on page, limit, order and column.\n",
        "operationId": "getParticipantCohortStatuses",
        "parameters": [
          {
            "description": "request body for getting list of ParticipantCohortStatuses.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PageFilterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of participants",
            "schema": {
              "$ref": "#/definitions/CohortReview"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/charts/{domain}": {
      "get": {
        "description": "Returns a collection of CohortChartData for UI charting in cohort review.",
        "operationId": "getCohortChartData",
        "parameters": [
          {
            "description": "specifies which domain the CohortChartData should belong to.",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "the limit search results to",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of CohortChartData",
            "schema": {
              "$ref": "#/definitions/CohortChartDataListResponse"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortReviewId"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}": {
      "get": {
        "description": "This endpoint will return a ParticipantCohortStatus",
        "operationId": "getParticipantCohortStatus",
        "responses": {
          "200": {
            "description": "The ParticipantCohortStatus definition",
            "schema": {
              "$ref": "#/definitions/ParticipantCohortStatus"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortReviewId"
        },
        {
          "$ref": "#/parameters/participantId"
        }
      ],
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Modifies the ParticipantCohortStatus status",
        "operationId": "updateParticipantCohortStatus",
        "parameters": [
          {
            "description": "Contains the new review status",
            "in": "body",
            "name": "cohortStatusRequest",
            "schema": {
              "$ref": "#/definitions/ModifyCohortStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated ParticipantCohortStatus definition",
            "schema": {
              "$ref": "#/definitions/ParticipantCohortStatus"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/annotations": {
      "get": {
        "description": "This endpoint will get a collection of ParticipantCohortAnnotations.",
        "operationId": "getParticipantCohortAnnotations",
        "responses": {
          "200": {
            "description": "A collection of ParticipantCohortAnnotation.",
            "schema": {
              "$ref": "#/definitions/ParticipantCohortAnnotationListResponse"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortReviewId"
        },
        {
          "$ref": "#/parameters/participantId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint will create a ParticipantCohortAnnotation.",
        "operationId": "createParticipantCohortAnnotation",
        "parameters": [
          {
            "description": "ParticipantCohortAnnotation creation request body",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ParticipantCohortAnnotation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A ParticipantCohortAnnotation.",
            "schema": {
              "$ref": "#/definitions/ParticipantCohortAnnotation"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/annotations/{annotationId}": {
      "delete": {
        "description": "Deletes the ParticipantCohortAnnotation with the specified ID",
        "operationId": "deleteParticipantCohortAnnotation",
        "responses": {
          "202": {
            "description": "ParticipantCohortAnnotation deletion request accepted",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortReviewId"
        },
        {
          "$ref": "#/parameters/participantId"
        },
        {
          "description": "specifies which annotation",
          "format": "int64",
          "in": "path",
          "name": "annotationId",
          "required": true,
          "type": "integer"
        }
      ],
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This endpoint will modify a ParticipantCohortAnnotation.",
        "operationId": "updateParticipantCohortAnnotation",
        "parameters": [
          {
            "description": "ParticipantCohortAnnotation modification request body",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModifyParticipantCohortAnnotationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A ParticipantCohortAnnotation.",
            "schema": {
              "$ref": "#/definitions/ParticipantCohortAnnotation"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/charts/{domain}": {
      "get": {
        "description": "This endpoint will return a ParticipantCohortStatus",
        "operationId": "getParticipantChartData",
        "parameters": [
          {
            "description": "specifies which domain the chart data should belong to.",
            "in": "path",
            "name": "domain",
            "required": true,
            "type": "string"
          },
          {
            "description": "the limit search results to",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The Participant Chart data",
            "schema": {
              "$ref": "#/definitions/ParticipantChartDataListResponse"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortReviewId"
        },
        {
          "$ref": "#/parameters/participantId"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/data": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortReviewId"
        },
        {
          "$ref": "#/parameters/participantId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Returns a collection of participant data for the specified params based off the PageFilterRequest. This endpoint does pagination based on page, limit, order and column.\n",
        "operationId": "getParticipantData",
        "parameters": [
          {
            "description": "request body for getting list of participant data.",
            "in": "body",
            "name": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PageFilterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of ParticipantConditions.",
            "schema": {
              "$ref": "#/definitions/ParticipantDataListResponse"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/vocabularies": {
      "get": {
        "description": "This endpoint will get a collection of OMOP vocabularies per cdrVersionId.",
        "operationId": "getVocabularies",
        "responses": {
          "200": {
            "description": "A collection of OMOP vocabularies.",
            "schema": {
              "$ref": "#/definitions/VocabularyListResponse"
            }
          }
        },
        "tags": [
          "cohortReview"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/cohortReviewId"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/searchConcepts": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Searches for concepts in concept table by name, and optionally filter on domain, vocabulary IDs, or standard concept status. Uses the CDR version affiliated with the workspace specified in the path.\n",
        "operationId": "searchConcepts",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          },
          {
            "description": "concept search request",
            "in": "body",
            "name": "request",
            "schema": {
              "$ref": "#/definitions/SearchConceptsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of concepts",
            "schema": {
              "$ref": "#/definitions/ConceptListResponse"
            }
          }
        },
        "tags": [
          "concepts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/share": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Shares a workspace with the given users and permissions. Note that the entire ACL must be provided to this method (including all existing users and roles), not just the additional roles desired. Clients should first fetch existing ACLs via the getFirecloudWorkspaceUserRoles method, make any changes desired, then pass the final list to this method.\n",
        "operationId": "shareWorkspace",
        "parameters": [
          {
            "description": "users to share the workspace with",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/ShareWorkspaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful share response",
            "schema": {
              "$ref": "#/definitions/WorkspaceUserRolesResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/survey-concept-sets/{surveyName}": {
      "get": {
        "description": "Returns all survey concept sets in a workspace",
        "operationId": "getSurveyConceptSetsInWorkspace",
        "responses": {
          "200": {
            "description": "A list of concept sets of type surveys.",
            "schema": {
              "$ref": "#/definitions/ConceptSetListResponse"
            }
          }
        },
        "tags": [
          "conceptSets"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "in": "path",
          "name": "surveyName",
          "required": true,
          "type": "string"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/surveyAnswer": {
      "get": {
        "description": "Returns with all the answer for survey Question\n",
        "operationId": "getSurveyAnswers",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "questionConceptId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Survey Details with Answer",
            "schema": {
              "items": {
                "$ref": "#/definitions/SurveyAnswerResponse"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "concepts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/surveyInfo": {
      "get": {
        "description": "Returns survey information in the workspace's CDR version along with participant and question count\n",
        "operationId": "getSurveyInfo",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          }
        ],
        "responses": {
          "200": {
            "description": "information about the surveys",
            "schema": {
              "$ref": "#/definitions/SurveysResponse"
            }
          }
        },
        "tags": [
          "concepts"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/unpublish": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "description": "Makes a workspace public to all AoU registered users. Requires FEATURED_WORKSPACE_ADMIN authority.\n",
        "operationId": "unpublishWorkspace",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-resources/delete": {
      "delete": {
        "description": "Deletes entry from recent resource",
        "operationId": "deleteRecentResource",
        "parameters": [
          {
            "description": "request object for updating recent resource",
            "in": "body",
            "name": "RecentResourceRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecentResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "userMetrics"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-resources/update": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add/update user recent resource",
        "operationId": "updateRecentResource",
        "parameters": [
          {
            "description": "request object for updating recent resource",
            "in": "body",
            "name": "RecentResourceRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecentResourceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added/updated",
            "schema": {
              "$ref": "#/definitions/RecentResource"
            }
          }
        },
        "tags": [
          "userMetrics"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-workspaces/update": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "description": "Add/update user recent workspaces",
        "operationId": "updateRecentWorkspaces",
        "responses": {
          "200": {
            "description": "Successfully added/updated",
            "schema": {
              "$ref": "#/definitions/RecentWorkspaceResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      }
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/userRoles": {
      "get": {
        "description": "Returns the user roles for all collaborators on a workspace",
        "operationId": "getFirecloudWorkspaceUserRoles",
        "responses": {
          "200": {
            "description": "A list of workspace collaborators",
            "schema": {
              "$ref": "#/definitions/WorkspaceUserRolesResponse"
            }
          }
        },
        "tags": [
          "workspaces"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ]
    },
    "/v1/workspaces/{workspaceNamespace}/{workspaceId}/{surveyName}/surveyQuestions": {
      "get": {
        "description": "Returns survey questions and answers in the workspace's CDR version\n",
        "operationId": "getSurveyQuestions",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          },
          {
            "in": "path",
            "name": "surveyName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "information about the surveys",
            "schema": {
              "items": {
                "$ref": "#/definitions/SurveyQuestionsResponse"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "concepts"
        ]
      }
    },
    "/v1/{workspaceNamespace}/{workspaceId}/data-set/exportToNotebook": {
      "post": {
        "description": "Exports a data set query to a notebook\n",
        "operationId": "exportToNotebook",
        "parameters": [
          {
            "$ref": "#/parameters/workspaceNamespace"
          },
          {
            "$ref": "#/parameters/workspaceId"
          },
          {
            "in": "body",
            "name": "dataSetExportRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DataSetExportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data set has been exported correctly",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          },
          "400": {
            "description": "Invalid data set request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      }
    },
    "/v1/{workspaceNamespace}/{workspaceId}/data-set/markDirty": {
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ],
      "post": {
        "operationId": "markDirty",
        "parameters": [
          {
            "in": "body",
            "name": "markDataSetRequest",
            "schema": {
              "$ref": "#/definitions/MarkDataSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mark all dataset with cohort/concept id as dirty",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      }
    },
    "/v1/{workspaceNamespace}/{workspaceId}/data-sets/dataSetByResourceId": {
      "get": {
        "operationId": "getDataSetByResourceId",
        "parameters": [
          {
            "in": "query",
            "name": "resourceType",
            "required": true,
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of data sets containg cohort/concept Id passed.",
            "schema": {
              "$ref": "#/definitions/DataSetListResponse"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        }
      ]
    },
    "/v1/{workspaceNamespace}/{workspaceId}/data-sets/{dataSetId}": {
      "delete": {
        "description": "Deletes the data set with the specified ID",
        "operationId": "deleteDataSet",
        "responses": {
          "202": {
            "description": "ACCEPTED",
            "schema": {
              "$ref": "#/definitions/EmptyResponse"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      },
      "get": {
        "operationId": "getDataSet",
        "responses": {
          "200": {
            "description": "The data set with the specified ID",
            "schema": {
              "$ref": "#/definitions/DataSet"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      },
      "parameters": [
        {
          "$ref": "#/parameters/workspaceNamespace"
        },
        {
          "$ref": "#/parameters/workspaceId"
        },
        {
          "$ref": "#/parameters/dataSetId"
        }
      ],
      "patch": {
        "consumes": [
          "application/json"
        ],
        "operationId": "updateDataSet",
        "parameters": [
          {
            "description": "data set definition",
            "in": "body",
            "name": "dataSet",
            "schema": {
              "$ref": "#/definitions/DataSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated data set.",
            "schema": {
              "$ref": "#/definitions/DataSet"
            }
          },
          "409": {
            "description": "Data Set with the same name already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "tags": [
          "dataSet"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "security": [
    {
      "aou_oauth": []
    }
  ],
  "securityDefinitions": {
    "aou_oauth": {
      "authorizationUrl": "https://fake-authorization-url.pmi-ops.org",
      "flow": "accessCode",
      "scopes": {
        "read_aou": "Read AoU objects",
        "write_aou": "Create and modify AoU objects"
      },
      "tokenUrl": "https://fake-token-url.pmi-ops.org",
      "type": "oauth2"
    }
  },
  "swagger": "2.0"
}
