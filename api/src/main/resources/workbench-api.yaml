---
swagger: '2.0'
x-aou-note: |
  This file is for endpoints we do NOT intend to generate client libraries for
  and advertise to notebook developers. Endpoints we DO want notebook developers to use should
  go in client_api.yaml.

  This file references parameters, paths, and definitions specified in
  client_api.yaml; the two files get merged together into a merged.yaml file at build time.

  If validation fails, gradle:generateWorkbenchApi fails claiming this file does not exist.

  For separate validation (with some false positives), do:
  ./project.rb validate-swagger
info:
  version: 0.1.0
  title: AllOfUs Workbench API
  description: |
    The API for the AllOfUs workbench.

    Throughout, we use integer/int64 in preference to string/date-time because Swagger's
    date formatting is inconsistent between server and client. Time values are stored as
    milliseconds since the UNIX epoch.

    Note: all requests tagged as "cron" must have the header X-Appengine-Cron:
    true, which app engine itself only sets when invoking as a cronjob.
    See https://cloud.google.com/appengine/docs/standard/java/config/cron#securing_urls_for_cron
    and o.p.w.interceptors.CronInterceptor which implements the header check.
  termsOfService: http://www.pmi-ops.org/terms_of_service.html
  contact:
    name: developer_help@pmi-ops.org
  license:
    name: BSD
host: api.pmi-ops.org
securityDefinitions:
  aou_oauth:
    x-aou-note: |
      Establish the fact that *some endpoints* are OAuth protected
      by defining an `aou_oauth` security mode, which we'll assigning
      to any protected endpoints below.

      TODO: Vet/fix this token and/or authorization URL to work in practice.
      These are currently included simply to satisfy the Swagger specification,
      as this is not directly used to dictate oauth details (just used to
      annotate which methods require oauth).

      The aou_auth entry under security (below) serves to establish the fact
      that all endpoints are protected: this annotation ensures that client
      libraries know to send bearer tokens when calling
    authorizationUrl: ''
    tokenUrl: ''
    type: oauth2
    flow: accessCode
schemes:
- https
produces:
- application/json
security:
- aou_oauth: []
parameters:
  userId:
    in: path
    name: userId
    type: integer
    format: int64
    required: true
  conceptSetId:
    in: path
    name: conceptSetId
    type: integer
    format: int64
    required: true
    description: Concept set ID
  dataSetId:
    in: path
    name: dataSetId
    type: integer
    format: int64
    required: true
    description: Data set ID
  workspaceNamespace:
    in: path
    name: workspaceNamespace
    type: string
    description: The Workspace namespace
    required: true
  workspaceId:
    in: path
    name: workspaceId
    type: string
    description: The Workspace ID (a.k.a. the workspace's Firecloud name)
    required: true
  cohortId:
    in: path
    name: cohortId
    type: integer
    format: int64
    required: true
    description: Cohort ID
  cohortReviewId:
    in: path
    name: cohortReviewId
    type: integer
    format: int64
    required: true
    description: Cohort Review ID
  cdrVersionId:
    in: path
    name: cdrVersionId
    type: integer
    format: int64
    required: true
    description: specifies which cdr version
  participantId:
    in: path
    name: participantId
    type: integer
    format: int64
    required: true
    description: specifies which participant
paths:
  "/v1/status":
    get:
      tags:
      - status
      description: Returns the status of the various services and integrations
      operationId: getStatus
      security: []
      responses:
        200:
          description: A map of system name to status.
          schema:
            "$ref": "#/definitions/StatusResponse"
  "/v1/config":
    get:
      tags:
      - config
      description: Returns some server configuration data.
      operationId: getConfig
      security: []
      responses:
        200:
          description: Configuration data
          schema:
            "$ref": "#/definitions/ConfigResponse"
  "/v1/featured-workspace-config":
    get:
      tags:
      - featured-workspaces-config
      description: Returns the featured workspaces config
      operationId: getFeaturedWorkspacesConfig
      security: []
      responses:
        200:
          description: List of featured workspaces
          schema:
            "$ref": "#/definitions/FeaturedWorkspacesConfigResponse"
  "/v1/cdrVersions":
    get:
      tags:
      - cdrVersions
      description: Returns all curated data repository (CDR) versions that the user
        has access to
      operationId: getCdrVersions
      responses:
        200:
          description: A list of CDR versions.
          schema:
            "$ref": "#/definitions/CdrVersionListResponse"
  "/v1/status-alert":
    get:
      tags:
      - status-alert
      description: Returns status alert information if any exists.
      operationId: getStatusAlert
      responses:
        200:
          description: 'A status alert information object.'
          schema:
            "$ref": "#/definitions/StatusAlert"
    post:
      tags:
      - status-alert
      description: Pushes new status alert information to all users
      operationId: postStatusAlert
      parameters:
      - in: body
        name: statusAlert
        description: the new status alert to use
        schema:
          "$ref": "#/definitions/StatusAlert"
      responses:
        200:
          description: 'A status alert information object.'
          schema:
            "$ref": "#/definitions/StatusAlert"
  "/v1/profile":
    get:
      tags:
      - profile
      description: Returns the user's profile information
      operationId: getMe
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
    patch:
      tags:
      - profile
      consumes:
      - application/json
      description: Updates a users profile
      operationId: updateProfile
      parameters:
      - in: body
        name: updatedProfile
        description: the new profile to use
        schema:
          "$ref": "#/definitions/Profile"
      responses:
        204:
          description: Request received.
        400:
          description: Bad request
          schema:
            "$ref": "#/definitions/ErrorResponse"
    delete:
      tags:
      - profile
      description: Deletes the user's profile and gsuite account, does not clean up
        in firecloud.
      operationId: deleteProfile
      responses:
        204:
          description: Request Received.
  "/v1/is-username-taken":
    get:
      tags:
      - profile
      description: Checks to see if the given username is not available.
      operationId: isUsernameTaken
      security: []
      parameters:
      - in: query
        name: username
        type: string
        required: true
      responses:
        200:
          description: The answer.
          schema:
            "$ref": "#/definitions/UsernameTakenResponse"
  "/v1/update-contact-email":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: Only for accounts that have not logged in yet, update contact email.
      operationId: updateContactEmail
      security: []
      parameters:
      - in: body
        name: updateContactEmailRequest
        schema:
          "$ref": "#/definitions/UpdateContactEmailRequest"
      responses:
        200:
          description: Contact Email Updated
        400:
          description: Invalid contact email address
        403:
          description: Unable to process this request
        500:
          description: Internal Server Error
  "/v1/resend-welcome-email":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: Resend welcome email
      operationId: resendWelcomeEmail
      security: []
      parameters:
      - in: body
        name: resendWelcomeEmail
        schema:
          "$ref": "#/definitions/ResendWelcomeEmailRequest"
      responses:
        200:
          description: Welcome Email sent.
        500:
          description: Internal Server Error
  "/v1/invitation-key-verification":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: Verifies invitation key.
      operationId: invitationKeyVerification
      security: []
      parameters:
      - in: body
        name: invitationVerificationRequest
        schema:
          "$ref": "#/definitions/InvitationVerificationRequest"
      responses:
        200:
          description: Invitation Key verified.
        400:
          description: Error occurred while verifying Invitation Key.
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/google-account":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: Creates an account in the researchallofus.org domain.
      operationId: createAccount
      security: []
      parameters:
      - in: body
        name: createAccountRequest
        schema:
          "$ref": "#/definitions/CreateAccountRequest"
      responses:
        200:
          description: Account created successfully.
          schema:
            "$ref": "#/definitions/Profile"
        400:
          description: Error occurred while creating account.
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/beta-access":
    post:
      tags:
      - profile
      description: Request betaAccess.
      operationId: requestBetaAccess
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
  "/v1/update-nih-token":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: Updates a users NIH token
      operationId: updateNihToken
      parameters:
      - in: body
        name: token
        description: the token retrieved from NIH
        schema:
          "$ref": "#/definitions/NihToken"
      responses:
        200:
          description: The user's updated profile.
          schema:
            "$ref": "#/definitions/Profile"
        400:
          description: Bad request
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/page-visits":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: Updates a users page visits
      operationId: updatePageVisits
      parameters:
      - in: body
        name: pageVisit
        description: the users pageVisits
        schema:
          "$ref": "#/definitions/PageVisit"
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
        400:
          description: Bad request
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/account/submit-data-use-agreement":
    post:
      tags:
      - profile
      description: Submits consent to the data use agreement for researchers.
      operationId: submitDataUseAgreement
      parameters:
      - in: query
        name: dataUseAgreementSignedVersion
        description: Version \# of the Data Use Agreement that was signed.
        type: integer
        required: true
      - in: query
        name: initials
        description: Initials of the user on the form.
        type: string
        required: true
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
  "/v1/account/sync-training-status":
    post:
      tags:
      - profile
      summary: Sync compliance training status
      description: Retrieves moodleId(either from DB or call from Moodle API) and
        gets Training status on the basis of that
      operationId: syncComplianceTrainingStatus
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
        404:
          description: User not found
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/account/sync-era-commons-status":
    post:
      tags:
      - profile
      summary: Sync eRA Commons status
      description: Retrieves and stores the current user's NIH / eRA Commons linkage
        status, fetched via the FireCloud API.
      operationId: syncEraCommonsStatus
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
        404:
          description: User not found
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/account/sync-two-factor-auth-status":
    post:
      tags:
      - profile
      summary: Sync two factor auth status
      description: Syncs a user's 2FA status from google
      operationId: syncTwoFactorAuthStatus
      responses:
        200:
          description: The user's profile.
          schema:
            "$ref": "#/definitions/Profile"
        404:
          description: User not found
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/auth-domain/{groupName}":
    post:
      tags:
      - authDomain
      description: This endpoint will create the registered auth domain.
      operationId: createAuthDomain
      parameters:
      - in: path
        name: groupName
        description: groupName
        required: true
        type: string
      responses:
        200:
          description: Successfully created group
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/auth-domain/users":
    post:
      tags:
      - authDomain
      consumes:
      - application/json
      responses:
        204:
          description: Successfully Updated User In Group
        403:
          description: You must be an admin of this group in order to enable/disable
            members
          schema:
            "$ref": "#/definitions/ErrorResponse"
        404:
          description: User not found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        500:
          description: FireCloud Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
      parameters:
      - in: body
        name: request
        description: Request containing user email to update and a disabled status
          to update the user to.
        schema:
          "$ref": "#/definitions/UpdateUserDisabledRequest"
      summary: enable/disable a user to an auth domain if you have ID verification
        authority
      operationId: updateUserDisabledStatus
  "/v1/user/{term}":
    get:
      tags:
      - user
      description: Returns user information matching search terms
      operationId: user
      responses:
        200:
          description: The user information matching supplied search terms
          schema:
            "$ref": "#/definitions/UserResponse"
      parameters:
      - in: path
        name: term
        description: String to find in user's name or email address. Search is a case-insensitive
          substring match.
        required: true
        type: string
      - in: query
        name: pageToken
        description: 'Pagination token retrieved from a previous call to user; used
          for retrieving additional pages of results.'
        type: string
        required: false
      - in: query
        name: pageSize
        description: 'Maximum number of results to return in a response. Defaults
          to 10.'
        type: integer
        required: false
      - in: query
        name: sortOrder
        description: Sort order, either 'asc' or 'desc'. Defaults to 'asc' on the
          user's email.
        type: string
        required: false
  "/v1/user/billingAccounts":
    get:
      tags:
      - user
      description: Returns a list of billing accounts the caller can set a workspace's
        billing account to
      operationId: listBillingAccounts
      responses:
        200:
          description: List of billing accounts
          schema:
            "$ref": "#/definitions/WorkbenchListBillingAccountsResponse"
  "/v1/admin/security/clusters/{billingProjectId}/delete-clusters":
    post:
      summary: Delete specified (or all if no specified list) clusters in a project
      description: 'An admin gated endpoint that deletes given clusters in a given
        billing project.'
      operationId: deleteClustersInProject
      tags:
      - cluster
      parameters:
      - in: path
        name: billingProjectId
        description: The unique identifier of the Google Billing Project containing
          the clusters
        required: true
        type: string
      - in: body
        name: clustersToDelete
        description: A list of names of clusters to delete. To delete all clusters,
          use an empty object, without providing a list property at all (e.g., {})
          An empty list will delete no clusters.
        required: true
        schema:
          "$ref": "#/definitions/ListClusterDeleteRequest"
      responses:
        200:
          description: Clusters deleted
          schema:
            type: array
            items:
              "$ref": "#/definitions/ListClusterResponse"
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/clusters/{workspaceNamespace}":
    get:
      summary: Get the user's workspace cluster.
      description: 'Returns the current user''s cluster, if any, which has been created
        for the given workspace.'
      operationId: getCluster
      tags:
      - cluster
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      responses:
        200:
          description: The cluster for this user and workspace.
          schema:
            "$ref": "#/definitions/Cluster"
        404:
          description: No cluster exists for this user and workspace.
          schema:
            "$ref": "#/definitions/ErrorResponse"
    post:
      summary: Create a workspace cluster.
      description: |
        Creates a new cluster for the current user in the given billing project. If a cluster already exists for the user in this billing project, a 409 conflict error is returned (even if the cluster is still initializing or is not in a ready state).
        TODO(RW-3697): Custom cluster creation params should be added as a body param here.
      operationId: createCluster
      tags:
      - cluster
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      responses:
        200:
          description: Returns the cluster that was created for this user and workspace.
          schema:
            "$ref": "#/definitions/Cluster"
        409:
          description: A cluster for this user and workspace already exists.
          schema:
            "$ref": "#/definitions/EmptyResponse"
    delete:
      summary: Delete a workspace cluster.
      description: 'TODO(RW-3695): updateCluster should be added as a PATCH endpoint
        here.'
      operationId: deleteCluster
      tags:
      - cluster
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      responses:
        200:
          description: Success
          schema:
            "$ref": "#/definitions/EmptyResponse"
        404:
          description: No cluster exists for this user and workspace.
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/clusters/{workspaceNamespace}/localize":
    post:
      summary: Localize files to the user's cluster.
      description: 'Localizes files to the cluster for the current user and given
        workspace. As a side-effect, JSON workspace environment files will also be
        localized to the cluster.'
      operationId: localize
      tags:
      - cluster
      consumes:
      - application/json
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - in: body
        name: body
        description: Localization request.
        schema:
          "$ref": "#/definitions/ClusterLocalizeRequest"
      responses:
        200:
          description: Success
          schema:
            "$ref": "#/definitions/ClusterLocalizeResponse"
        404:
          description: Cluster or Workspace not found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/billingProjects":
    get:
      tags:
      - profile
      operationId: getBillingProjects
      summary: List billing projects for a user
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              "$ref": "#/definitions/BillingProjectMembership"
        404:
          description: User Not Found
        500:
          description: Internal Server Error
  "/v1/workspaces":
    get:
      tags:
      - workspaces
      description: Returns all workspaces that a user has access to
      operationId: getWorkspaces
      responses:
        200:
          description: A list of workspace definitions.
          schema:
            "$ref": "#/definitions/WorkspaceResponseListResponse"
    post:
      tags:
      - workspaces
      consumes:
      - application/json
      description: Creates a workspace
      operationId: createWorkspace
      parameters:
      - in: body
        name: workspace
        description: workspace definition
        schema:
          "$ref": "#/definitions/CreateWorkspaceRequest"
      responses:
        200:
          description: The workspace that was created.
          schema:
            "$ref": "#/definitions/Workspace"
  "/v1/workspaces/published":
    get:
      tags:
      - workspaces
      description: Returns a list of published workspaces
      operationId: getPublishedWorkspaces
      responses:
        200:
          description: A list of workspace definitions.
          schema:
            "$ref": "#/definitions/WorkspaceResponseListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - workspaces
      description: Returns the workspace definition with the specified ID and namespace
      operationId: getWorkspace
      responses:
        200:
          description: A workspace response containing workspace and access level
          schema:
            "$ref": "#/definitions/WorkspaceResponse"
    patch:
      tags:
      - workspaces
      consumes:
      - application/json
      description: 'Modifies the workspace definition with the specified ID and namespace;
        fields that are omitted will not be modified'
      operationId: updateWorkspace
      parameters:
      - in: body
        name: workspace
        description: workspace definition
        schema:
          "$ref": "#/definitions/UpdateWorkspaceRequest"
      responses:
        200:
          description: The updated workspace definition
          schema:
            "$ref": "#/definitions/Workspace"
    delete:
      tags:
      - workspaces
      description: Deletes the workspace definition with the specified ID and namespace
      operationId: deleteWorkspace
      responses:
        202:
          description: Workspace deletion request accepted
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/resources":
    parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
    post:
      parameters:
        - in: body
          name: resourceTypesToFetch
          description: Types of workspace resources to fetch. Currently only supports
            Cohorts, Cohort Reviews, Concept Sets, and Datasets
          schema:
            "$ref": "#/definitions/WorkspaceResourcesRequest"
      tags:
      - workspaces
      description: Gets a user defined selection of objects contained within a workspace
      operationId: getWorkspaceResources
      responses:
        200:
          description: Returns all objects that describe a section of the CDR in a workspace.
          schema:
            "$ref": "#/definitions/WorkspaceResourceResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/billing-usage":
    parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - workspaces
      description: Gets the free tier billing spend for a specified workspace
      operationId: getBillingUsage
      responses:
        200:
          description: The billing usage for a workspace
          schema:
            "$ref":
              "#/definitions/WorkspaceBillingUsageResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/share":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      consumes:
      - application/json
      description: 'Shares a workspace with the given users and permissions. Note
        that the entire ACL must be provided to this method (including all existing
        users and roles), not just the additional roles desired. Clients should first
        fetch existing ACLs via the getFirecloudWorkspaceUserRoles method, make any
        changes desired, then pass the final list to this method.'
      operationId: shareWorkspace
      parameters:
      - in: body
        name: body
        description: users to share the workspace with
        schema:
          "$ref": "#/definitions/ShareWorkspaceRequest"
      responses:
        200:
          description: Successful share response
          schema:
            "$ref": "#/definitions/WorkspaceUserRolesResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/duplicate":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      consumes:
      - application/json
      description: |
        Duplicate an existing workspace, with given modifications to workspace metadata. Caller will own the newly duplicated workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be duplicated:
          - the associated Firecloud workspace
          - cohorts, along with reviews and annotations
          - notebooks located in the default notebook directory for this workspace
      operationId: cloneWorkspace
      parameters:
      - in: body
        name: body
        schema:
          "$ref": "#/definitions/CloneWorkspaceRequest"
      responses:
        200:
          description: Successful duplicate response
          schema:
            "$ref": "#/definitions/CloneWorkspaceResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/userRoles":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - workspaces
      description: Returns the user roles for all collaborators on a workspace
      operationId: getFirecloudWorkspaceUserRoles
      responses:
        200:
          description: A list of workspace collaborators
          schema:
            "$ref": "#/definitions/WorkspaceUserRolesResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/publish":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: 'Makes a workspace public to all AoU registered users. Requires
        FEATURED_WORKSPACE_ADMIN authority.'
      operationId: publishWorkspace
      responses:
        200:
          description: success
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/unpublish":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: 'Makes a workspace public to all AoU registered users. Requires
        FEATURED_WORKSPACE_ADMIN authority.'
      operationId: unpublishWorkspace
      responses:
        200:
          description: success
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/admin/workspaces/review":
    get:
      tags:
      - workspaces
      description: 'Returns workspaces that need research purpose review. Requires
        REVIEW_RESEARCH_PURPOSE authority.'
      operationId: getWorkspacesForReview
      responses:
        200:
          description: A list of workspaces
          schema:
            "$ref": "#/definitions/WorkspaceListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebook-list":
    get:
      summary: Get details of Python files from google Bucket directory notebook
      description: 'Returns list of name and path of python files from google bucket,
        directory notebook.'
      operationId: getNoteBookList
      tags:
      - workspaces
      parameters:
      - in: path
        name: workspaceNamespace
        description: workspaceNamespace
        required: true
        type: string
      - in: path
        name: workspaceId
        description: workspaceId
        required: true
        type: string
      responses:
        200:
          description: List of files
          schema:
            type: array
            items:
              "$ref": "#/definitions/FileDetail"
        404:
          description: Workspace not found
          schema:
            "$ref": "#/definitions/ErrorResponse"
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/admin/unsafe-self-bypass-access-requirement":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: 'Updates the given user to bypass the request access requirement'
      parameters:
      - in: body
        name: bypassed
        schema:
          "$ref": "#/definitions/AccessBypassRequest"
        description: 'Whether the requirement should be bypassed or not. Defaults
          to true, so an empty body  will cause the requirement to be bypassed.'
      operationId: unsafeSelfBypassAccessRequirement
      responses:
        200:
          description: success
          schema:
            "$ref": "#/definitions/EmptyResponse"
        403:
          description: Self bypass is disallowed in this environment
          schema:
            "$ref": "#/definitions/ErrorResponse"
        400:
          description: No module exists with name submitted
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/admin/users/{userId}/bypass-access-requirement":
    post:
      tags:
      - profile
      consumes:
      - application/json
      description: 'Updates the given user to bypass the request access requirement,
        e.g. "eraCommons", or "twoFactorAuth"'
      parameters:
      - "$ref": "#/parameters/userId"
      - in: body
        name: bypassed
        schema:
          "$ref": "#/definitions/AccessBypassRequest"
        description: 'Whether the requirement should be bypassed or not. Defaults
          to true, so an empty body  will cause the requirement to be bypassed.'
      operationId: bypassAccessRequirement
      responses:
        200:
          description: success
          schema:
            "$ref": "#/definitions/EmptyResponse"
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          schema:
            "$ref": "#/definitions/ErrorResponse"
        400:
          description: No module exists with name submitted
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/admin/users/{userId}":
    get:
      tags:
      - profile
      description: 'Returns a user''s profile for review.  Requires ACCESS_CONTROL_ADMIN
        authority.'
      parameters:
      - "$ref": "#/parameters/userId"
      operationId: getUser
      responses:
        200:
          description: A user's profile
          schema:
            "$ref": "#/definitions/Profile"
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/admin/users/list":
    get:
      tags:
      - profile
      description: 'Returns a list of profiles for users to be reviewed. Requires
        ACCESS_CONTROL_ADMIN authority.'
      operationId: getAllUsers
      responses:
        200:
          description: A list of users
          schema:
            "$ref": "#/definitions/UserListResponse"
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/review":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      consumes:
      - application/json
      description: Sets a research purpose review result.
      operationId: reviewWorkspace
      parameters:
      - in: body
        name: review
        description: result of the research purpose review
        schema:
          "$ref": "#/definitions/ResearchPurposeReviewRequest"
      responses:
        200:
          description: success
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/admin/workspaces/{workspaceNamespace}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    get:
      tags:
      - workspaceAdmin
      description: 'Given a workspace namespace (Google Cloud Platform  Project ID),
        returns workspace details. Requires the WORKSPACES_VIEW authority.'
      operationId: getFederatedWorkspaceDetails
      responses:
        200:
          description: Federated details about the workspace.
          schema:
            "$ref": "#/definitions/AdminFederatedWorkspaceDetailsResponse"
        404:
          description: Workspace not found for namespace
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/admin/workspaces/{workspaceNamespace}/cloudStorageTraffic":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    get:
      tags:
      - workspaceAdmin
      description: 'Returns a time series of cloud storage traffic for the given project.
        Requires the WORKSPACES_VIEW authority.'
      operationId: getCloudStorageTraffic
      responses:
        200:
          description: success
          schema:
            "$ref": "#/definitions/CloudStorageTraffic"
  "/v1/admin/clusters/updateConfig":
    post:
      summary: Sets default cluster creation request parameters for a user.
      description: 'Clusters are created with a default machine configuration. Setting
        this override changes that configuration for subsequent cluster creations.
        This change only takes effect after a new cluster creation, e.g. due to standard
        cluster expiration (~2w) or via manual reset. Requires DEVELOPER authority.'
      operationId: updateClusterConfig
      tags:
      - cluster
      parameters:
      - in: body
        name: body
        description: Cluster config update request.
        schema:
          "$ref": "#/definitions/UpdateClusterConfigRequest"
      responses:
        200:
          description: success
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/admin/sumo/egressEvent":
    post:
      tags:
      - sumoLogic
      description: 'Registers an egress event detected by SumoLogic with the Workbench.
        Forwards the event to Stackdriver for recording and potential alerting.'
      operationId: logEgressEvent
      security: []
      parameters:
      - in: body
        name: request
        description: Egress event request
        schema:
          "$ref": "#/definitions/EgressEventRequest"
      - in: header
        name: X-API-KEY
        description: 'Semi-secret API key sent by SumoLogic. This will be checked
          against the set of valid API keys stored in the per-environment credentials
          bucket.'
        required: true
        type: string
      responses:
        204:
          description: The egress event was successfully handled.
  "/v1/cron/auditBigQuery":
    x-aou-note: |
      Note: all requests tagged as "cron" must have the header X-Appengine-Cron:
      true, which app engine itself only sets when invoking as a cronjob.
      See https://cloud.google.com/appengine/docs/standard/java/config/cron#securing_urls_for_cron
      and o.p.w.interceptors.CronInterceptor which implements the header check.
    get:
      security: []
      tags:
      - offlineAudit
      - cron
      description: 'Endpoint meant to be called offline to trigger BigQuery auditing;
        may be slow to execute. Only executable via App Engine cronjob.'
      operationId: auditBigQuery
      responses:
        200:
          description: Audit was successful.
          schema:
            "$ref": "#/definitions/AuditBigQueryResponse"
  "/v1/cron/checkClusters":
    get:
      security: []
      tags:
      - offlineCluster
      - cron
      description: 'Endpoint meant to be called offline to trigger cluster checks
        and cleanup. Enforces upgrades for older cluster deployments. May be slow
        to execute. Only executable via App Engine cronjob.'
      operationId: checkClusters
      responses:
        200:
          description: Clusters were checked and handled successfully.
          schema:
            "$ref": "#/definitions/CheckClustersResponse"
  "/v1/cron/bulkSyncComplianceTrainingStatus":
    get:
      security: []
      tags:
      - offlineUser
      - cron
      description: sync moodle badge/training status for all users.
      operationId: bulkSyncComplianceTrainingStatus
      responses:
        204:
          description: The user table is updated with training status.
        404:
          description: User not found while retrieving  badge.
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/bulkSyncEraCommonsStatus":
    get:
      security: []
      tags:
      - offlineUser
      - cron
      description: sync eRA Commons linkage status for all users.
      operationId: bulkSyncEraCommonsStatus
      responses:
        204:
          description: All users' eRA Commons statuses were updated.
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/bulkSyncTwoFactorAuthStatus":
    get:
      security: []
      tags:
      - offlineUser
      - cron
      description: sync 2FA status for all users
      operationId: bulkSyncTwoFactorAuthStatus
      responses:
        204:
          description: All users' 2FA statuses were updated.
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/bulkAuditProjectAccess":
    get:
      security: []
      tags:
      - offlineUser
      - cron
      description: Audits project access for all users
      operationId: bulkAuditProjectAccess
      responses:
        204:
          description: All users' project access were audited.
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/exportToRdr":
    get:
      security: []
      tags:
      - offlineRdrExport
      - cron
      description: Send workbench data to RDR
      operationId: exportData
      responses:
        204:
          description: All modified/created workspaces and users were exported
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/bufferBillingProjects":
    get:
      security: []
      tags:
      - offlineBilling
      - cron
      description: If the AoU Billing Project buffer is not full, refill with one
        or more billing projects.
      operationId: bufferBillingProjects
      responses:
        204:
          description: No Error
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/syncBillingProjectStatus":
    get:
      security: []
      tags:
      - offlineBilling
      - cron
      description: Fetch a BillingProjectBufferEntry that is in the CREATING state
        and check its status on Firecloud
      operationId: syncBillingProjectStatus
      responses:
        204:
          description: No Error
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/cleanBillingBuffer":
    get:
      security: []
      tags:
      - offlineBilling
      - cron
      description: Find BillingProjectBufferEntries that have failed during the creation
        or assignment step and set their statuses to ERROR
      operationId: cleanBillingBuffer
      responses:
        204:
          description: No Error
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/checkFreeTierBillingUsage":
    get:
      security: []
      tags:
      - offlineBilling
      - cron
      description: Find and alert users that have exceeded their free tier billing
        usage
      operationId: checkFreeTierBillingUsage
      responses:
        204:
          description: No Error
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/billingProjectGarbageCollection":
    get:
      security: []
      tags:
      - offlineBilling
      - cron
      description: Trigger a bulk transfer of ownership of billing projects associated
        with deleted workspaces
      operationId: billingProjectGarbageCollection
      responses:
        204:
          description: Billing Project Garbage Collection was successful.
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/monitoring/billingProjectBufferStatus":
    get:
      tags:
      - monitoring
      description: Return statistics about the billing buffer.
      operationId: getBillingProjectBufferStatus
      responses:
        200:
          description: No Error
          schema:
            "$ref": "#/definitions/BillingProjectBufferStatus"
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/cron/monitoring/updateGaugeMetrics":
    get:
      tags:
      - offlineMonitoring
      - cron
      description: Trigger recording of all gauge metrics
      operationId: updateGaugeMetrics
      security: []
      responses:
        204:
          description: No content
        500:
          description: Internal Error
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/rename":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      consumes:
      - application/json
      description: Renames specified notebook
      operationId: renameNotebook
      parameters:
      - in: body
        name: NotebookRename
        description: new name for notebook
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            newName:
              type: string
      responses:
        200:
          description: Successful rename
          schema:
            "$ref": "#/definitions/FileDetail"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/duplicate":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: Duplicates specified notebook
      operationId: cloneNotebook
      parameters:
      - in: path
        name: notebookName
        required: true
        type: string
      responses:
        200:
          description: Successful duplicate
          schema:
            "$ref": "#/definitions/FileDetail"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/copy":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - in: path
      name: notebookName
      required: true
      type: string
    post:
      tags:
      - workspaces
      description: Copy specified notebook in path to specified workspace in body
      operationId: copyNotebook
      parameters:
      - in: body
        name: copyNotebookRequest
        required: true
        schema:
          "$ref": "#/definitions/CopyRequest"
      responses:
        200:
          description: Successful copy
          schema:
            "$ref": "#/definitions/FileDetail"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/delete":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    delete:
      tags:
      - workspaces
      description: Deletes specified notebook
      operationId: deleteNotebook
      parameters:
      - in: path
        name: notebookName
        required: true
        type: string
      responses:
        200:
          description: Successful delete
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/readonly":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: Get the HTML for a read only view of the notebook
      operationId: readOnlyNotebook
      parameters:
      - in: path
        name: notebookName
        required: true
        type: string
      responses:
        200:
          description: HTML Read Only version of the notebook
          schema:
            "$ref": "#/definitions/ReadOnlyNotebookResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/lockingMetadata":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - workspaces
      summary: Get the locking metadata for a notebook
      description: |
        Get the locking metadata for a notebook, if available.  If the notebook is not locked
        (e.g. at first creation) this may be empty.  Additionally, the caller of this endpoint
        may not have the appropriate permissions to determine who is locking this notebook.
        When this is the case, the lastLockedBy field is set to UNKNOWN.
      operationId: getNotebookLockingMetadata
      parameters:
      - in: path
        name: notebookName
        required: true
        type: string
      responses:
        200:
          description: The locking metadata fields for the notebook
          schema:
            "$ref": "#/definitions/NotebookLockingMetadataResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohort-reviews":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - cohortReview
      description: Returns all cohort reviews in a workspace
      operationId: getCohortReviewsInWorkspace
      responses:
        200:
          description: A list of cohort definitions.
          schema:
            "$ref": "#/definitions/CohortReviewListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohort-reviews/{cohortReviewId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - in: path
      name: cohortReviewId
      type: integer
      format: int64
      required: true
      description: specifies which cohort review
    patch:
      tags:
      - cohortReview
      consumes:
      - application/json
      description: 'Modifies the cohort review with the specified ID; fields that
        are omitted will not be modified'
      operationId: updateCohortReview
      parameters:
      - in: body
        name: cohortReview
        description: cohort review
        schema:
          "$ref": "#/definitions/CohortReview"
      responses:
        200:
          description: The updated cohort review
          schema:
            "$ref": "#/definitions/CohortReview"
    delete:
      tags:
      - cohortReview
      description: Deletes the cohort review with the specified ID
      operationId: deleteCohortReview
      responses:
        202:
          description: ACCEPTED
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - cohorts
      description: Returns all cohort definitions in a workspace
      operationId: getCohortsInWorkspace
      responses:
        200:
          description: A list of cohort definitions.
          schema:
            "$ref": "#/definitions/CohortListResponse"
    post:
      tags:
      - cohorts
      consumes:
      - application/json
      description: Creates a cohort definition in a workspace.
      operationId: createCohort
      parameters:
      - in: body
        name: cohort
        description: cohort definition
        schema:
          "$ref": "#/definitions/Cohort"
      responses:
        200:
          description: The cohort definition that was created.
          schema:
            "$ref": "#/definitions/Cohort"
        400:
          description: Bad Request. Cohort name already exists
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/duplicate":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - cohorts
      description: Creates a duplicate of the cohort specified by cohortId
      operationId: duplicateCohort
      parameters:
      - in: body
        name: DuplicateCohortRequest
        description: Duplicate Cohort Request
        schema:
          "$ref": "#/definitions/DuplicateCohortRequest"
      responses:
        200:
          description: The cohort definition that was created.
          schema:
            "$ref": "#/definitions/Cohort"
        400:
          description: Bad Request. Cohort name already exists
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    get:
      tags:
      - cohorts
      description: Returns the cohort definition with the specified ID
      operationId: getCohort
      responses:
        200:
          description: A cohort definition
          schema:
            "$ref": "#/definitions/Cohort"
    patch:
      tags:
      - cohorts
      consumes:
      - application/json
      description: 'Modifies the cohort definition with the specified ID; fields that
        are omitted will not be modified'
      operationId: updateCohort
      parameters:
      - in: body
        name: cohort
        description: cohort definition
        schema:
          "$ref": "#/definitions/Cohort"
      responses:
        200:
          description: The updated cohort definition
          schema:
            "$ref": "#/definitions/Cohort"
    delete:
      tags:
      - cohorts
      description: Deletes the cohort definition with the specified ID
      operationId: deleteCohort
      responses:
        202:
          description: ACCEPTED
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - cohorts
      consumes:
      - application/json
      description: 'Materializes a cohort for a given CDR version to specified output.'
      operationId: materializeCohort
      parameters:
      - in: body
        name: request
        description: cohort materialization request
        schema:
          "$ref": "#/definitions/MaterializeCohortRequest"
      responses:
        200:
          description: The results of materializing the cohort
          schema:
            "$ref": "#/definitions/MaterializeCohortResponse"
  "/v1/workspaces/user-recent-resources":
    get:
      tags:
      - userMetrics
      description: Returns the resources accessed by user order by access time desc
      operationId: getUserRecentResources
      responses:
        200:
          description: A list of resources order by last access time desc order
          schema:
            "$ref": "#/definitions/WorkspaceResourceResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-resources/update":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - userMetrics
      consumes:
      - application/json
      description: Add/update user recent resource
      operationId: updateRecentResource
      parameters:
      - in: body
        name: RecentResourceRequest
        description: request object for updating recent resource
        required: true
        schema:
          "$ref": "#/definitions/RecentResourceRequest"
      x-aou-note: |
        this response type is currently only ever used by Notebooks because other
        resources are stored in our db, and therefore cache ops are
        done for them in the backend
      responses:
        200:
          description: Successfully added/updated
          schema:
            "$ref": "#/definitions/WorkspaceResource"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-resources/delete":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    delete:
      tags:
      - userMetrics
      description: Deletes entry from recent resource
      operationId: deleteRecentResource
      parameters:
      - in: body
        name: RecentResourceRequest
        description: request object for updating recent resource
        required: true
        schema:
          "$ref": "#/definitions/RecentResourceRequest"
      responses:
        200:
          description: Successfully deleted
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/user-recent-workspaces":
    get:
      tags:
      - workspaces
      description: Returns the workspaces edited by the user in descending order of
        update time
      operationId: getUserRecentWorkspaces
      responses:
        200:
          description: A list of workspaces order by last-updated time in descending
            order
          schema:
            "$ref": "#/definitions/RecentWorkspaceResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-workspaces/update":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - workspaces
      description: Add/update user recent workspaces
      operationId: updateRecentWorkspaces
      responses:
        200:
          description: Successfully added/updated
          schema:
            "$ref": "#/definitions/RecentWorkspaceResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - conceptSets
      description: Returns all concept sets in a workspace
      operationId: getConceptSetsInWorkspace
      responses:
        200:
          description: A list of concept sets.
          schema:
            "$ref": "#/definitions/ConceptSetListResponse"
    post:
      tags:
      - conceptSets
      consumes:
      - application/json
      description: Creates a concept set in a workspace.
      operationId: createConceptSet
      parameters:
      - in: body
        name: request
        description: create concept set request
        schema:
          "$ref": "#/definitions/CreateConceptSetRequest"
      responses:
        200:
          description: The concept set that was created.
          schema:
            "$ref": "#/definitions/ConceptSet"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/survey-concept-sets/{surveyName}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - in: path
      name: surveyName
      type: string
      required: true
    get:
      tags:
      - conceptSets
      description: Returns all survey concept sets in a workspace
      operationId: getSurveyConceptSetsInWorkspace
      responses:
        200:
          description: A list of concept sets of type surveys.
          schema:
            "$ref": "#/definitions/ConceptSetListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/conceptSetId"
    get:
      tags:
      - conceptSets
      description: Returns the concept set definition with the specified ID
      operationId: getConceptSet
      responses:
        200:
          description: A concept set definition
          schema:
            "$ref": "#/definitions/ConceptSet"
    patch:
      tags:
      - conceptSets
      consumes:
      - application/json
      description: 'Modifies the name or description of the concept set with the specified
        ID; fields that are omitted will not be modified'
      operationId: updateConceptSet
      parameters:
      - in: body
        name: conceptSet
        description: concept set definition
        schema:
          "$ref": "#/definitions/ConceptSet"
      responses:
        200:
          description: The updated concept set.
          schema:
            "$ref": "#/definitions/ConceptSet"
    delete:
      tags:
      - conceptSets
      description: Deletes the concept set with the specified ID
      operationId: deleteConceptSet
      responses:
        202:
          description: ACCEPTED
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/concepts":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/conceptSetId"
    post:
      tags:
      - conceptSets
      consumes:
      - application/json
      description: 'Adds or removes concepts from the concept set.'
      operationId: updateConceptSetConcepts
      parameters:
      - in: body
        name: request
        description: update concept set request
        schema:
          "$ref": "#/definitions/UpdateConceptSetRequest"
      responses:
        200:
          description: The updated concept set.
          schema:
            "$ref": "#/definitions/ConceptSet"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/copy":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - in: path
      name: conceptSetId
      required: true
      type: string
    post:
      tags:
      - conceptSets
      description: Copy specified concept set in path to specified workspace in body
      operationId: copyConceptSet
      parameters:
      - in: body
        name: copyConceptSetRequest
        required: true
        schema:
          "$ref": "#/definitions/CopyRequest"
      responses:
        200:
          description: Successful copy
          schema:
            "$ref": "#/definitions/ConceptSet"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/domainInfo":
    get:
      tags:
      - concepts
      description: 'Returns information on the domains of data in the workspace''s
        CDR version along with participant and concept counts'
      operationId: getDomainInfo
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      responses:
        200:
          description: information on the domains
          schema:
            "$ref": "#/definitions/DomainInfoResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/surveyInfo":
    get:
      tags:
      - concepts
      description: 'Returns survey information in the workspace''s CDR version along
        with participant and question count'
      operationId: getSurveyInfo
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      responses:
        200:
          description: information about the surveys
          schema:
            "$ref": "#/definitions/SurveysResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/searchSurveys":
    post:
      tags:
      - concepts
      description: 'Searches for surveys in criteria table by synonyms or survey name'
      operationId: searchSurveys
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: body
        name: request
        description: survey search request
        schema:
          "$ref": "#/definitions/SearchSurveysRequest"
      responses:
        200:
          description: collection of survey questions
          schema:
            type: array
            items:
              "$ref": "#/definitions/SurveyQuestions"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/generateCode/{kernelType}":
    post:
      tags:
      - dataSet
      description: 'Given a Data Set, return the SQL query built from it.'
      operationId: generateCode
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: path
        name: kernelType
        required: true
        type: string
      - in: body
        name: dataSet
        required: true
        schema:
          "$ref": "#/definitions/DataSetRequest"
      responses:
        200:
          description: 'A SQL query for each domain in the Data Set'
          schema:
            "$ref": "#/definitions/DataSetCodeResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-sets":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    get:
      tags:
      - dataSet
      description: Returns all data sets in a workspace
      operationId: getDataSetsInWorkspace
      responses:
        200:
          description: A list of data sets.
          schema:
            "$ref": "#/definitions/DataSetListResponse"
    post:
      tags:
      - dataSet
      description: 'Creates Data Set'
      operationId: createDataSet
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: body
        name: dataSetRequest
        required: true
        schema:
          "$ref": "#/definitions/DataSetRequest"
      responses:
        200:
          description: Data set has been created successfully
          schema:
            "$ref": "#/definitions/DataSet"
        400:
          description: Invalid data set request
          schema:
            "$ref": "#/definitions/ErrorResponse"
        409:
          description: Data Set with the same name already exists
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/{workspaceNamespace}/{workspaceId}/data-sets/{dataSetId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/dataSetId"
    get:
      tags:
      - dataSet
      operationId: getDataSet
      responses:
        200:
          description: The data set with the specified ID
          schema:
            "$ref": "#/definitions/DataSet"
    patch:
      tags:
      - dataSet
      consumes:
      - application/json
      operationId: updateDataSet
      parameters:
      - in: body
        name: dataSet
        description: data set definition
        schema:
          "$ref": "#/definitions/DataSetRequest"
      responses:
        200:
          description: The updated data set.
          schema:
            "$ref": "#/definitions/DataSet"
        409:
          description: Data Set with the same name already exists
          schema:
            "$ref": "#/definitions/ErrorResponse"
    delete:
      tags:
      - dataSet
      description: Deletes the data set with the specified ID
      operationId: deleteDataSet
      responses:
        202:
          description: ACCEPTED
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/{workspaceNamespace}/{workspaceId}/data-sets/dataSetByResourceId":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      parameters:
      - in: body
        name: resourceType
        required: true
        schema:
          "$ref": "#/definitions/ResourceType"
      - in: query
        name: id
        type: integer
        format: int64
        required: true
      tags:
      - dataSet
      operationId: getDataSetByResourceId
      responses:
        200:
          description: A list of data sets containg cohort/concept Id passed.
          schema:
            "$ref": "#/definitions/DataSetListResponse"
  "/v1/cdrVersionId/{cdrVersionId}/domain/{domain}/domainValue/{domainValue}/dataDictionaryEntry":
    get:
      parameters:
      - in: path
        name: cdrVersionId
        type: integer
        format: int64
        required: true
      - in: path
        name: domain
        required: true
        type: string
      - in: path
        name: domainValue
        type: string
        required: true
      tags:
      - dataSet
      operationId: getDataDictionaryEntry
      responses:
        200:
          description: Detailed definition of a given domain value for the specified
            CDR Version
          schema:
            "$ref": "#/definitions/DataDictionaryEntry"
  "/v1/{workspaceNamespace}/{workspaceId}/data-set/markDirty":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      parameters:
      - in: body
        name: markDataSetRequest
        schema:
          "$ref": "#/definitions/MarkDataSetRequest"
      tags:
      - dataSet
      operationId: markDirty
      responses:
        200:
          description: Mark all dataset with cohort/concept id as dirty
          schema:
            type: boolean
            default: false
  "/v1/{workspaceNamespace}/{workspaceId}/data-set/exportToNotebook":
    post:
      tags:
      - dataSet
      description: 'Exports a data set query to a notebook'
      operationId: exportToNotebook
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: body
        name: dataSetExportRequest
        required: true
        schema:
          "$ref": "#/definitions/DataSetExportRequest"
      responses:
        200:
          description: Data set has been exported correctly
          schema:
            "$ref": "#/definitions/EmptyResponse"
        400:
          description: Invalid data set request
          schema:
            "$ref": "#/definitions/ErrorResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/preview":
    post:
      tags:
      - dataSet
      description: 'Preview data set'
      operationId: previewDataSetByDomain
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: body
        name: dataSetPreviewRequest
        required: true
        schema:
          "$ref": "#/definitions/DataSetPreviewRequest"
      responses:
        200:
          description: 'A SQL query for each domain in the Data Set'
          schema:
            "$ref": "#/definitions/DataSetPreviewResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/domainValues/{domain}":
    get:
      tags:
      - dataSet
      description: 'Returns all column names/values for a given domain.'
      operationId: getValuesFromDomain
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: path
        name: domain
        required: true
        type: string
      responses:
        200:
          description: the values/column names in the domain.
          schema:
            "$ref": "#/definitions/DomainValuesResponse"
  "/v1/cloudTask/exportResearcherData":
    x-aou-note: |
      Endpoints for task in cloud task queue
      Note: all requests tagged as "cloudTask" must have the header X-AppEngine-QueueName:
      to the queue name, which app engine itself only sets (and overrides internally) when invoking
      cloud task. See
      https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_app_engine_task_request_headers
      and o.p.w.interceptors.CloudTaskInterceptor which implements the header check.

      Using body parameter ref ArrayOfLong instead of defining array of type long here because of
      bug in swagger version 2.3.0 https://github.com/swagger-api/swagger-codegen/issues/6745.2.2.3
    post:
      tags:
      - cloudTaskRdrExport
      - cloudTask
      security: []
      description: 'Task handler which handle request from cloud task queue rdrQueueTest
        to send Researcher data'
      operationId: exportResearcherData
      consumes:
      - application/json
      parameters:
      - in: body
        name: researcherIds
        required: true
        description: The IDs of Users to be exported to Rdr.
        schema:
          "$ref": "#/definitions/ArrayOfLong"
      responses:
        200:
          description: 'A SQL query for each domain in the Data Set'
  "/v1/cloudTask/exportWorkspaceData":
    post:
      tags:
      - cloudTaskRdrExport
      - cloudTask
      security: []
      description: 'Task handler which handle request from cloud task queue rdrQueueTest
        to send Workspace data'
      operationId: exportWorkspaceData
      parameters:
      - in: body
        name: researchIds
        required: true
        description: The IDs of workspace to be exported to Rdr.
        schema:
          "$ref": "#/definitions/ArrayOfLong"
      responses:
        200:
          description: 'A SQL query for each domain in the Data Set'
  "/v1/institutions":
    x-aou-note: Institution endpoints, for Verified Institutional Affiliation
    get:
      tags:
      - institution
      description: 'Gets the list of all Institutions. Requires INSTITUTION_ADMIN
        authority.'
      operationId: getInstitutions
      responses:
        200:
          description: 'A list of all Institutions'
          schema:
            "$ref": "#/definitions/GetInstitutionsResponse"
    post:
      tags:
      - institution
      description: 'Create an Institution. Requires INSTITUTION_ADMIN authority.'
      operationId: createInstitution
      parameters:
      - in: body
        name: institutionToCreate
        required: true
        description: The Institution to be created by this operation.
        schema:
          "$ref": "#/definitions/Institution"
      responses:
        200:
          description: 'The Institution created by this operation.'
          schema:
            "$ref": "#/definitions/Institution"
  "/v1/institutions/publicDetails":
    get:
      tags:
      - institution
      description: 'Gets the public details for the list of all Institutions.'
      operationId: getPublicInstitutionDetails
      security: []
      responses:
        200:
          description: 'A list of all Institutions'
          schema:
            "$ref": "#/definitions/GetPublicInstitutionDetailsResponse"
  "/v1/institutions/{shortName}":
    parameters:
    - in: path
      name: shortName
      required: true
      type: string
      description: 'A short unique name for the Institution used as an identifier,
        such as "VUMC"'
    get:
      tags:
      - institution
      description: 'Gets the Institution corresponding to the shortName ID. Requires
        INSTITUTION_ADMIN authority.'
      operationId: getInstitution
      responses:
        200:
          description: 'The Institution corresponding to the shortName ID.'
          schema:
            "$ref": "#/definitions/Institution"
    delete:
      tags:
      - institution
      description: 'Deletes the Institution corresponding to the shortName ID. Requires
        INSTITUTION_ADMIN authority.'
      operationId: deleteInstitution
      responses:
        204:
          description: 'Successful deletion of the Institution corresponding to the
            shortName ID.'
        409:
          description: Could not delete the Institution because it has verified affiliations.
    patch:
      tags:
      - institution
      description: 'Updates an Institution. Requires INSTITUTION_ADMIN authority.'
      operationId: updateInstitution
      parameters:
      - in: body
        name: institutionToUpdate
        required: true
        description: The Institution to update.
        schema:
          "$ref": "#/definitions/Institution"
      responses:
        200:
          description: The updated Institution.
          schema:
            "$ref": "#/definitions/Institution"
  "/v1/institutions/{shortName}/checkEmail/{email}/":
    parameters:
    - in: path
      name: shortName
      type: string
      description: 'The short name / key of the institution to check, e.g. "VUMC"'
      required: true
    - in: path
      name: email
      type: string
      description: Institutional contact email address to check.
      required: true
    get:
      tags:
        - institution
      operationId: checkEmail
      description: Checks whether the given email address is a verified member of an institution.
      x-aou-note: This endpoint is publicly-accessible and called by clients during user registration.
      security: []
      responses:
        200:
          description: Whether the email is a valid member of the institution.
          schema:
            "$ref": "#/definitions/CheckEmailResponse"
  "/v1/institutions/instructionsEmail":
    post:
      tags:
        - institution
      description: 'Sets or updates the Institution-specific user instructions to be sent
        by email after registration. Requires INSTITUTION_ADMIN authority.'
      operationId: setInstitutionUserInstructions
      parameters:
        - in: body
          name: userInstructions
          description: 'Text to include in an email sent to users for an Institution after they are registered.'
          schema:
            "$ref": "#/definitions/InstitutionUserInstructions"
      responses:
        200:
          description: 'Successfully set or updated the Institution-specific user instructions to be sent
            by email after registration.'
          schema:
            "$ref": "#/definitions/InstitutionUserInstructions"
  "/v1/institutions/instructionsEmail/{shortName}":
    parameters:
      - in: path
        name: shortName
        required: true
        type: string
        description: 'A short unique name for the Institution used as an identifier,
          such as "VUMC"'
    delete:
      tags:
        - institution
      description: 'Remove the Institution-specific user instructions to be sent
        by email after registration. Requires INSTITUTION_ADMIN authority.'
      operationId: deleteInstitutionUserInstructions
      responses:
        204:
          description: 'Successfully removed the Institution-specific user instructions to be sent
            by email after registration.'
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/getDataTableQuery":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - cohorts
      consumes:
      - application/json
      description: 'Translates a data table specification into a SQL query to run
        against the CDR.'
      operationId: getDataTableQuery
      parameters:
      - in: body
        name: request
        description: a query specification for a data table
        schema:
          "$ref": "#/definitions/DataTableSpecification"
      responses:
        200:
          description: the query to run against the CDR to retrieve the data
          schema:
            "$ref": "#/definitions/CdrQuery"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/getCohortAnnotations":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    post:
      tags:
      - cohorts
      consumes:
      - application/json
      description: 'Retrieves annotations for a cohort in the workspace'
      operationId: getCohortAnnotations
      parameters:
      - in: body
        name: request
        description: a request indicating what annotations to retrieve
        schema:
          "$ref": "#/definitions/CohortAnnotationsRequest"
      responses:
        200:
          description: the requested annotations
          schema:
            "$ref": "#/definitions/CohortAnnotationsResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/searchConcepts":
    post:
      tags:
      - concepts
      consumes:
      - application/json
      description: 'Searches for concepts in concept table by name, and optionally
        filter on domain, vocabulary IDs, or standard concept status. Uses the CDR
        version affiliated with the workspace specified in the path.'
      operationId: searchConcepts
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: body
        name: request
        description: concept search request
        schema:
          "$ref": "#/definitions/SearchConceptsRequest"
      responses:
        200:
          description: A collection of concepts
          schema:
            "$ref": "#/definitions/ConceptListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/domainCounts":
    post:
      tags:
      - concepts
      consumes:
      - application/json
      description: 'Searches for concepts in concept table by name, and optionally
        filter on domain, vocabulary IDs, or standard concept status. Uses the CDR
        version affiliated with the workspace specified in the path.'
      operationId: domainCounts
      parameters:
      - "$ref": "#/parameters/workspaceNamespace"
      - "$ref": "#/parameters/workspaceId"
      - in: body
        name: request
        description: domain counts search request
        schema:
          "$ref": "#/definitions/DomainCountsRequest"
      responses:
        200:
          description: A collection of concepts
          schema:
            "$ref": "#/definitions/DomainCountsListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    post:
      tags:
      - cohortReview
      consumes:
      - application/json
      description: 'This endpoint will create an cohort review which is a participant
        cohort sample specified by the review size parameter.'
      operationId: createCohortReview
      parameters:
      - in: body
        name: request
        required: true
        description: cohort review creation request body
        schema:
          "$ref": "#/definitions/CreateReviewRequest"
      responses:
        200:
          description: A cohortReviewId and cohort count
          schema:
            "$ref": "#/definitions/CohortReview"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - "$ref": "#/parameters/cdrVersionId"
    post:
      tags:
      - cohortReview
      consumes:
      - application/json
      description: 'Returns a collection of participants for the specified cohortId
        and cdrVersionId. This endpoint does pagination based on page, limit, order
        and column.'
      operationId: getParticipantCohortStatuses
      parameters:
      - in: body
        name: request
        required: true
        description: request body for getting list of ParticipantCohortStatuses.
        schema:
          "$ref": "#/definitions/PageFilterRequest"
      responses:
        200:
          description: A collection of participants
          schema:
            "$ref": "#/definitions/CohortReview"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortReviewId"
    - "$ref": "#/parameters/participantId"
    get:
      tags:
      - cohortReview
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantCohortStatus
      responses:
        200:
          description: The ParticipantCohortStatus definition
          schema:
            "$ref": "#/definitions/ParticipantCohortStatus"
    put:
      tags:
      - cohortReview
      consumes:
      - application/json
      description: Modifies the ParticipantCohortStatus status
      operationId: updateParticipantCohortStatus
      parameters:
      - in: body
        name: cohortStatusRequest
        description: Contains the new review status
        schema:
          "$ref": "#/definitions/ModifyCohortStatusRequest"
      responses:
        200:
          description: The updated ParticipantCohortStatus definition
          schema:
            "$ref": "#/definitions/ParticipantCohortStatus"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/charts/{domain}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortReviewId"
    - "$ref": "#/parameters/participantId"
    get:
      tags:
      - cohortReview
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantChartData
      parameters:
      - in: path
        name: domain
        type: string
        required: true
        description: specifies which domain the chart data should belong to.
      - in: query
        name: limit
        type: integer
        required: false
        description: the limit search results to
      responses:
        200:
          description: The Participant Chart data
          schema:
            "$ref": "#/definitions/ParticipantChartDataListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/charts/{domain}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortReviewId"
    get:
      tags:
      - cohortReview
      description: Returns a collection of CohortChartData for UI charting in cohort
        review.
      operationId: getCohortChartData
      parameters:
      - in: path
        name: domain
        type: string
        required: true
        description: specifies which domain the CohortChartData should belong to.
      - in: query
        name: limit
        type: integer
        required: false
        description: the limit search results to
      responses:
        200:
          description: A collection of CohortChartData
          schema:
            "$ref": "#/definitions/CohortChartDataListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/annotations":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortReviewId"
    - "$ref": "#/parameters/participantId"
    post:
      tags:
      - cohortReview
      consumes:
      - application/json
      description: This endpoint will create a ParticipantCohortAnnotation.
      operationId: createParticipantCohortAnnotation
      parameters:
      - in: body
        name: request
        required: true
        description: ParticipantCohortAnnotation creation request body
        schema:
          "$ref": "#/definitions/ParticipantCohortAnnotation"
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          schema:
            "$ref": "#/definitions/ParticipantCohortAnnotation"
    get:
      tags:
      - cohortReview
      description: This endpoint will get a collection of ParticipantCohortAnnotations.
      operationId: getParticipantCohortAnnotations
      responses:
        200:
          description: A collection of ParticipantCohortAnnotation.
          schema:
            "$ref": "#/definitions/ParticipantCohortAnnotationListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/data":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortReviewId"
    - "$ref": "#/parameters/participantId"
    post:
      tags:
      - cohortReview
      consumes:
      - application/json
      description: 'Returns a collection of participant data for the specified params
        based off the PageFilterRequest. This endpoint does pagination based on page,
        limit, order and column.'
      operationId: getParticipantData
      parameters:
      - in: body
        name: request
        required: true
        description: request body for getting list of participant data.
        schema:
          "$ref": "#/definitions/PageFilterRequest"
      responses:
        200:
          description: A collection of ParticipantConditions.
          schema:
            "$ref": "#/definitions/ParticipantDataListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/count":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortReviewId"
    - "$ref": "#/parameters/participantId"
    post:
      tags:
      - cohortReview
      consumes:
      - application/json
      description: Returns a count based on page, limit, order, sort column and/or filter.
      operationId: getParticipantCount
      parameters:
      - in: body
        name: request
        required: true
        description: request body for getting list of participant data.
        schema:
          "$ref": "#/definitions/PageFilterRequest"
      responses:
        200:
          description: A count of Participants.
          schema:
            "$ref": "#/definitions/ParticipantDataCountResponse"
  ? "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/annotations/{annotationId}"
  : parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortReviewId"
    - "$ref": "#/parameters/participantId"
    - in: path
      name: annotationId
      type: integer
      format: int64
      required: true
      description: specifies which annotation
    put:
      tags:
      - cohortReview
      consumes:
      - application/json
      description: This endpoint will modify a ParticipantCohortAnnotation.
      operationId: updateParticipantCohortAnnotation
      parameters:
      - in: body
        name: request
        required: true
        description: ParticipantCohortAnnotation modification request body
        schema:
          "$ref": "#/definitions/ModifyParticipantCohortAnnotationRequest"
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          schema:
            "$ref": "#/definitions/ParticipantCohortAnnotation"
    delete:
      tags:
      - cohortReview
      description: Deletes the ParticipantCohortAnnotation with the specified ID
      operationId: deleteParticipantCohortAnnotation
      responses:
        202:
          description: ParticipantCohortAnnotation deletion request accepted
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/vocabularies":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortReviewId"
    get:
      tags:
      - cohortReview
      description: This endpoint will get a collection of OMOP vocabularies per cdrVersionId.
      operationId: getVocabularies
      responses:
        200:
          description: A collection of OMOP vocabularies.
          schema:
            "$ref": "#/definitions/VocabularyListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    post:
      tags:
      - cohortAnnotationDefinition
      consumes:
      - application/json
      description: This endpoint will create a CohortAnnotationDefinition.
      operationId: createCohortAnnotationDefinition
      parameters:
      - in: body
        name: request
        required: true
        description: CohortAnnotationDefinition creation request body
        schema:
          "$ref": "#/definitions/CohortAnnotationDefinition"
      responses:
        200:
          description: A CohortAnnotationDefinition.
          schema:
            "$ref": "#/definitions/CohortAnnotationDefinition"
    get:
      tags:
      - cohortAnnotationDefinition
      description: Returns a collection of CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinitions
      responses:
        200:
          description: A collection of CohortAnnotationDefinition
          schema:
            "$ref": "#/definitions/CohortAnnotationDefinitionListResponse"
  "/v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}":
    parameters:
    - "$ref": "#/parameters/workspaceNamespace"
    - "$ref": "#/parameters/workspaceId"
    - "$ref": "#/parameters/cohortId"
    - in: path
      name: annotationDefinitionId
      type: integer
      format: int64
      required: true
      description: specifies which CohortAnnotationDefinition.
    get:
      tags:
      - cohortAnnotationDefinition
      description: Returns a CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinition
      responses:
        200:
          description: A CohortAnnotationDefinition
          schema:
            "$ref": "#/definitions/CohortAnnotationDefinition"
    put:
      tags:
      - cohortAnnotationDefinition
      consumes:
      - application/json
      description: modify the CohortAnnotationDefinition.
      operationId: updateCohortAnnotationDefinition
      parameters:
      - in: body
        name: cohortAnnotationDefinition
        description: Contains the new CohortAnnotationDefinition
        schema:
          "$ref": "#/definitions/CohortAnnotationDefinition"
      responses:
        200:
          description: The updated CohortAnnotationDefinition definition
          schema:
            "$ref": "#/definitions/CohortAnnotationDefinition"
    delete:
      tags:
      - cohortAnnotationDefinition
      description: Deletes the CohortAnnotationDefinition with the specified ID
      operationId: deleteCohortAnnotationDefinition
      responses:
        202:
          description: CohortAnnotationDefinition deletion request accepted
          schema:
            "$ref": "#/definitions/EmptyResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/menu":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: 'Returns criteria menu options'
      operationId: findCriteriaMenuOptions
      responses:
        200:
          description: A collection of criteria menu options
          schema:
            "$ref": "#/definitions/CriteriaMenuOptionsListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search/term":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: 'Returns a collection of criteria per search term'
      operationId: findCriteriaByDomainAndSearchTerm
      parameters:
      - in: path
        name: domain
        type: string
        required: true
        description: the specific type of domain
      - in: query
        name: term
        type: string
        required: true
        description: the term to search for
      - in: query
        name: limit
        type: integer
        required: false
        description: number of criteria matches to return
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/{conceptId}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: 'Returns a collection of criteria per concept id'
      operationId: findStandardCriteriaByDomainAndConceptId
      parameters:
      - in: path
        name: domain
        type: string
        required: true
        description: the specific type of domain
      - in: path
        name: conceptId
        type: integer
        format: int64
        required: true
        description: the concept id to search for
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{domain}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: 'Returns a collection of criteria by optional query parameters
        of the following: type, subtype, parentId and/or allChildren'
      operationId: findCriteriaBy
      parameters:
      - in: path
        name: domain
        type: string
        required: true
        description: the specific domain of criteria to get
      - in: query
        name: type
        type: string
        required: false
        description: the specific type of criteria to get
      - in: query
        name: standard
        type: boolean
        default: false
        required: false
        description: reveals if source or standard
      - in: query
        name: parentId
        type: integer
        format: int64
        required: false
        description: fetch direct children of parentId
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns matches on criteria table by code or name
      operationId: findCriteriaAutoComplete
      parameters:
      - in: path
        name: domain
        type: string
        required: true
        description: the specific domain of criteria to get
      - in: query
        name: type
        type: string
        required: false
        description: the type of the criteria were search for
      - in: query
        name: standard
        type: boolean
        default: false
        required: false
        description: the type of the criteria were search for
      - in: query
        name: term
        type: string
        required: true
        description: the term to search for
      - in: query
        name: limit
        type: integer
        required: false
        description: number of criteria matches to return
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/drug":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree matching value
      operationId: findDrugBrandOrIngredientByValue
      parameters:
      - in: query
        name: value
        type: string
        required: true
        description: matches name or code of drug
      - in: query
        name: limit
        type: integer
        required: false
        description: number of criteria matches to return
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/drug/ingredient/{conceptId}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: findDrugIngredientByConceptId
      parameters:
      - in: path
        name: conceptId
        type: integer
        format: int64
        required: true
        description: conceptId of brand
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/criteria/attribute/{conceptId}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: findCriteriaAttributeByConceptId
      parameters:
      - in: path
        name: conceptId
        type: integer
        format: int64
        required: true
        description: conceptId of brand
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/CriteriaAttributeListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/age/counts":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Return counts for age type and age
      operationId: findAgeTypeCounts
      responses:
        200:
          description: A collection age type counts
          schema:
            "$ref": "#/definitions/AgeTypeCountListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/search":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    post:
      tags:
      - cohortBuilder
      consumes:
      - application/json
      description: Searches for participants based on criteria, criteria specific
        parameters, and modifiers.
      operationId: countParticipants
      parameters:
      - in: body
        name: request
        description: object of parameters by which to perform the search
        schema:
          "$ref": "#/definitions/SearchRequest"
        required: true
      responses:
        200:
          description: A count of subjects
          schema:
            type: integer
            format: int64
  "/v1/cohortbuilder/{cdrVersionId}/chartinfo/{genderOrSex}/{age}":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    post:
      tags:
      - cohortBuilder
      consumes:
      - application/json
      description: Searches for demographic info about subjects.
      operationId: findDemoChartInfo
      parameters:
      - in: path
        name: genderOrSex
        type: string
        required: true
        description: represents gender or sex at birth
      - in: path
        name: age
        type: string
        required: true
        description: represents age, age at consent or age at cdr
      - in: body
        name: request
        description: object of parameters by which to perform the search
        schema:
          "$ref": "#/definitions/SearchRequest"
        required: true
      responses:
        200:
          description: A collection of criteria
          schema:
            "$ref": "#/definitions/DemoChartInfoListResponse"
  "/v1/cohortbuilder/{cdrVersionId}/demographics":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Will return a list all values for gender, race and ethnicity.
      operationId: findParticipantDemographics
      responses:
        200:
          description: An object which contains a list of all values for gender, race
            and ethnicity.
          schema:
            "$ref": "#/definitions/ParticipantDemographics"
  "/v1/cohortbuilder/{cdrVersionId}/dataFilters":
    parameters:
    - "$ref": "#/parameters/cdrVersionId"
    get:
      tags:
      - cohortBuilder
      description: Returns data filter options per cdr version
      operationId: findDataFilters
      responses:
        200:
          description: A collection of data filter options
          schema:
            "$ref": "#/definitions/DataFiltersResponse"
definitions:
  ArchivalStatus:
    type: string
    description: CDR archival status; archived CDRs cannot be used for new workspaces.
    enum:
    - LIVE
    - ARCHIVED
  DataAccessLevel:
    type: string
    description: levels of access to data in the curated data repository
    enum:
    - unregistered
    - registered
    - protected
  RdrEntity:
    type: string
    description: Entities send to RDR
    enum:
    - USER
    - WORKSPACE
  Degree:
    type: string
    enum:
    - PHD
    - MD
    - JD
    - EDD
    - MSN
    - MS
    - MA
    - MBA
    - ME
    - BA
    - BS
    - BSN
    - NONE
  Domain:
    type: string
    description: a domain for concepts corresponding to a table in the OMOP schema
    enum:
    - OBSERVATION
    - PROCEDURE
    - DRUG
    - CONDITION
    - MEASUREMENT
    - DEVICE
    - DEATH
    - VISIT
    - SURVEY
    - PERSON
    - PHYSICALMEASUREMENT
  Surveys:
    type: string
    description: a survey for concepts
    enum:
    - THE BASICS
    - LIFESTYLE
    - OVERALL HEALTH
  Race:
    type: string
    enum:
    - AIAN
    - ASIAN
    - AA
    - NHOPI
    - WHITE
    - NONE
    - PREFER_NO_ANSWER
  Ethnicity:
    type: string
    enum:
    - HISPANIC
    - NOT_HISPANIC
    - PREFER_NO_ANSWER
  GenderIdentity:
    type: string
    enum:
    - MAN
    - WOMAN
    - NON_BINARY
    - TRANSGENDER
    - NONE_DESCRIBE_ME
    - PREFER_NO_ANSWER
  SexAtBirth:
    type: string
    enum:
    - MALE
    - FEMALE
    - INTERSEX
    - NONE_OF_THESE_DESCRIBE_ME
    - PREFER_NO_ANSWER
  SexualOrientation:
    type: string
    enum:
    - GAY
    - LESBIAN
    - STRAIGHT
    - BISEXUAL
    - NONE_OF_THESE_DESCRIBE_ME
    - PREFER_NO_ANSWER
  Education:
    type: string
    enum:
    - NO_EDUCATION
    - GRADES_1_12
    - UNDERGRADUATE
    - COLLEGE_GRADUATE
    - MASTER
    - DOCTORATE
  Disability:
    type: string
    enum:
    - true
    - false
  NonAcademicAffiliation:
    type: string
    enum:
    - INDUSTRY
    - EDUCATIONAL_INSTITUTION
    - COMMUNITY_SCIENTIST
    - FREE_TEXT
    description: 'This enum is used by the older Institutional Affiliation flow associated
      with the Demographic Survey. The corresponding Verified Institutional Affiliation
      (newer flow) enum is OrganizationType. The two have slightly different values
      and are therefore NOT COMPATIBLE. This enum may be deleted in the future.'
  IndustryRole:
    type: string
    enum:
    - PRE_DOCTORAL
    - POST_DOCTORAL
    - EARLY
    - PI
    - FREE_TEXT
    description: 'This enum is used by the older Institutional Affiliation flow associated
      with the Demographic Survey. The corresponding Verified Institutional Affiliation
      (newer flow) enum is the UI-only InstitutionalRole_IND_HCNP. The two have slightly
      different values and are therefore NOT COMPATIBLE. This enum may be deleted
      in the future.'
  EducationalRole:
    type: string
    enum:
    - TEACHER
    - STUDENT
    - ADMIN
    - FREE_TEXT
    description: 'This enum is used by the older Institutional Affiliation flow associated
      with the Demographic Survey. The corresponding Verified Institutional Affiliation
      (newer flow) enum is the UI-only InstitutionalRole_EDU. The two have slightly
      different values and are therefore NOT COMPATIBLE. This enum may be deleted
      in the future.'
  AcademicRole:
    type: string
    enum:
    - UNDERGRADUATE
    - TRAINEE
    - FELLOW
    - EARLY_CAREER
    - NON_TENURE
    - MID_CAREER
    - LATE_CAREER
    - PROJECT_PERSONNEL
    description: 'This enum is used by the older Institutional Affiliation flow associated
      with the Demographic Survey. The corresponding Verified Institutional Affiliation
      (newer flow) enum is the UI-only InstitutionalRole_ARI. The two have slightly
      different values and are therefore NOT COMPATIBLE. This enum may be deleted
      in the future.'
  FeaturedWorkspaceCategory:
    type: string
    enum:
    - DEMO_PROJECTS
    - PHENOTYPE_LIBRARY
    - TUTORIAL_WORKSPACES
  CdrVersionListResponse:
    type: object
    required:
    - items
    - defaultCdrVersionId
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/CdrVersion"
      defaultCdrVersionId:
        type: string
        description: ID of the CDR versions that should be used by the user by default
  CdrVersion:
    type: object
    required:
    - cdrVersionId
    - name
    - dataAccessLevel
    - creationTime
    properties:
      cdrVersionId:
        type: string
      name:
        type: string
      dataAccessLevel:
        "$ref": "#/definitions/DataAccessLevel"
      archivalStatus:
        "$ref": "#/definitions/ArchivalStatus"
      creationTime:
        type: integer
        format: int64
        description:
          Milliseconds since the UNIX epoch. This timestamp is derived from the deid dataset name.
          Ex - deid_output_20191004 -> 2019-10-04 00:00:00Z
  DomainInfo:
    type: object
    required:
    - domain
    - name
    - description
    - standardConceptCount
    - allConceptCount
    - participantCount
    properties:
      domain:
        description: the domain ID
        "$ref": "#/definitions/Domain"
      name:
        description: display name of the domain
        type: string
      description:
        description: description of the domain
        type: string
      standardConceptCount:
        description: number of standard concepts in this domain
        type: integer
        format: int64
      allConceptCount:
        description: number of concepts in this domain (standard or non-standard)
        type: integer
        format: int64
      participantCount:
        description: number of participants with data in the CDR for a concept in
          this domain
        type: integer
        format: int64
  DataFiltersResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/DataFilter"
  DataFilter:
    type: object
    required:
    - dataFilterId
    - displayName
    - name
    properties:
      dataFilterId:
        description: unique id
        type: integer
        format: int64
      displayName:
        description: display name
        type: string
      name:
        description: name
        type: string
  SurveyModule:
    type: object
    required:
    - conceptId
    - name
    - description
    - questionCount
    - participantCount
    - orderNumber
    properties:
      conceptId:
        description: the concept ID for the survey module
        type: integer
        format: int64
      name:
        description: display name of the module
        type: string
      description:
        description: description of the module
        type: string
      questionCount:
        description: number of questions in the module
        type: integer
        format: int64
      participantCount:
        description: number of participants with data in the CDR for questions in
          this module
        type: integer
        format: int64
      orderNumber:
        description: survey release order number
        type: integer
        format: int32
  FeaturedWorkspace:
    type: object
    properties:
      name:
        type: string
        description: the name of the workspace
      namespace:
        type: string
        description: the namespace of the workspace
      id:
        type: string
        description: the Firecloud id of the workspace
      category:
        "$ref": "#/definitions/FeaturedWorkspaceCategory"
        description: The category that this workspace belongs to
  ErrorResponse:
    type: object
    properties:
      message:
        description: General error message for the response.
        type: string
      statusCode:
        type: integer
        description: HTTP status code
      errorClassName:
        type: string
      errorCode:
        description: Short description of the type of error
        "$ref": "#/definitions/ErrorCode"
      errorUniqueId:
        type: string
        description: Unique ID for this error response, for correlation with backend
          logs
  ErrorCode:
    type: string
    description: Short parsable error descriptions
    enum:
    - PARSE_ERROR
    - USER_DISABLED
  StatusResponse:
    type: object
    required:
    - firecloudStatus
    - notebooksStatus
    properties:
      firecloudStatus:
        type: boolean
        default: false
      notebooksStatus:
        type: boolean
        default: false
  ConfigResponse:
    type: object
    required:
    - gsuiteDomain
    properties:
      gsuiteDomain:
        x-aou-note: |
          This should be gSuiteDomain, but the Swagger-Codegen-generated server code causes the JSON
          response to have the keys "gsuiteDomain" and "gSuiteDomain". This weirdness is a workaround.
        type: string
        description: G-Suite domain containing user accounts.
      projectId:
        type: string
        description: The cloud project in which this app is running.
      firecloudURL:
        type: string
        description: The Firecloud URL to use for REST requests.
      publicApiKeyForErrorReports:
        type: string
        description: |
          Stackdriver API key for error reporting, scoped to a particular
          domain. If unset, Stackdriver error reporting should be disabled.
      enableComplianceTraining:
        type: boolean
        default: false
        description: Whether the Compliance Training access module is enabled.
      enableEraCommons:
        type: boolean
        default: false
        description: Whether the eRA Commons access module is enabled.
      enableDataUseAgreement:
        type: boolean
        default: false
        description: Whether the Data Use Agreement access module is enabled.
      enableBetaAccess:
        type: boolean
        default: false
        description: Whether the Beta Access module is enabled.
      unsafeAllowSelfBypass:
        type: boolean
        default: false
        description: Whether a user is allowed to self-bypass. Only enabled in test
          environments.
      requireInvitationKey:
        type: boolean
        default: false
        description: Whether the current environment requires an invitation key for signup.
      defaultFreeCreditsDollarLimit:
        type: number
        format: double
        description: The default dollar amount of free credits alloted to each user
      enableBillingLockout:
        type: boolean
        default: false
        description: Feature flag for billing lockout
      enableBillingUpgrade:
        type: boolean
        default: false
        description: Feature flag for billing upgrade
      requireInstitutionalVerification:
        type: boolean
        default: false
        description: 'Feature flag for verifying the institutional affiliation of
          new users by validating their contact emails.'
      enableCBAgeTypeOptions:
        type: boolean
        default: false
        description: Whether to use the new age type options in cohort builder age wizard
      enableV3DataUserCodeOfConduct:
        type: boolean
        default: false
        description: Whether to enable version 2 of the Data User Code of Conduct
      enableEventDateModifier:
        type: boolean
        default: false
        description: Whether to show the Event Date modifier in cohort builder
  FeaturedWorkspacesConfigResponse:
    type: object
    properties:
      featuredWorkspacesList:
        type: array
        items:
          "$ref": "#/definitions/FeaturedWorkspace"
  BillingProjectMembership:
    x-aou-note: Mirrors BillingProjectMembership from fireCloud.yaml
    description: ''
    required:
    - projectName
    - role
    - status
    type: object
    properties:
      projectName:
        type: string
        description: the name of the project
      role:
        type: string
        description: the role of the current user in the project
      status:
        "$ref": "#/definitions/BillingProjectStatus"
  DataDictionaryEntry:
    type: object
    properties:
      cdrVersionId:
        type: integer
        format: int64
      definedTime:
        type: integer
        format: int64
      relevantOmopTable:
        type: string
      fieldName:
        type: string
      omopCdmStandardOrCustomField:
        type: string
      description:
        type: string
      fieldType:
        type: string
      dataProvenance:
        type: string
      sourcePpiModule:
        type: string
      transformedByRegisteredTierPrivacyMethods:
        type: boolean
        default: false
  BillingProjectStatus:
    type: string
    description: 'Initialization status of a Firecloud billing project for use with
      Workbench.'
    enum:
    - none
    - pending
    - ready
    - error
  EmailVerificationStatus:
    type: string
    description: stage of email verification
    enum:
    - unverified
    - pending
    - subscribed
  EmptyResponse:
    type: object
    properties:
      additionalInfo:
        type: string
  VerifyEmailRequest:
    type: object
    properties:
      emailToVerify:
        type: string
      username:
        type: string
  Authority:
    x-aou-note: |
      Authorities are a tool used to add discrete permissions to users. We currently
      define the following authorities:
       1) REVIEW_RESEARCH_PURPOSE: This authority allows the user to review workspaces where
          the user has requested review to approve or reject.
       2) DEVELOPER: Grants access to some internal-only
          administrative endpoints, including group management and cluster
          management. Intended to be granted for devops needs, e.g. for oncall.
       3) ACCESS_CONTROL_ADMIN: This is actually basically a user admin authority, for people
          to perform actions on a user's enabled status and manual verification.
       4) FEATURED_WORKSPACE_ADMIN: Allows a user to publish workspaces
       5) COMMUNICATIONS_ADMIN: Allows a user to post a Status Alert banner
       6) SECURITY_ADMIN: Allows a user to respond to egress alerts by deleting all clusters in a project
       7) INSTITUTION_ADMIN: Allows a user to create, delete, and update Institute entities

      Note on enum names: Swagger trims any common prefix from enum values' corresponding
      Java fields by default; this has no side-effect currently as there is
      no common prefix. https://github.com/swagger-api/swagger-codegen/issues/4261
    type: string
    description: actions a user can have authority/permission to perform
    enum:
    - REVIEW_RESEARCH_PURPOSE
    - DEVELOPER
    - ACCESS_CONTROL_ADMIN
    - FEATURED_WORKSPACE_ADMIN
    - COMMUNICATIONS_ADMIN
    - SECURITY_ADMIN
    - INSTITUTION_ADMIN
    - WORKSPACES_VIEW
  PageVisit:
    type: object
    properties:
      userId:
        type: integer
        format: int64
      page:
        type: string
      firstVisit:
        type: integer
        format: int64
  WorkspaceListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Workspace"
  WorkspaceResponseListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/WorkspaceResponse"
  CreateWorkspaceRequest:
    type: object
    required:
      - billingAccountName
      - cdrVersionId
      - creator
      - dataAccessLevel
      - name
      - researchPurpose
    properties:
      billingAccountName:
        type: string
        description: >
          Name of Google Cloud Platform account responsible for billing for this
          workspace. This will be used to locate the registerd billing account and
          determine its status and type.
      cdrVersionId:
        type: string
        description: Version staring for AoU Curated Data Repository
      creator:
        type: string
        description: Username of user creating this workspace
      dataAccessLevel:
        "$ref": "#/definitions/DataAccessLevel"
        description: CDR access level for this workspace
      name:
        type: string
        description: User-specified name for the workspace. May contain non-ascii characters
      researchPurpose:
        "$ref": "#/definitions/ResearchPurpose"
        description: User-specified research purpose for the workspace
  Workspace:
    type: object
    required:
      - billingAccountName
      - cdrVersionId
      - creator
      - dataAccessLevel
      - name
      - researchPurpose
    example:
      billingAccountName: "billingAccounts/000000-AAAAAA-111111"
      billingAccountType: "FREE_TIER"
      billingStatus: "ACTIVE"
      cdrVersionId: "2"
      creationTime: 1588097211621
      creator: "user@aou-domain.org"
      dataAccessLevel: "registered"
      etag: "\"1\""
      googleBucketName: "gcs-bucket-AAAAAAAA-BBBBB"
      id: "mynewestworkspace"
      lastModifiedTime: 1588097211621
      name: "my newest workspace"
      namespace: "aou-rw-test-11112222"
      published: false
      researchPurpose:
        additionalNotes: null
        ancestry: false
        anticipatedFindings: >
          varius duis at consectetur lorem donec massa sapien faucibus et molestie ac feugiat sed
          lectus vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare massa
          eget egestas purus viverra accumsan in nisl nisi scelerisque eu ultrices vitae auctor
          pellentesque elit
        approved: null
        commercialPurpose: true
        controlSet: false
        diseaseFocusedResearch: false
        diseaseOfFocus: "Chicken Pox"
        disseminateResearchFindingList: ["PRESS_RELEASE", "PUBLICATION_COMMUNITY_BASED_BLOG", "PUBLICATION_PERSONAL_BLOG"]
        drugDevelopment: false
        educational: true
        ethics: false
        intendedStudy: >
          varius duis at consectetur lorem donec massa sapien faucibus et molestie ac feugiat sed
          lectus vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare massa
          eget egestas purus viverra accumsan in nisl nisi scelerisque eu ultrices vitae auctor
          eu augue ut lectus arcu bibendum at varius vel pharetra vel turpis nunc eget lorem dolor
        methodsDevelopment: false
        otherDisseminateResearchFindings: "varius duis at consectetur lorem donec massa sapien faucibus et molestie ac feugiat sed"
        otherPopulationDetails: "varius duis at consectetur lorem donec massa sapien faucibus et molestie ac feugiat sed"
        otherPurpose: true
        otherPurposeDetails: "no real purpose"
        populationDetails: []
        populationHealth: false
        reasonForAllOfUs: "varius duis at consectetur lorem donec massa sapien faucibus et molestie ac feugiat sed"
        researchOutcomeList: ["IMPROVE_HEALTH_EQUALITY_UBR_POPULATIONS", "DECREASE_ILLNESS_BURDEN"]
        reviewRequested: false
        scientificApproach: "varius duis at consectetur lorem donec massa sapien faucibus et molestie ac feugiat sed"
        socialBehavioral: false
    properties:
      id:
        type: string
        readOnly: true
        description: >
          Firecloud workspace identifier. Generated by simplifying the workspace's name
          or a random string if nothing is left after simplification.
      etag:
        type: string
        readOnly: true
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.'
      name:
        type: string
      namespace:
        type: string
        readOnly: true
      cdrVersionId:
        type: string
      creator:
        type: string
      billingAccountName:
        type: string
      billingAccountType:
        "$ref": "#/definitions/BillingAccountType"
        readOnly: true
      googleBucketName:
        type: string
        readOnly: true
        description: >
          GCS bucket owned by Firecloud and used to store this workspace's files. Useful in disaster
          recovery. Note: this field is currently not populated by all APIs returning a Workspace.
      dataAccessLevel:
        "$ref": "#/definitions/DataAccessLevel"
      researchPurpose:
        "$ref": "#/definitions/ResearchPurpose"
      billingStatus:
        "$ref": "#/definitions/BillingStatus"
        readOnly: true
        description: Whether a valid billing account is associated with this workspace.
      creationTime:
        type: integer
        format: int64
        description: Time workspace was created (epoch millis).
      lastModifiedTime:
        type: integer
        format: int64
        description: >
          Time of last user-visible workspace modification, to be used in sorting
          (epoch millis).
      published:
        type: boolean
        readOnly: true
        description: True if this is a published workspace.
  WorkspaceBillingUsageResponse:
    type: object
    required:
    - cost
    properties:
      cost:
        type: number
        format: double
        description: amount of free tier money spent on this workspace in USD

  UserRole:
    type: object
    required:
    - email
    - role
    properties:
      email:
        type: string
      givenName:
        type: string
      familyName:
        type: string
      role:
        "$ref": "#/definitions/WorkspaceAccessLevel"
  ShareWorkspaceRequest:
    type: object
    required:
    - items
    properties:
      workspaceEtag:
        type: string
        description: 'Associated workspace etag retrieved via reading the workspaces
          API. If provided, validates that the workspace (and its user roles) has
          not been modified since this etag was retrieved.'
      items:
        type: array
        items:
          "$ref": "#/definitions/UserRole"
  WorkspaceUserRolesResponse:
    type: object
    properties:
      workspaceEtag:
        type: string
        description: 'Updated workspace etag after the share request has been applied.'
      items:
        type: array
        items:
          "$ref": "#/definitions/UserRole"
  CopyRequest:
    type: object
    required:
    - toWorkspaceName
    - toWorkspaceNamespace
    - newName
    properties:
      toWorkspaceName:
        type: string
      toWorkspaceNamespace:
        type: string
      newName:
        type: string
  CloneWorkspaceRequest:
    type: object
    required:
    - workspace
    properties:
      includeUserRoles:
        type: boolean
        default: false
        description: 'Whether to duplicate the user roles (sharing settings) on the
          workspace. By default, duplicate follows the behavior of CreateWorkspace
          - it is shared solely with the creator as an OWNER. If true, all user roles
          are also copied onto the new workspace in addition to the caller becoming
          an OWNER.'
      workspace:
        "$ref": "#/definitions/Workspace"
        description: |
          Workspace metadata to be applied to the cloned workspace upon creation. The following workspace fields are accepted:
            - name (required)
            - namespace (required)
            - researchPurpose (required)
            - description: defaults to the cloned workspace description
            - cdrVersionId defaults to the cloned workspace CDR version

          All other fields will be ignored and are generated server-side or are copied from the cloned workspace.
  CloneWorkspaceResponse:
    type: object
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
        description: The newly created workspace duplicate.
  UpdateWorkspaceRequest:
    type: object
    required:
    - workspace
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
  WorkspaceAccessLevel:
    type: string
    description: levels of access to workspace, NO ACCESS is akin to removing a user
      from a workspace ACL.
    enum:
    - NO ACCESS
    - READER
    - WRITER
    - OWNER
  WorkspaceActiveStatus:
    type: string
    description: Status of workspace
    enum:
    - ACTIVE
    - DELETED
    - PENDING_DELETION_POST_1PPW_MIGRATION
  ResearchPurpose:
    type: object
    required:
    - diseaseFocusedResearch
    - methodsDevelopment
    - controlSet
    - ancestry
    - commercialPurpose
    - reviewRequested
    - socialBehavioral
    - populationHealth
    - ethics
    - educational
    - otherPurpose
    - scientificApproach
    - intendedStudy
    - anticipatedFindings
    - drugDevelopment
    properties:
      additionalNotes:
        type: string
      approved:
        type: boolean
        default:
      ancestry:
        type: boolean
        default: false
      anticipatedFindings:
        type: string
      commercialPurpose:
        type: boolean
        default: false
      controlSet:
        type: boolean
        default: false
      diseaseFocusedResearch:
        type: boolean
        default: false
      diseaseOfFocus:
        type: string
      drugDevelopment:
        type: boolean
        default: false
      educational:
        type: boolean
        default: false
      intendedStudy:
        type: string
      scientificApproach:
        type: string
      methodsDevelopment:
        type: boolean
        default: false
      otherPopulationDetails:
        type: string
      otherPurpose:
        type: boolean
        default: false
      otherPurposeDetails:
        type: string
      ethics:
        type: boolean
        default: false
      populationDetails:
        type: array
        items:
          "$ref": "#/definitions/SpecificPopulationEnum"
      populationHealth:
        type: boolean
        default: false
      reasonForAllOfUs:
        type: string
      reviewRequested:
        type: boolean
        default: false
      socialBehavioral:
        type: boolean
        default: false
      timeRequested:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      timeReviewed:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      disseminateResearchFindingList:
        type: array
        items:
          "$ref": "#/definitions/DisseminateResearchEnum"
      otherDisseminateResearchFindings:
        type: string
      researchOutcomeList:
        type: array
        items:
          "$ref": "#/definitions/ResearchOutcomeEnum"
  SpecificPopulationEnum:
    type: string
    description: Short parsable descriptions of specific population categories
    enum:
    - RACE_ETHNICITY
    - AGE_GROUPS
    - SEX
    - GENDER_IDENTITY
    - SEXUAL_ORIENTATION
    - GEOGRAPHY
    - DISABILITY_STATUS
    - ACCESS_TO_CARE
    - EDUCATION_LEVEL
    - INCOME_LEVEL
    - OTHER
    - RACE_ASIAN
    - RACE_AA
    - RACE_HISPANIC
    - RACE_AIAN
    - RACE_MENA
    - RACE_NHPI
    - RACE_MORE_THAN_ONE
    - AGE_CHILDREN
    - AGE_ADOLESCENTS
    - AGE_OLDER
    - AGE_OLDER_MORE_THAN_75
  DisseminateResearchEnum:
    type: string
    description: Represents how researchers plan to to disseminate thier research
      findings.
    enum:
    - PUBLICATION_PEER_REVIEWED_JOURNALS
    - PRESENATATION_SCIENTIFIC_CONFERENCES
    - PRESS_RELEASE
    - PUBLICATION_COMMUNITY_BASED_BLOG
    - PUBLICATION_PERSONAL_BLOG
    - SOCIAL_MEDIA
    - PRESENTATION_ADVISORY_GROUPS
    - OTHER
  ResearchOutcomeEnum:
    type: string
    description: Represents antipicated outcomes from the research
    enum:
    - PROMOTE_HEALTHY_LIVING
    - IMPROVE_HEALTH_EQUALITY_UBR_POPULATIONS
    - IMPROVED_RISK_ASSESMENT
    - DECREASE_ILLNESS_BURDEN
    - PRECISION_INTERVENTION
    - NONE_APPLY
  ResearchPurposeReviewRequest:
    description: Approve or reject a workspace's research purpose.
    type: object
    required:
    - approved
    properties:
      approved:
        type: boolean
        default: false
  ClusterConfig:
    properties:
      masterDiskSize:
        description: Master persistent disk size in GB.
        type: integer
        format: int32
      machineType:
        description: GCE machine type, e.g. n1-standard-2.
        type: string
  UpdateClusterConfigRequest:
    description: 'Request to update the default cluster configuration for a given
      user. Fields of the config may be omitted, in which case a default will be used.
      Set clusterConfig to null to clear it.'
    type: object
    required:
    - userEmail
    properties:
      userEmail:
        type: string
      clusterConfig:
        "$ref": "#/definitions/ClusterConfig"
  AccessModule:
    type: string
    enum:
    - DATA_USE_AGREEMENT
    - COMPLIANCE_TRAINING
    - BETA_ACCESS
    - ERA_COMMONS
    - TWO_FACTOR_AUTH
  AccessBypassRequest:
    type: object
    required:
    - isBypassed
    properties:
      moduleName:
        "$ref": "#/definitions/AccessModule"
      isBypassed:
        type: boolean
        default: false
  CohortReviewListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/CohortReview"
  WorkbenchListBillingAccountsResponse:
    type: object
    required:
    - billingAccounts
    properties:
      billingAccounts:
        type: array
        items:
          "$ref": "#/definitions/BillingAccount"
  BillingAccount:
    description: 'See https://cloud.google.com/billing/reference/rest/v1/billingAccounts#BillingAccount
      for documentation on name, displayName, and isOpen.'
    type: object
    required:
    - isFreeTier
    - name
    - displayName
    - isOpen
    properties:
      isFreeTier:
        description: Returns true if this is the billing account used for free tier
        type: boolean
      name:
        type: string
      displayName:
        type: string
      isOpen:
        type: boolean
  CohortListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Cohort"
  Cohort:
    type: object
    required:
    - name
    - criteria
    - type
    properties:
      id:
        type: integer
        format: int64
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.'
      name:
        type: string
      criteria:
        description: 'Internal representation of the cohort definition. Clients should
          not depend directly on this, but instead call client functions to issue
          a SQL query for the cohort.'
        type: string
      type:
        type: string
      description:
        type: string
      creator:
        type: string
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
  MaterializeCohortRequest:
    type: object
    properties:
      cohortName:
        description: 'The name of a cohort that is to be evaluated. Either this or
          cohortSpec should be specified'
        type: string
      cohortSpec:
        description: 'JSON representation of a cohort to be evaluated (using the same
          format used for saved cohorts). Either this or cohortName should be specified'
        type: string
      statusFilter:
        description: 'An array of status values; participants with these statuses
          will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW]
          -- everything but EXCLUDED. Only valid for use with cohortName (cohorts
          saved in the database.)'
        type: array
        items:
          "$ref": "#/definitions/CohortStatus"
      cdrVersionName:
        description: 'The name of a CDR version to use when evaluating the cohort;
          if none is specified, the CDR version currently associated with the workspace
          will be used'
        type: string
      pageToken:
        description: 'Pagination token retrieved from a previous call to materializeCohort;
          used for retrieving additional pages of results. If this is specified, all
          other fields on MaterializeCohortRequest apart from pageSize must match
          the values specified on the request that generated this token.'
        type: string
      pageSize:
        description: 'Maximum number of results to return in a response. Defaults
          to 1000.'
        type: integer
        format: int32
      fieldSet:
        description: 'Specification defining what data to return for participants
          in the cohort. Defaults to just participant IDs.'
        "$ref": "#/definitions/FieldSet"
  FieldSet:
    type: object
    description: 'A specification for fields to retrieve about participants in a cohort.
      Exactly one of the properties below should be specified.'
    properties:
      tableQuery:
        description: 'A query specifying how to pull data out of a single table. Either
          this or annotationQuery should be set (not both.)'
        "$ref": "#/definitions/TableQuery"
      annotationQuery:
        description: 'A query specifying how to retrieve annotation values created
          about participants in a cohort during cohort review. Either this or tableQuery
          should be set (not both.)'
        "$ref": "#/definitions/AnnotationQuery"
  MaterializeCohortResponse:
    type: object
    required:
    - results
    properties:
      results:
        description: 'An array of JSON dictionaries representing results to the cohort
          materialization. (In Java, this is represented as Map<String, Object>[].
          In Python clients, this is a list[object] where each object is a dictionary.
          In Typescript clients, this is an Array<any> where each object is a dictionary.)
          Keys in the dictionaries will be the columns selected in the field set provided
          in the request, and the values will be the values of those columns.'
        type: array
        items:
          type: object
      nextPageToken:
        description: 'Pagination token that can be used in a subsequent call to MaterializeCohortRequest
          to retrieve more results. If not set, there are no more results to retrieve.'
        type: string
  ConceptSetListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ConceptSet"
  ConceptSet:
    type: object
    required:
    - name
    properties:
      id:
        type: integer
        format: int64
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.'
      name:
        type: string
      domain:
        description: 'Domain corresponding to an OMOP table that can contain rows
          for the concepts in this concept set. Note that the Domain values RACE,
          GENDER, and ETHNICITY are not allowed here; it makes sense to specify concepts
          in these domains in cohort criteria, but there isn''t much value in having
          concept sets defined for them.'
        "$ref": "#/definitions/Domain"
      survey:
        description: 'Survey'
        "$ref": "#/definitions/Surveys"
      description:
        type: string
      creator:
        type: string
      creationTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      participantCount:
        type: integer
        format: int32
        description: 'Count of participants in the CDR version for the workspace containing
          this concept set that match the specified concept set'
      concepts:
        description: Concepts in the concept set, in conceptName order.
        type: array
        items:
          "$ref": "#/definitions/Concept"
  CreateConceptSetRequest:
    type: object
    required:
    - conceptSet
    properties:
      conceptSet:
        description: Concept set to be created; concepts is ignored
        "$ref": "#/definitions/ConceptSet"
      addedIds:
        type: array
        description: The IDs of concepts to be added to the concept set.
        items:
          type: integer
          format: int64
  UpdateConceptSetRequest:
    type: object
    required:
    - etag
    properties:
      etag:
        type: string
        description: 'Etag of the concept set being modified. Validates that the concept
          set has not been modified since this etag was retrieved.'
      addedIds:
        type: array
        description: 'The IDs of concepts to be added to the concept set.'
        items:
          type: integer
          format: int64
      removedIds:
        type: array
        description: 'The IDs of concepts to be removed from the concept set.'
        items:
          type: integer
          format: int64
  DataSetRequest:
    type: object
    required:
    - name
    properties:
      name:
        type: string
      description:
        type: string
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.'
      workspaceId:
        type: integer
        format: int64
      includesAllParticipants:
        type: boolean
        default: false
        description: 'Whether to include all participants or filter by cohorts'
      prePackagedConceptSet:
        "$ref": "#/definitions/PrePackagedConceptSetEnum"
      conceptSetIds:
        type: array
        description: 'The ids of all concept sets in the data set'
        items:
          type: integer
          format: int64
      cohortIds:
        type: array
        description: 'The ids of all cohorts in the data set'
        items:
          type: integer
          format: int64
      domainValuePairs:
        type: array
        description: 'All the selected domain/value pairs in the data set'
        items:
          "$ref": "#/definitions/DomainValuePair"
  PrePackagedConceptSetEnum:
    type: string
    enum:
    - NONE
    - DEMOGRAPHICS
    - SURVEY
    - BOTH
  DataSetExportRequest:
    type: object
    required:
    - dataSetRequest
    - notebookName
    - newNotebook
    properties:
      dataSetRequest:
        "$ref": "#/definitions/DataSetRequest"
      notebookName:
        type: string
      newNotebook:
        type: boolean
        default: false
      kernelType:
        "$ref": "#/definitions/KernelTypeEnum"
  MarkDataSetRequest:
    type: object
    properties:
      id:
        type: integer
        format: int64
      resourceType:
        "$ref": "#/definitions/ResourceType"
  ResourceType:
    type: string
    enum:
    - NOTEBOOK
    - COHORT
    - COHORT_SEARCH_GROUP
    - COHORT_SEARCH_ITEM
    - COHORT_REVIEW
    - CONCEPT_SET
    - DATASET
    - WORKSPACE
  KernelTypeEnum:
    type: string
    enum:
    - Python
    - R
  DomainValuePair:
    type: object
    properties:
      domain:
        description: 'Domain corresponding to an OMOP table.'
        "$ref": "#/definitions/Domain"
      value:
        type: string
  DataSet:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.'
      includesAllParticipants:
        type: boolean
        default: false
      description:
        type: string
      workspaceId:
        type: integer
        format: int64
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      conceptSets:
        type: array
        description: 'All concept sets in the data set'
        items:
          "$ref": "#/definitions/ConceptSet"
      cohorts:
        type: array
        description: 'All cohorts in the data set'
        items:
          "$ref": "#/definitions/Cohort"
      domainValuePairs:
        type: array
        description: 'All the selected domain/value pairs in the data set'
        items:
          "$ref": "#/definitions/DomainValuePair"
      prePackagedConceptSet:
        "$ref": "#/definitions/PrePackagedConceptSetEnum"
  DataSetListResponse:
    type: object
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/DataSet"
  DataSetCodeResponse:
    type: object
    properties:
      kernelType:
        "$ref": "#/definitions/KernelTypeEnum"
      code:
        type: string
        description: The code required to generate the query for the data set.
  DataSetQuery:
    type: object
    required:
    - domain
    - query
    properties:
      domain:
        description: 'Domain corresponding to an OMOP table that can contain rows
          for the concepts in this concept set. Note that the Domain values RACE,
          GENDER, and ETHNICITY are not allowed here; it makes sense to specify concepts
          in these domains in cohort criteria, but there isn''t much value in having
          concept sets defined for them.'
        "$ref": "#/definitions/Domain"
      query:
        type: string
        description: 'The parameterized BigQuery SQL string to fetch the domain-specific
          subset of the data set from the CDR.'
      namedParameters:
        type: array
        description: 'The set of named parameters to use for the SQL query.'
        items:
          "$ref": "#/definitions/NamedParameterEntry"
  NamedParameterEntry:
    type: object
    required:
    - key
    - value
    properties:
      key:
        type: string
      value:
        "$ref": "#/definitions/NamedParameterValue"
  NamedParameterValue:
    type: object
    required:
    - name
    - parameterType
    - parameterValue
    properties:
      name:
        type: string
      parameterType:
        description: 'Should be any parameter allowed by bigquery, with the exception
          of struct. The list of parameter types can be found here: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types'
        type: string
      arrayType:
        type: string
      parameterValue:
        type: object
        description: Can be any value
  DataSetPreviewRequest:
    type: object
    required:
    - domain
    properties:
      domain:
        "$ref": "#/definitions/Domain"
      includesAllParticipants:
        type: boolean
        default: false
        description: 'Whether to include all participants or filter by cohorts'
      prePackagedConceptSet:
        "$ref": "#/definitions/PrePackagedConceptSetEnum"
      conceptSetIds:
        type: array
        description: 'The ids of all concept sets in the data set'
        items:
          type: integer
          format: int64
      cohortIds:
        type: array
        description: 'The ids of all cohorts in the data set'
        items:
          type: integer
          format: int64
      values:
        type: array
        description: 'All the selected values in the data set'
        items:
          type: string
  DataSetPreviewResponse:
    type: object
    properties:
      domain:
        "$ref": "#/definitions/Domain"
      values:
        type: array
        items:
          "$ref": "#/definitions/DataSetPreviewValueList"
  DataSetPreviewValueList:
    type: object
    properties:
      value:
        type: string
        description: Value selected by user which will act as column header in preview
          table
      queryValue:
        type: array
        items:
          type: string
  DomainInfoResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/DomainInfo"
  ValueSet:
    type: object
    properties:
      domain:
        description: 'Domain corresponding to an OMOP table.'
        "$ref": "#/definitions/Domain"
      survey:
        description: 'Survey corresponding to an OMOP table.'
        "$ref": "#/definitions/Surveys"
      values:
        "$ref": "#/definitions/DomainValuesResponse"
  DomainValuesResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/DomainValue"
  DomainValue:
    type: object
    description: 'Domain values map to various column names in OMOP.'
    required:
    - value
    properties:
      value:
        description: The user facing display name for the value.
        type: string
  ReadOnlyNotebookResponse:
    type: object
    properties:
      html:
        type: string
  SurveysResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/SurveyModule"
  SearchSurveysRequest:
    type: object
    required:
    - standardConceptFilter
    properties:
      query:
        type: string
        description: 'A query string that can be used to match a subset of the name
          (case-insensitively), the entire code value (case-insensitively), or the
          concept ID. If not specified, all concepts are returned.'
      standardConceptFilter:
        description: 'STANDARD_CONCEPTS if only standard concepts should be returned,
          NON_STANDARD_CONCEPTS if only non-standard concepts should be returned;
          defaults to ALL_CONCEPTS, meaning both standard and non-standard concepts
          will be returned.'
        "$ref": "#/definitions/StandardConceptFilter"
      surveyName:
        description: The name of the survey clicked
        type: string
      maxResults:
        type: integer
        format: int32
        description: The maximum number of results returned. Defaults to 20.
      pageNumber:
        type: integer
        default: 0
        description: By default it returns the first page and then its next pages
          from that on.
  SurveyQuestions:
    type: object
    properties:
      question:
        type: string
      conceptId:
        type: integer
        format: int64
      countValue:
        description: Count of participants matching this concept in the CDR
        type: integer
        format: int64
  CreateAccountRequest:
    type: object
    properties:
      profile:
        "$ref": "#/definitions/Profile"
      invitationKey:
        type: string
      captchaVerificationToken:
        description: Token generated by captcha service once user successfully completes
          captcha
        type: string
      termsOfServiceVersion:
        type: integer
        format: int32
        description: 'Optional version of the TOS that the user has acknowledged during
          the sign-up flow. If null, the system assumes that the user has not acknowledged
          any TOS during sign-up.'
  DuplicateCohortRequest:
    type: object
    properties:
      originalCohortId:
        type: integer
        format: int64
      newName:
        type: string
  InvitationVerificationRequest:
    type: object
    required:
    - invitationKey
    properties:
      invitationKey:
        type: string
        description: Invitation key for verification
  ResendWelcomeEmailRequest:
    type: object
    required:
    - username
    - creationNonce
    properties:
      username:
        type: string
        description: Username of account to resend welcome email to
      creationNonce:
        type: string
        description: The nonce returned from the account creation API.
  UpdateContactEmailRequest:
    type: object
    required:
    - contactEmail
    - username
    - creationNonce
    properties:
      contactEmail:
        type: string
        description: Email to update contact email
      username:
        type: string
        description: Username for account.
      creationNonce:
        type: string
        description: The nonce returned from the account creation API.
  NihToken:
    required:
    - jwt
    type: object
    properties:
      jwt:
        type: string
        description: the encoded/signed JWT
  Profile:
    type: object
    required:
    - username
    - dataAccessLevel
    properties:
      userId:
        description: researchallofus userId
        type: integer
        format: int64
      username:
        description: researchallofus username
        type: string
      creationNonce:
        description: 'A value which can be used to secure API calls during the account
          creation flow, prior to account login.'
        type: string
      contactEmail:
        description: email address that can be used to contact the user
        type: string
      contactEmailFailure:
        description: Whether or not contact email could be added to verification list
        type: boolean
        default: false
      firstSignInTime:
        type: integer
        format: int64
      dataAccessLevel:
        description: what level of data access the user has
        "$ref": "#/definitions/DataAccessLevel"
      degrees:
        type: array
        items:
          "$ref": "#/definitions/Degree"
      givenName:
        description: the user's given name (e.g. Alice)
        type: string
      familyName:
        description: the user's family  name (e.g. Jones)
        type: string
      phoneNumber:
        description: the user's phone number
        type: string
      professionalUrl:
        description: the link to the user's professional url
        type: string
      currentPosition:
        description: the user's curent position (job title)
        type: string
      organization:
        description: the user's current organization
        type: string
      authorities:
        description: authorities granted to this user
        type: array
        items:
          "$ref": "#/definitions/Authority"
      pageVisits:
        description: pages user has visited
        type: array
        items:
          "$ref": "#/definitions/PageVisit"
      demographicSurveyCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user completed a demographic survey in milliseconds
          since the UNIX epoch.
      disabled:
        type: boolean
        default: false
      emailVerificationStatus:
        "$ref": "#/definitions/EmailVerificationStatus"
      aboutYou:
        type: string
      areaOfResearch:
        type: string
      institutionalAffiliations:
        description: 'A list of institutions the user is affiliated with. DEPRECATED
          in favor of the newer verifiedInstitutionalAffiliation'
        type: array
        items:
          "$ref": "#/definitions/InstitutionalAffiliation"
      verifiedInstitutionalAffiliation:
        description: 'The institution the user is verified to be affiliated with,
          based on their email. Will be required for new users when this feature is
          enabled in all environments.'
        "$ref": "#/definitions/VerifiedInstitutionalAffiliation"
      demographicSurvey:
        "$ref": "#/definitions/DemographicSurvey"
      idVerificationCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user completes identity verification.
      idVerificationBypassTime:
        type: integer
        format: int64
        description: Timestamp when the user is bypassed for completing identity verification
      twoFactorAuthCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user completed two factor authentication in
          milliseconds since the UNIX epoch.
      twoFactorAuthBypassTime:
        type: integer
        format: int64
        description: Timestamp when the user was bypassed for completing two factor
          authentication in milliseconds since the UNIX epoch.
      eraCommonsLinkedNihUsername:
        type: string
        description: The user's NIH username
      eraCommonsLinkExpireTime:
        type: integer
        description: The FireCloud-calculated expiration time
        format: int64
        default: 0
      eraCommonsCompletionTime:
        type: integer
        format: int64
        description: Timestamp when the user completed era commons linking.
      eraCommonsBypassTime:
        type: integer
        format: int64
        description: Timestamp when the user was bypassed for completing era commons
          linking.
      complianceTrainingCompletionTime:
        type: integer
        format: int64
        description: Timestamp when a user completed compliance training.
      complianceTrainingBypassTime:
        type: integer
        format: int64
        description: Timestamp when a user was bypassed for completing compliance
          training
      betaAccessBypassTime:
        type: integer
        format: int64
        description: Timestamp when a user was bypassed for beta access
      betaAccessRequestTime:
        type: integer
        format: int64
        description: Timestamp when the user requests beta access.
      emailVerificationCompletionTime:
        type: integer
        format: int64
        description: Timestamp when a user completed email verification
      emailVerificationBypassTime:
        type: integer
        format: int64
        description: Timestamp when a user was bypassed for completing email verification
      dataUseAgreementCompletionTime:
        type: integer
        format: int64
        description: Timestamp when a user completed the data use agreement.
      dataUseAgreementBypassTime:
        type: integer
        format: int64
        description: Timestamp when a user was bypassed for completing the data use
          agreement.
      dataUseAgreementSignedVersion:
        type: integer
        format: int32
        description: Version of the data use agreement that the user last signed.
      address:
        "$ref": "#/definitions/Address"
      freeTierUsage:
        type: number
        format: double
      freeTierDollarQuota:
        type: number
        format: double
      latestTermsOfServiceVersion:
        type: integer
        format: int32
        description: 'Version of the terms of service that the user last acknowledged.
          May be null if the user has never acknowledged the Terms of Service.'
      latestTermsOfServiceTime:
        type: integer
        format: int64
        description: 'Timestamp when the user last acknowledged the terms of service.
          May be null if the user has never acknowledged the Terms of Service.'
  InstitutionalAffiliation:
    type: object
    properties:
      institution:
        type: string
      role:
        type: string
      nonAcademicAffiliation:
        "$ref": "#/definitions/NonAcademicAffiliation"
        type: string
      other:
        type: string
  DemographicSurvey:
    type: object
    properties:
      race:
        type: array
        items:
          "$ref": "#/definitions/Race"
      ethnicity:
        "$ref": "#/definitions/Ethnicity"
      identifiesAsLgbtq:
        type: boolean
      lgbtqIdentity:
        type: string
      genderIdentityList:
        type: array
        items:
          "$ref": "#/definitions/GenderIdentity"
      sexAtBirth:
        type: array
        items:
          "$ref": "#/definitions/SexAtBirth"
      yearOfBirth:
        type: number
      education:
        "$ref": "#/definitions/Education"
      disability:
        type: boolean
        default: null
  Address:
    type: object
    properties:
      streetAddress1:
        type: string
      streetAddress2:
        type: string
      zipCode:
        type: string
      city:
        type: string
      state:
        type: string
      country:
        type: string
  StackTraceElement:
    description: ''
    required:
    - className
    - methodName
    - fileName
    - lineNumber
    properties:
      className:
        type: string
        description: class name
      methodName:
        type: string
        description: method name
      fileName:
        type: string
        description: source file name
      lineNumber:
        type: integer
        description: line number
  ClusterStatus:
    type: string
    enum:
    - Creating
    - Running
    - Updating
    - Error
    - Stopping
    - Stopped
    - Starting
    - Deleting
    - Deleted
    - Unknown
  Cluster:
    description: A Firecloud notebook cluster.
    required:
    - clusterName
    - clusterNamespace
    - status
    properties:
      clusterName:
        type: string
        description: The user-supplied name for the cluster
      clusterNamespace:
        type: string
        description: The Google Project used to create the cluster
      status:
        "$ref": "#/definitions/ClusterStatus"
      createdDate:
        type: string
        description: The date and time the cluster was created, in ISO-8601 format
  FileDetail:
    type: object
    required:
    - name
    - path
    - lastModifiedTime
    properties:
      name:
        type: string
        description: File Name
      path:
        type: string
        description: The path is in format of gs://bucket-name/name
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
  GetClusterResponse:
    type: object
    properties:
      cluster:
        description: The cluster associated with a given user and workspace. May be
          empty.
        "$ref": "#/definitions/Cluster"
  CreateClusterResponse:
    type: object
    required:
    - cluster
    properties:
      cluster:
        description: The cluster that was created.
        "$ref": "#/definitions/Cluster"
  ListClusterResponse:
    description: Limited set of responses for a cluster. This is a subset of options
      in a full cluster, copied from the Leonardo swagger
    required:
    - clusterName
    - googleProject
    - status
    - createdDate
    - labels
    - dateAccessed
    properties:
      clusterName:
        type: string
        description: The user-supplied name for the cluster
      googleProject:
        type: string
        description: The Google Project used to create the cluster
      status:
        "$ref": "#/definitions/ClusterStatus"
      createdDate:
        type: string
        description: The date and time the cluster was created, in ISO-8601 format
      labels:
        type: object
        description: The labels to be placed on the cluster. Of type Map[String,String]
      dateAccessed:
        type: string
        description: |
          The date and time the cluster was last accessed, in ISO-8601 format.
          Date accessed is defined as the last time the cluster was created, modified, or accessed via the proxy.
  ListClusterDeleteRequest:
    type: object
    properties:
      clustersToDelete:
        type: array
        items:
          type: string
  ClusterLocalizeRequest:
    type: object
    required:
    - notebookNames
    - playgroundMode
    properties:
      notebookNames:
        type: array
        description: 'Names of notebooks to localize. This is just the basename (no
          gs:// needed). This is interpreted as relative to the /notebooks directory
          within the provided workspace''s Google Cloud Storage bucket.'
        items:
          type: string
      playgroundMode:
        type: boolean
        default: false
        description: Set to true if playgroundMode needed
  ClusterLocalizeResponse:
    type: object
    required:
    - clusterLocalDirectory
    properties:
      clusterLocalDirectory:
        type: string
        description: 'The directory on the notebook cluster file system where the
          requested files were localized. This is the "API" directory in Jupyter terms,
          which means it is a relative path in the Jupyter user-facing file system,
          e.g. "foo/bar.ipynb".'
  UsernameTakenResponse:
    type: object
    required:
    - isTaken
    properties:
      isTaken:
        description: Boolean response to whether username is already taken.
        type: boolean
        default: false
    example:
      isTaken: false

  CheckEmailResponse:
    type: object
    properties:
      isValidMember:
        description: Whether the requested email address is a valid member of the institution.
        type: boolean

  WorkspaceResponse:
    type: object
    required:
    - workspace
    - accessLevel
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
      accessLevel:
        "$ref": "#/definitions/WorkspaceAccessLevel"

  UserListResponse:
    type: object
    required:
    - profileList
    properties:
      profileList:
        type: array
        items:
          "$ref": "#/definitions/Profile"
  UpdateUserDisabledRequest:
    type: object
    required:
    - email
    properties:
      email:
        type: string
      disabled:
        description: Set to true to disable user in auth domain, false otherwise
        type: boolean
        default: false
  AuditBigQueryResponse:
    type: object
    properties:
      numQueryIssues:
        type: integer
        format: int32
        description: 'Number of queries issues against the Curated data repository
          which are flagged as possible audit issues. See logs/alerts for details.'
  CheckClustersResponse:
    type: object
    properties:
      clusterDeletionCount:
        type: integer
        format: int32
        description: 'Number of clusters deleted during the check.'
  User:
    type: object
    properties:
      email:
        description: researchallofus email address (deprecated in favor of userName)
        type: string
      userName:
        description: Unique researchallofus username (a Google account email)
        type: string
      givenName:
        description: the user's given name (e.g. Alice)
        type: string
      familyName:
        description: the user's family  name (e.g. Jones)
        type: string
  UserResponse:
    type: object
    properties:
      users:
        description: A list of users matching the provided search query.
        type: array
        items:
          "$ref": "#/definitions/User"
      nextPageToken:
        description: 'Pagination token that can be used in a subsequent calls to retrieve
          more results. If not set, there are no more results to retrieve.'
        type: string
  WorkspaceResourcesRequest:
    type: object
    properties:
      typesToFetch:
        type: array
        items:
          "$ref": "#/definitions/ResourceType"
  WorkspaceResourceResponse:
    type: array
    items:
      "$ref": "#/definitions/WorkspaceResource"
  WorkspaceResource:
    type: object
    properties:
      workspaceId:
        type: integer
        format: int64
      workspaceNamespace:
        type: string
      workspaceFirecloudName:
        type: string
      workspaceBillingStatus:
        "$ref": "#/definitions/BillingStatus"
      permission:
        type: string
      cohort:
        "$ref": "#/definitions/Cohort"
      cohortReview:
        "$ref": "#/definitions/CohortReview"
      notebook:
        "$ref": "#/definitions/FileDetail"
      conceptSet:
        "$ref": "#/definitions/ConceptSet"
      dataSet:
        "$ref": "#/definitions/DataSet"
      modifiedTime:
        type: string
  RecentResourceRequest:
    type: object
    properties:
      notebookName:
        type: string
  RecentWorkspace:
    type: object
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
      accessLevel:
        "$ref": "#/definitions/WorkspaceAccessLevel"
  RecentWorkspaceResponse:
    type: array
    items:
      "$ref": "#/definitions/RecentWorkspace"
  NotebookLockingMetadataResponse:
    type: object
    properties:
      lastLockedBy:
        type: string
      lockExpirationTime:
        description: The time when the lock will expire, in ms from the Unix epoch
        type: integer
        format: int64
  BillingStatus:
    type: string
    description: 'Is the billing account associated with this workspace available
      to incur costs?  For a free tier project, this indicates whether a user has
      an available balance in their quota.  For a user-provided billing account, this
      corresponds to whether payment is valid and up to date.'
    enum:
    - ACTIVE
    - INACTIVE
  BillingAccountType:
    type: string
    description: 'Whether a billing project is provided by the Researcher Workbench
      as a Free Tier project subject to quota checks, or the project has a billing
      account provided by the user'
    enum:
    - FREE_TIER
    - USER_PROVIDED
  BillingProjectBufferStatus:
    type: object
    properties:
      bufferSize:
        description: 'Current size of the billing buffer, i.e. the number of projects
          ready to be claimed.'
        type: integer
        format: int64
  StatusAlert:
    type: object
    properties:
      statusAlertId:
        description: The primary key of the status alert in the database
        type: integer
        format: int64
      title:
        description: 'Title of the status alert, e.g. ''Service Incident: December
          6, 2019'''
        type: string
      message:
        description: 'The actual message of the status alert, e.g. ''AoU RW is down
          because GCP is down'''
        type: string
      link:
        description: 'A URL linking to an incident report where users can read more'
        type: string
  EgressEventRequest:
    type: object
    properties:
      eventsJsonArray:
        type: string
        description: 'A JSON string containing an array of JSON-encoded egress events.
          See the EgressEvent definition for the expected schema of each event.'
  EgressEvent:
    type: object
    properties:
      environment:
        description: The AoU environment in which the high-egress event occurred.
        type: string
        enum:
        - test
        - perf
        - staging
        - stable
        - preprod
        - prod
      time_window_duration:
        description: 'The duration of the time window during which the high-egress
          event occurred, in seconds.'
        type: integer
        format: int64
      time_window_start:
        description: Beginning of the time window, in milliseconds since Epoch.
        type: integer
        format: int64
      egress_mib:
        description: The amount of egress detected during the window, in mebibytes
          (MiB).
        type: number
        format: double
      egress_mib_threshold:
        description: The threshold value for which this egress triggered an alert,
          in mebibytes (MiB).
        type: number
        format: double
      project_name:
        description: 'The Google Cloud project name associated with the workspace,
          e.g. aou-rw-6b66533d. Always present.'
        type: string
      vm_name:
        description: The name of the Jupyter VM which generated egress, e.g. all-of-us-260-m.
        type: string
  ArrayOfLong:
    type: array
    items:
      type: integer
      format: int64
  Institution:
    type: object
    description: 'Represents an institution which has been approved to validate researchers
      who wish to use the system, including the email patterns which we use to validate
      users.'
    required:
    - shortName
    - displayName
    - organizationTypeEnum
    properties:
      shortName:
        type: string
        description: A short unique name for the Institution used as an identifier,
          such as 'VUMC'
      displayName:
        type: string
        description: A more descriptive name for the Institution, such as 'Vanderbilt
          University Medical Center'
      organizationTypeEnum:
        "$ref": "#/definitions/OrganizationType"
        description: 'The Organization Type of this institution if it is one of the
          enumerated OrganizationTypes, or OrganizationType.OTHER if it is not'
      organizationTypeOtherText:
        type: string
        description: 'The detailed Organization Type of this institution, as text,
          if its enumerated type is OTHER'
      duaTypeEnum:
        "$ref": "#/definitions/DuaType"
        description: 'Type of Data Use Agreement Institution has signed, Master or restricted to a defined set of specific researchers'
      emailAddresses:
        type: array
        description: A list of email addresses which can be validated as members of
          this Institution
        items:
          type: string
      emailDomains:
        type: array
        description: A list of email domains which can be validated as members of
          this Institution
        items:
          type: string
  PublicInstitutionDetails:
    type: object
    description: 'Represents an institution which has been approved to validate researchers
      who wish to use the system. Does not include the sensitive email patterns used
      to validate users.'
    required:
    - shortName
    - displayName
    - organizationTypeEnum
    properties:
      shortName:
        type: string
        description: A short unique name for the Institution used as an identifier,
          such as 'VUMC'
      displayName:
        type: string
        description: A more descriptive name for the Institution, such as 'Vanderbilt
          University Medical Center'
      duaTypeEnum:
        "$ref": "#/definitions/DuaType"
        description: 'Type of Data Use Agreement Institution has signed, Master or restricted to a defined set of specific researchers'
      organizationTypeEnum:
        "$ref": "#/definitions/OrganizationType"
        description: 'The Organization Type of this institution if it is one of the
          enumerated OrganizationTypes, or OrganizationType.OTHER if it is not'
  InstitutionUserInstructions:
    type: object
    description: Institution-specific instructions for users to perform after registration.
    required:
      - institutionShortName
      - instructions
    properties:
      institutionShortName:
        type: string
        description: The short unique name for the Institution used as an identifier, such as 'VUMC'.
      instructions:
        type: string
        description: Text to include in an email sent to this Institution's users after they are registered.
  GetInstitutionsResponse:
    type: object
    required:
    - institutions
    properties:
      institutions:
        type: array
        items:
          "$ref": "#/definitions/Institution"
  GetPublicInstitutionDetailsResponse:
    type: object
    required:
    - institutions
    properties:
      institutions:
        type: array
        items:
          "$ref": "#/definitions/PublicInstitutionDetails"
  OrganizationType:
    type: string
    description: A categorization of institutions, derived from CAPS requirements
    enum:
    - ACADEMIC_RESEARCH_INSTITUTION
    - INDUSTRY
    - EDUCATIONAL_INSTITUTION
    - HEALTH_CENTER_NON_PROFIT
    - OTHER

  DuaType:
    type: string
    description: 'Type of Data Use Agreement Institution has signed, Applicable to all researchers or restricted to  just few'
    enum:
      - MASTER
      - RESTRICTED

  InstitutionalRole:
    type: string
    description: 'The union of the roles researchers can have at Institutions of all
      OrganizationTypes, derived from CAPS requirements.'
    enum:
    - UNDERGRADUATE
    - TRAINEE
    - FELLOW
    - EARLY_CAREER
    - MID_CAREER
    - LATE_CAREER
    - PRE_DOCTORAL
    - POST_DOCTORAL
    - SENIOR_RESEARCHER
    - TEACHER
    - STUDENT
    - ADMIN
    - PROJECT_PERSONNEL
    - OTHER
  VerifiedInstitutionalAffiliation:
    type: object
    required:
    - institutionShortName
    - institutionalRoleEnum
    properties:
      institutionShortName:
        type: string
        description: The unique Short Name of the Institution where the user has a
          Verified Affiliation, such as 'VUMC'
      institutionDisplayName:
        type: string
        description: 'The longer, more descriptive name of the Institution where the
          user has a Verified Affiliation, such as ''Vanderbilt University Medical
          Center'''
      institutionalRoleEnum:
        "$ref": "#/definitions/InstitutionalRole"
        description: 'The user''s Institutional Role at this Institution if it is
          one of the enumerated InstitutionalRoles, or InstitutionalRole.OTHER if
          it is not'
      institutionalRoleOtherText:
        type: string
        description: 'The user''s detailed Institutional Role at this Institution,
          as text, if its enumerated type is OTHER'
  AdminFederatedWorkspaceDetailsResponse:
    description: Admin-visible metadata about a workspace.
    type: object
    properties:
      workspace:
        "$ref": "#/definitions/Workspace"
      collaborators:
        type: array
        items:
          "$ref": "#/definitions/UserRole"
      resources:
        "$ref": "#/definitions/AdminWorkspaceResources"
  AdminWorkspaceResources:
    description: 'A summary of application-level resources associated with a workspace.
      Includes data about Cohort Builder objects, analysis clusters, and cloud-storage
      contents.'
    type: object
    properties:
      workspaceObjects:
        "$ref": "#/definitions/AdminWorkspaceObjectsCounts"
      cloudStorage:
        "$ref": "#/definitions/AdminWorkspaceCloudStorageCounts"
      clusters:
        type: array
        items:
          "$ref": "#/definitions/ListClusterResponse"
  AdminWorkspaceObjectsCounts:
    type: object
    properties:
      cohortCount:
        type: integer
      conceptSetCount:
        type: integer
      datasetCount:
        type: integer
  AdminWorkspaceCloudStorageCounts:
    type: object
    properties:
      notebookFileCount:
        type: integer
      nonNotebookFileCount:
        type: integer
      storageBytesUsed:
        type: integer
        format: int64
  CloudStorageTraffic:
    type: object
    properties:
      receivedBytes:
        type: array
        items:
          "$ref": "#/definitions/TimeSeriesPoint"
  TimeSeriesPoint:
    type: object
    description: Represents a floating-point valued time series point.
    properties:
      timestamp:
        type: integer
        format: int64
        description: 'Timestamp, in milliseconds since Unix epoch, of the end point
          of the time window covered by this time series point.'
      value:
        type: number
        format: double
  DataTableSpecification:
    type: object
    properties:
      cohortName:
        description: 'The name of a cohort that data should be retrieved for. This
          and cohortSpec should not be used at the same time. If neither cohortName
          nor cohortSpec are specified, data will be extracted for everyone in the
          CDR.'
        type: string
      cohortSpec:
        description: 'JSON representation of a cohort to be evaluated (using the same
          format used for saved cohorts). This and cohortName should not be used at
          the same time. If neither cohortName nor cohortSpec are specified, data
          will be extracted for everyone in the CDR.'
        type: string
      statusFilter:
        description: 'An array of status values; participants with these statuses
          will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW]
          -- everything but EXCLUDED. Only valid for use with cohortName (cohorts
          saved in the database.)'
        type: array
        items:
          "$ref": "#/definitions/CohortStatus"
      cdrVersionName:
        description: 'The name of a CDR version to use when evaluating the cohort;
          if none is specified, the CDR version currently associated with the workspace
          will be used'
        type: string
      tableQuery:
        description: 'A query specifying how to pull data out of a single table. If
          tableQuery is not specified, just Person.person_id will be extracted.'
        "$ref": "#/definitions/TableQuery"
      maxResults:
        type: integer
        format: int64
        description: 'The maximum number of results returned in the data table. Defaults
          to no limit (all matching results are returned.)'
  CdrQuery:
    type: object
    required:
    - bigqueryProject
    - bigqueryDataset
    - columns
    properties:
      sql:
        description: 'Google SQL to use when querying the CDR. If empty, it means
          no participants can possibly match the data table specification, and an
          empty data table should be returned.'
        type: string
      columns:
        description: 'An array of names to be used for the columns being returned
          by the query. (Note that related table aliases will be returned with ''.''
          as a separator, whereas ''__'' is used in the SQL.) This will be populated
          even if sql is empty (i.e. there are no results.)'
        type: array
        items:
          type: string
      configuration:
        description: 'configuration for the BigQuery job (includes named parameters);
          you can pass this JSON dictionary in for the configuration when calling
          methods like pandas.read_gbq().'
        type: object
      bigqueryProject:
        description: name of the Google Cloud project containing the CDR dataset
        type: string
      bigqueryDataset:
        description: name of the CDR BigQuery dataset
        type: string
  CohortAnnotationsRequest:
    type: object
    required:
    - cohortName
    properties:
      cohortName:
        description: 'The name of a cohort that annotations should be retrieved for.'
        type: string
      statusFilter:
        description: 'An array of status values; participants with these statuses
          will have their annotations retrieved. Defaults to [NOT_REVIEWED, INCLUDED,
          NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED.'
        type: array
        items:
          "$ref": "#/definitions/CohortStatus"
      cdrVersionName:
        description: 'The name of a CDR version to use when retrieving annotations;
          if none is specified, the CDR version currently associated with the workspace
          will be used'
        type: string
      annotationQuery:
        description: 'Specification defining what annotations to retrieve.'
        "$ref": "#/definitions/AnnotationQuery"
  CohortAnnotationsResponse:
    type: object
    required:
    - results
    properties:
      columns:
        description: 'An array of columns for the annotations being returned.'
        type: array
        items:
          type: string
      results:
        description: 'An array of JSON dictionaries, with each dictionary representing
          the requested annotations and/or review status for a single person. (In
          Java, this is represented as Map<String, Object>[]. In Python clients, this
          is a list[object] where each object is a dictionary. In Typescript clients,
          this is an Array<any> where each object is a dictionary.) Keys in the dictionaries
          will be "person_id", "review_status", or the name of an annotation.'
        type: array
        items:
          type: object
  TableQuery:
    type: object
    description: 'A specification for retrieving data from a single table.'
    required:
    - tableName
    properties:
      tableName:
        description: 'The name of a table containing a person_id column to retrieve
          data from (e.g. person, observation); should be in the OMOP CDM 5.2 schema.'
        externalDocs:
          description: OMOP CDM 5.2 schema definition
          url: https://github.com/OHDSI/CommonDataModel/blob/v5.2.0/PostgreSQL/OMOP%20CDM%20ddl%20-%20PostgreSQL.sql
        type: string
      columns:
        description: 'An array of columns to retrieve from the table, taken from the
          table specified above. Defaults to all columns.'
        type: array
        items:
          type: string
      filters:
        description: 'Filters on the results. Only results matching the criteria specified
          in the filters will be returned. If both filters and conceptSetName are
          specified, results must match both.'
        "$ref": "#/definitions/ResultFilters"
      conceptSetName:
        description: 'A name of a concept set in the workspace used to filter results;
          results must match one of the concepts in the named concept set. If both
          filters and conceptSetName are specified, results must match both.'
        type: string
      orderBy:
        description: 'An array of columns to sort the resulting data by, taken from
          the table specified above, each one optionally enclosed in "DESCENDING()"
          for descending sort order. Default sort order is "person_id" (in ascending
          order) followed by the ID of the specified table (in ascending order.)'
        type: array
        items:
          type: string
  AnnotationQuery:
    type: object
    description: 'A specification for retrieving annotation values or review statuses
      entered for participants.'
    properties:
      columns:
        description: 'An array of names of annotations to retrieve about participants,
          or "review_status" for the cohort review status of the participant or "person_id"
          for the ID of the participant. Defaults to "person_id", "review_status",
          and the names of all defined annotations in the cohort review. This is only
          valid in combination with the use of cohortName above. Only data for participants
          in the cohort review will be returned; if no cohort review has been created,
          no results will be returned.'
        type: array
        items:
          type: string
      orderBy:
        description: 'An array of names of annotations, or "review status" or "person_id",
          each one optionally enclosed in "DESCENDING()" for descending sort order.
          Specifies the order that results should be returned. Defaults to "person_id"
          (in ascending order). Annotations referenced in orderBy must also be present
          in columns.'
        type: array
        items:
          type: string
  ResultFilters:
    type: object
    description: 'A list of filters applied to the results of a query. Only results
      matching the filter criteria should be returned. Exactly one of "allOf", "anyOf",
      and "columnFilter" should be set.'
    properties:
      if_not:
        description: 'Set to true if a result matching allOf or anyOf below should
          result in a result *not* being returned.'
        type: boolean
        default: false
      allOf:
        description: 'A list of result filters. All filters matching means a result
          should be returned (or not returned if "not" is true.)'
        type: array
        items:
          "$ref": "#/definitions/ResultFilters"
      anyOf:
        description: 'A list of column filters. Any filters matching means a result
          should be returned (or not returned if "not" is true.)'
        type: array
        items:
          "$ref": "#/definitions/ResultFilters"
      columnFilter:
        description: 'A filter on a column in the table. Only a result matching this
          filter should be returned (or not returned if "not" is true.)'
        "$ref": "#/definitions/ColumnFilter"
  ColumnFilter:
    type: object
    required:
    - columnName
    description: 'A filter applied to the results of a query, based on a column value
      in a table. Only results matching the filter will be returned. One (and only
      one) of the value columns should be populated. values and valueNumbers should
      only be used in conjunction with the "in" operator.'
    properties:
      columnName:
        description: 'The name of the column to filter on.'
        type: string
      operator:
        description: 'The operator to use when comparing values. Defaults to EQUAL.
          If the "in" operator is used, either values or valueNumbers should be populated.'
        "$ref": "#/definitions/Operator"
        externalDocs:
          description: Documentation of BigQuery SQL operators
          url: https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#comparison-operators
      value:
        description: 'A string to use in comparisons (case-sensitive).'
        type: string
      values:
        description: 'An array of strings to use in comparisons (case-sensitive);
          used with the "in" operator.'
        type: array
        items:
          type: string
      valueDate:
        description: 'A date (yyyy-MM-dd) or datetime (yyyy-MM-dd HH:mm:ss zzz) value
          to use in comparisons.'
        type: string
      valueNumber:
        description: 'A number to use in comparisons (either integer or floating point.)'
        type: number
      valueNumbers:
        description: 'An array of numbers to use in comparisons (used with the "in"
          operator)'
        type: array
        items:
          type: number
      valueNull:
        description: 'Set to true if the column value should be compared to null.'
        type: boolean
        default:
  CohortStatus:
    type: string
    description: possible values indicating whether participants are in or out of
      the cohort
    enum:
    - EXCLUDED
    - INCLUDED
    - NEEDS_FURTHER_REVIEW
    - NOT_REVIEWED
  Operator:
    type: string
    enum:
    - EQUAL
    - NOT_EQUAL
    - LESS_THAN
    - GREATER_THAN
    - LESS_THAN_OR_EQUAL_TO
    - GREATER_THAN_OR_EQUAL_TO
    - LIKE
    - IN
    - BETWEEN
  StandardConceptFilter:
    type: string
    description: filter on whether standard, non-standard, or all concepts should
      be returned\
    enum:
    - ALL_CONCEPTS
    - STANDARD_CONCEPTS
    - NON_STANDARD_CONCEPTS
    - STANDARD_OR_CODE_ID_MATCH
  MatchType:
    type: string
    description: match column type on concept search
    enum:
    - CONCEPT_CODE
    - CONCEPT_ID
    - CONCEPT_NAME
  Concept:
    description: A concept describing a type of entity (e.g. measurement, observation,
      procedure.)
    type: object
    required:
    - conceptId
    - conceptName
    - domainId
    - vocabularyId
    - conceptCode
    - conceptClassId
    - standardConcept
    - countValue
    - prevalence
    properties:
      conceptId:
        description: ID of the concept
        type: integer
        format: int64
      conceptName:
        description: Name of the concept
        type: string
      domainId:
        description: Domain ID of the concept (e.g. Observation)
        type: string
      vocabularyId:
        description: Vocabulary ID of the concept (e.g. SNOMED)
        type: string
      conceptCode:
        description: Code for the concept in its vocabulary (e.g. G8107)
        type: string
      conceptClassId:
        description: Class of the concept (e.g. Ingredient)
        type: string
      standardConcept:
        description: True if this is a standard concept, false otherwise
        type: boolean
        default: false
      countValue:
        description: Count of participants matching this concept in the CDR
        type: integer
        format: int64
      prevalence:
        description: Prevalence among participants in the CDR (a percentage of the
          total)
        type: number
        format: float
      conceptSynonyms:
        description: concept synonym names
        type: array
        items:
          type: string
  ConceptSynonym:
    type: object
    description: concept synonym
    required:
    - conceptId
    - conceptSynonymName
    - languageConceptId
    properties:
      conceptId:
        description: concept id
        type: integer
        format: int64
      conceptSynonymName:
        description: concept synonym name
        type: string
      languageConceptId:
        description: language concept id
        type: integer
        format: int64
  SearchConceptsRequest:
    type: object
    required:
    - standardConceptFilter
    - domain
    properties:
      query:
        type: string
        description: 'A query string that can be used to match a subset of the name
          (case-insensitively), the entire code value (case-insensitively), or the
          concept ID. If not specified, all concepts are returned.'
      standardConceptFilter:
        description: 'STANDARD_CONCEPTS if only standard concepts should be returned,
          NON_STANDARD_CONCEPTS if only non-standard concepts should be returned;
          defaults to ALL_CONCEPTS, meaning both standard and non-standard concepts
          will be returned.'
        "$ref": "#/definitions/StandardConceptFilter"
      domain:
        description: 'The domain for the concepts returned (e.g. OBSERVATION, DRUG).
          Note that this may map to multiple domain ID values in OMOP.'
        "$ref": "#/definitions/Domain"
      surveyName:
        description: The name of the survey clicked
        type: string
      maxResults:
        type: integer
        format: int32
        description: The maximum number of results returned. Defaults to 20.
      pageNumber:
        type: integer
        default: 0
        description: By default it returns the first page and then its next pages
          from that on.
  DomainCountsRequest:
    type: object
    required:
    - standardConceptFilter
    properties:
      query:
        type: string
        description: 'A query string that can be used to match a subset of the name
          (case-insensitively), the entire code value (case-insensitively), or the
          concept ID. If not specified, all concepts are returned.'
      standardConceptFilter:
        description: 'STANDARD_CONCEPTS if only standard concepts should be returned,
          NON_STANDARD_CONCEPTS if only non-standard concepts should be returned;
          defaults to ALL_CONCEPTS, meaning both standard and non-standard concepts
          will be returned.'
        "$ref": "#/definitions/StandardConceptFilter"
      surveyName:
        description: The name of the survey clicked
        type: string
  ConceptListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Concept"
  DomainCountsListResponse:
    type: object
    required:
    - domainCounts
    properties:
      domainCounts:
        type: array
        items:
          "$ref": "#/definitions/DomainCount"
  DomainCount:
    type: object
    required:
    - domain
    - name
    - conceptCount
    properties:
      domain:
        description: the domain ID
        "$ref": "#/definitions/Domain"
      name:
        description: display name of the domain
        type: string
      conceptCount:
        description: number of concepts matching the search query in this domain
        type: integer
        format: int64
  CreateReviewRequest:
    type: object
    required:
    - size
    properties:
      size:
        description: A sample size to review
        type: integer
  CohortReview:
    type: object
    required:
    - cohortReviewId
    - cohortId
    - cdrVersionId
    - creationTime
    - matchedParticipantCount
    - reviewStatus
    - cohortDefinition
    - cohortName
    properties:
      cohortReviewId:
        type: integer
        format: int64
      cohortId:
        type: integer
        format: int64
      cdrVersionId:
        type: integer
        format: int64
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.'
      creationTime:
        type: string
      lastModifiedTime:
        type: integer
        format: int64
        description: Milliseconds since the UNIX epoch.
      cohortDefinition:
        type: string
      cohortName:
        type: string
      description:
        type: string
      matchedParticipantCount:
        type: integer
        format: int64
      reviewSize:
        type: integer
        format: int64
      reviewedCount:
        type: integer
        format: int64
      queryResultSize:
        type: integer
        format: int64
      reviewStatus:
        "$ref": "#/definitions/ReviewStatus"
      participantCohortStatuses:
        type: array
        items:
          "$ref": "#/definitions/ParticipantCohortStatus"
      page:
        type: integer
      pageSize:
        type: integer
      sortOrder:
        type: string
      sortColumn:
        type: string
  PageFilterRequest:
    required:
    - page
    - pageSize
    - sortOrder
    properties:
      page:
        type: integer
        description: specific page (default is 0)
      pageSize:
        type: integer
        description: page size of results (default is 25)
      sortOrder:
        "$ref": "#/definitions/SortOrder"
      sortColumn:
        "$ref": "#/definitions/FilterColumns"
        description: Column upon which to sort (default is 'participantId')
      filters:
        "$ref": "#/definitions/FilterList"
      domain:
        "$ref": "#/definitions/DomainType"
        description: Different domain types in omop
  FilterColumns:
    type: string
    enum:
    - PARTICIPANTID
    - STATUS
    - GENDER
    - BIRTHDATE
    - RACE
    - ETHNICITY
    - DECEASED
    - START_DATETIME
    - STANDARD_CODE
    - STANDARD_VOCABULARY
    - STANDARD_NAME
    - STANDARD_CONCEPT_ID
    - SOURCE_CODE
    - SOURCE_VOCABULARY
    - SOURCE_NAME
    - SOURCE_CONCEPT_ID
    - DOMAIN
    - AGE_AT_EVENT
    - NUM_MENTIONS
    - FIRST_MENTION
    - LAST_MENTION
    - VISIT_TYPE
    - ROUTE
    - DOSE
    - STRENGTH
    - VALUE_AS_NUMBER
    - UNIT
    - REF_RANGE
    - SURVEY_NAME
    - QUESTION
    - ANSWER
  DomainType:
    type: string
    enum:
    - CONDITION
    - PROCEDURE
    - OBSERVATION
    - DRUG
    - ALL_EVENTS
    - DEVICE
    - VISIT
    - MEASUREMENT
    - PHYSICAL_MEASUREMENT
    - LAB
    - VITAL
    - SURVEY
    - PERSON
  SortOrder:
    type: string
    enum:
    - asc
    - desc
  FilterList:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Filter"
  Filter:
    required:
    - property
    - operator
    - values
    properties:
      property:
        "$ref": "#/definitions/FilterColumns"
      operator:
        "$ref": "#/definitions/Operator"
      values:
        type: array
        items:
          type: string
  ParticipantCohortStatus:
    type: object
    required:
    - participantId
    - status
    properties:
      participantId:
        type: integer
        format: int64
      status:
        "$ref": "#/definitions/CohortStatus"
      genderConceptId:
        type: integer
        format: int64
      gender:
        type: string
      birthDate:
        type: string
      raceConceptId:
        type: integer
        format: int64
      race:
        type: string
      ethnicityConceptId:
        type: integer
        format: int64
      ethnicity:
        type: string
      deceased:
        type: boolean
        default: false
  ModifyCohortStatusRequest:
    type: object
    required:
    - status
    properties:
      status:
        "$ref": "#/definitions/CohortStatus"
  ParticipantChartDataListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ParticipantChartData"
  VocabularyListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Vocabulary"
  Vocabulary:
    type: object
    required:
    - type
    - domain
    - vocabulary
    properties:
      type:
        type: string
        description: Source or Standard
      domain:
        type: string
        description: OMOP domain
      vocabulary:
        type: string
        description: Vocabulary
  CohortChartDataListResponse:
    type: object
    required:
    - count
    - items
    properties:
      count:
        type: integer
        format: int64
        description: total count for cohort.
      items:
        type: array
        items:
          "$ref": "#/definitions/CohortChartData"
  ParticipantCohortAnnotation:
    type: object
    required:
    - cohortReviewId
    - participantId
    - cohortAnnotationDefinitionId
    properties:
      annotationId:
        type: integer
        format: int64
        description: participant annotation id.
      cohortAnnotationDefinitionId:
        type: integer
        format: int64
        description: annotation definition id.
      cohortReviewId:
        type: integer
        format: int64
        description: the cohort reivew id.
      participantId:
        type: integer
        format: int64
        description: the participant id.
      annotationValueString:
        type: string
        description: The Value of the annotation if the AnnotationType is STRING
      annotationValueEnum:
        type: string
        description: The option chosen for the annotation if the AnnotationType is
          ENUM
      annotationValueDate:
        type: string
        description: The Value of the annotation if the AnnotationType is DATE
      annotationValueBoolean:
        type: boolean
        default:
        description: The Value of the annotation if the AnnotationType is BOOLEAN
      annotationValueInteger:
        type: integer
        description: The Value of the annotation if the AnnotationType is INTEGER
  ParticipantCohortAnnotationListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ParticipantCohortAnnotation"
  ParticipantDataListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/ParticipantData"
  ParticipantDataCountResponse:
    type: object
    required:
    - count
    properties:
      count:
        type: integer
        format: int64
        description: the total count of items.
  ModifyParticipantCohortAnnotationRequest:
    type: object
    properties:
      annotationValueString:
        type: string
        description: The Value of the annotation if the AnnotationType is STRING
      annotationValueEnum:
        type: string
        description: The option chosen for the annotation if the AnnotationType is
          ENUM
      annotationValueDate:
        type: string
        description: The Value of the annotation if the AnnotationType is DATE
      annotationValueBoolean:
        type: boolean
        default:
        description: The Value of the annotation if the AnnotationType is BOOLEAN
      annotationValueInteger:
        type: integer
        description: The Value of the annotation if the AnnotationType is INTEGER
  ReviewStatus:
    type: string
    description: possible values indicating whether review has been created
    enum:
    - NONE
    - CREATED
  CohortChartData:
    type: object
    required:
    - name
    - conceptId
    - count
    properties:
      name:
        type: string
        description: the name of this data
      conceptId:
        type: integer
        format: int64
        description: the source concept id for this data
      count:
        type: integer
        format: int64
        description: the count for this data
  ParticipantChartData:
    type: object
    required:
    - standardName
    - standardVocabulary
    - startDate
    - ageAtEvent
    - rank
    properties:
      standardName:
        type: string
        description: the standard name
      standardVocabulary:
        type: string
        description: the standard vocabulary
      startDate:
        type: string
        description: the date of the event
      ageAtEvent:
        type: integer
        description: The age at event for the participant
      rank:
        type: integer
        description: the rank of the data
  ParticipantData:
    required:
    - itemDate
    properties:
      itemDate:
        type: string
        description: The date of the event
      domain:
        type: string
        description: the domain of this data.
      standardName:
        type: string
        description: The standard name of this data
      ageAtEvent:
        type: integer
        description: The age at event for the participant
      standardConceptId:
        type: integer
        format: int64
        description: The standard concept id
      sourceConceptId:
        type: integer
        format: int64
        description: The source concept id
      sourceVocabulary:
        type: string
        description: The source vocabulary type of this data
      standardVocabulary:
        type: string
        description: The standard vocabulary of this data
      sourceName:
        type: string
        description: The source name of this data
      sourceCode:
        type: string
        description: The source code of this data
      standardCode:
        type: string
        description: The standard code of this data
      value:
        type: string
        description: The source value of this data
      visitType:
        type: string
        description: The visit type of this data
      numMentions:
        type: string
        description: The number of mentions of this data
      firstMention:
        type: string
        description: The date of first mention of this data
      lastMention:
        type: string
        description: The date of last mention of this data
      unit:
        type: string
        description: The unit of this data
      dose:
        type: string
        description: The quantity of this data
      strength:
        type: string
        description: The strength of this data
      route:
        type: string
        description: The route of this data
      refRange:
        type: string
        description: The reference range of this data
      survey:
        type: string
        description: The name of this survey
      question:
        type: string
        description: a question in this survey
      answer:
        type: string
        description: an answer in this survey
  AnnotationType:
    type: string
    description: possible values representing the type of annotation.
    enum:
    - STRING
    - ENUM
    - DATE
    - BOOLEAN
    - INTEGER
  CohortAnnotationDefinition:
    type: object
    required:
    - cohortId
    - columnName
    - annotationType
    properties:
      cohortAnnotationDefinitionId:
        type: integer
        format: int64
        description: the annotation definition id.
      etag:
        type: string
        description: 'Entity tag for optimistic concurrency control. To be set during
          a read-modify-write to ensure that the client has not attempted to modify
          a changed resource.'
      cohortId:
        type: integer
        format: int64
        description: the cohort id.
      columnName:
        type: string
        description: the name of this annotation.
      annotationType:
        "$ref": "#/definitions/AnnotationType"
      enumValues:
        type: array
        items:
          type: string
  CohortAnnotationDefinitionListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/CohortAnnotationDefinition"
  AgeTypeCountListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/AgeTypeCount"
  AgeTypeCount:
    type: object
    required:
    - ageType
    - age
    - count
    properties:
      ageType:
        description: type of age
        type: string
      age:
        description: age
        type: integer
      count:
        description: count
        type: integer
        format: int64
  CriteriaListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/Criteria"
  CriteriaMenuOptionsListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/CriteriaMenuOption"
  Criteria:
    type: object
    required:
    - id
    - parentId
    - type
    - name
    - group
    - selectable
    - hasAttributes
    properties:
      id:
        description: 'Primary identifier which is unique within a CDR version. Value
          may not be stable across different CDR versions.'
        type: integer
        format: int64
      parentId:
        description: 'The parent id of the criteria. 0 if this is the root node of
          a criteria tree.'
        type: integer
        format: int64
      type:
        description: 'The tree type of this criteria, see TreeType. This will need
          to change to CriteriaType with the new implementation(change type below
          to ref CriteriaType)'
        type: string
      subtype:
        description: 'The subtype of this criteria, see TreeSubType. This will need
          to change to CriteriaSubType with the new implementation(change type below
          to ref CriteriaSubType)'
        type: string
      code:
        description: |
          Code that identifies this criteria. In some vocabularies such as ICD9 and ICD10, this code captures the tree hierarchy, e.g. '001.002.003'. Multiple criteria may exist for the same code within a CDR version if a given concept has multiple entries at different locations in the criteria tree (this is common in SNOMED).
          Criteria codes should generally be stable across CDR versions.
        type: string
      name:
        description: description of criteria
        type: string
      count:
        description: 'Estimated number of participants in a particular CDR version
          which have a least one event matching this criteria.'
        type: integer
        format: int64
      group:
        description: specifies if child or parent
        type: boolean
        default: false
      selectable:
        description: 'Whether or not a client can specify this criteria in a search
          request. Selecting a group implies selecting all criteria contained within
          that group.'
        type: boolean
        default: false
      conceptId:
        description: |
          The OMOP concept id associated with this criteria. May be null if this criteria does not match an OMOP concept, e.g. for intermediate nodes (groups) in the criteria tree. Concept ids are ids associated with a specific vocabulary item in the concept table and allow you to search for that code in its domain table. This may be a source or standard concept ID, depending on the tree for the criteria.
          Similar to a code, multiple criteria may reference the same concept ID due to multiple occurrences of a concept in the criteria tree. In other cases a criteria may share the concept ID of its parent, e.g. in the PPI tree a question and child answer share a concept id.
          Concept IDs should generally be stable across CDR versions.
        type: integer
        format: int64
      domainId:
        description: "# TODO: Remove this field. Deprecated. Clue to determine which
          OMOP tables to search, but these only exist for leaves in the tree. Parents
          don't have domain ids and concept id will be used in the case that a parent
          is selectable.\n"
        type: string
      hasAttributes:
        description: 'Whether this criteria has associated attributes which can be
          filtered by value during a search, for example a blood pressure measurement
          criteria might have an associated measurement value attribute.'
        type: boolean
        default: false
      path:
        description: 'A "." delimited path of all parent criteria IDs. Does not include
          the id for this criteria; root criteria nodes have a null path.'
        type: string
      value:
        description: 'A helper property to fully describe PPI/AGE data. Age holds
          the value of the age and for PPI it holds value as number or value as concept
          id.'
        type: string
      hasHierarchy:
        description: Whether criteria is linked to a tree.
        type: boolean
        default: false
      hasAncestorData:
        description: Whether criteria needs lookup in the criteria_ancestor table.
        type: boolean
        default: false
      isStandard:
        description: Reveals if this criteria is standard or source.
        type: boolean
        default: false
  CriteriaMenuOption:
    type: object
    required:
    - domain
    - types
    properties:
      domain:
        description: The criteria domains that are searchable in Cohort Builder
        type: string
      types:
        type: array
        items:
          "$ref": "#/definitions/CriteriaMenuSubOption"
  CriteriaMenuSubOption:
    type: object
    required:
    - type
    - standardFlags
    properties:
      type:
        description: The criteria types that are searchable in Cohort Builder
        type: string
      standardFlags:
        type: array
        items:
          "$ref": "#/definitions/StandardFlag"
  StandardFlag:
    type: object
    required:
    - standard
    properties:
      standard:
        description: flag that determines standard or source
        type: boolean
        default: false
  CriteriaAttributeListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/CriteriaAttribute"
  CriteriaAttribute:
    type: object
    required:
    - id
    - valueAsConceptId
    - conceptName
    - type
    - estCount
    properties:
      id:
        description: id of the criteria
        type: integer
        format: int64
      valueAsConceptId:
        description: categorical concept id
        type: integer
        format: int64
      conceptName:
        description: name of concept
        type: string
      type:
        description: numerical or categorical
        type: string
      estCount:
        description: possible count
        type: string
  SearchRequest:
    description: 'The SearchRequest describes the state of the Cohort Builder at any
      given moment. It contains two keys, `include` and `exclude`, each of which specifies
      an array of SearchGroups which are `AND`ed together, and which collectively
      specify which subjects to include or exclude from the cohort.'
    type: object
    required:
    - includes
    - excludes
    - dataFilters
    properties:
      includes:
        type: array
        items:
          "$ref": "#/definitions/SearchGroup"
      excludes:
        type: array
        items:
          "$ref": "#/definitions/SearchGroup"
      dataFilters:
        type: array
        items:
          type: string
    example:
      typical:
        include:
        - - type: ICD9
            searchParameters:
            - value: Foo
              domainId: Bar
            - value: C
          - type: ICD9
            searchParameters:
            - value: Baz
        - - type: ICD10
            searchParameters:
            - value: Baz
              domainId: Bar
            modifiers: []
        exclude: []
      minimum:
        include:
        - - type: A Crit Type
            searchParameters:
            - value: A value
  SearchGroup:
    description: 'A SearchGroup is a container for groups of criteria which are `OR`ed
      together.'
    type: object
    required:
    - temporal
    - items
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      name:
        description: optional custom name set by user
        type: string
      temporal:
        description: indicates if this search group relates to time
        type: boolean
        default: false
      mention:
        description: first, last or any mention(used in temporal realtionships)
        "$ref": "#/definitions/TemporalMention"
      time:
        description: time frame between temporal items
        "$ref": "#/definitions/TemporalTime"
      timeValue:
        description: time value between temporal items
        type: integer
        format: int64
      timeFrame:
        description: time increments(Day, Month or Year)
        type: string
      items:
        type: array
        items:
          "$ref": "#/definitions/SearchGroupItem"
  SearchGroupItem:
    description: 'A SearchGroupItem is the "line item" of the Cohort Builder.  It
      specifies a set of criteria of a given kind, possibly alongside a set of modifiers,
      the results of which are `OR`ed together with the other criteria in the group.'
    type: object
    required:
    - type
    - searchParameters
    - modifiers
    properties:
      id:
        description: Unique within the cohort definition
        type: string
      name:
        description: optional custom name set by user
        type: string
      type:
        description: type of criteria
        type: string
      temporalGroup:
        description: temporal group that this item belongs to
        type: integer
      searchParameters:
        description: values that help search for subjects
        type: array
        items:
          "$ref": "#/definitions/SearchParameter"
      modifiers:
        description: |
          Predicates to apply to the search parameters. Aggregate modifiers (i.e. NUM_OF_OCCURRENCES) are applied independently to each SearchParameter and furthermore, are applied independently to any group elements within those SearchParameters.
          Consider the following example query scenario.
          Example criteria tree: - parent
            - child1
            - child2

          Curated dataset contains 1 participant with 1 event each of concepts child1 and child2. Search request is made on "parent", with a modifier of {type: NUM_OF_OCCURRENCES, operands: [2]}.
          This does not match - the participant would need to have at least 2 events of type child1 and/or of child2 and/or of parent (in the event that "parent" corresponds to a real concept in the data).
          Additionally, aggregate modifiers are applied secondarily to other modifiers. For example, combining the AGE_AT_EVENT with NUM_OF_OCCURRENCES - first we filter down all events by the age predicate, then we count occurrences.
        type: array
        items:
          "$ref": "#/definitions/Modifier"
    example:
      type: ICD9
      searchParameters:
      - value: E9293
        domainId: Condition
        conceptId:
      - value: E979-E979.9
        domainId:
        conceptId:
      modifiers:
      - name: age_at_event
        operator: GTE >=
        operands:
        - Arg1
        - Arg2
  SearchParameter:
    type: object
    required:
    - parameterId
    - name
    - domain
    - type
    - group
    - ancestorData
    - standard
    - attributes
    properties:
      parameterId:
        description: Unique within the cohort definition
        type: string
      name:
        description: The name of the generating Criterion
        type: string
      value:
        description: The Criteria code (or name if querying for Deceased)
        type: string
      domain:
        description: The omop domain that this criteria belongs to
        type: string
      type:
        description: The type of the generating Criterion
        type: string
      subtype:
        description: The subtype of the generating Criterion
        type: string
      group:
        description: Specifies if the generating Criterion is a leaf or node in its
          Criteria tree
        type: boolean
        default: false
      ancestorData:
        description: flag that determines if concept ids need to be looked up in the
          ancestor table
        type: boolean
        default: false
      standard:
        description: flag that determines standard or source
        type: boolean
        default: false
      conceptId:
        description: The concept id that maps to concept table, if any.
        type: integer
        format: int64
      attributes:
        description: |
          Attributes are extra inputs provided by users through the UX. Currently used by Demographics(Age), Measurements(Body Height, Weight.. etc) and Physical Measurements(Blood Pressure, Body Weight.. etc). Measurements and Physical Measurements have overlap in many areas such as body weight, but the difference is standard(measurements) and source(physical measurements).

           Example demo age search parameter:
           {
             "type": "DEMO",
             "searchParameters": [
               {
                 "type": "DEMO",
                 "subtype": "AGE",
                 "group": false,
                 "attributes": [{"name": "Age", "operator": "BETWEEN", "operands": [23, 31]}]
               }
             ],
             "modifiers": []
           }

           Example physical measurement blood pressure(Hypotensive (Systolic <= 90 / Diastolic <= 60))
           {
             "type": "PM",
             "searchParameters": [
               {
                 "type": "PM",
                 "subtype": "BP",
                 "group": false,
                 "attributes": [
                   {
                     "conceptId": 903118,
                     "name": "Systolic",
                     "operands": ["90"],
                     "operator":"LESS_THAN_OR_EQUAL_TO"
                   },
                   {
                     "conceptId": 903115,
                     "name": "Diastolic",
                     "operands": ["60"],
                      "operator": "LESS_THAN_OR_EQUAL_TO"
                    }
                  ]
                }
              ],
              "modifiers": []
            }
        type: array
        items:
          "$ref": "#/definitions/Attribute"
    example:
      leafExample:
        value: E9293
        subtype: AGE
        domainId: Condition
      parentExample:
        value: E979-E979.9
        subtype: BP_EHR
        domainId:
  Attribute:
    type: object
    required:
    - name
    - operands
    properties:
      name:
        description: the name of the attribute
        "$ref": "#/definitions/AttrName"
      operator:
        "$ref": "#/definitions/Operator"
      operands:
        type: array
        items:
          type: string
      conceptId:
        description: The concept id that maps to concept table.
        type: integer
        format: int64
    example:
      singleValued:
        operator: GTE
        operands:
        - '20'
      multiValued:
        operator: BETWEEN
        operands:
        - '18'
        - '35'
  Modifier:
    type: object
    required:
    - name
    - operator
    - operands
    properties:
      name:
        description: name/type of modifier
        "$ref": "#/definitions/ModifierType"
      operator:
        description: Machine name of the operator
        "$ref": "#/definitions/Operator"
      operands:
        type: array
        items:
          type: string
    example:
      singleValued:
        name: AGE_AT_EVENT
        operator: GREATER_THAN_OR_EQUAL_TO
        operands:
        - '20'
  ModifierType:
    type: string
    description: possible types of modifiers
    enum:
    - AGE_AT_EVENT
    - NUM_OF_OCCURRENCES
    - EVENT_DATE
    - ENCOUNTERS
  CriteriaType:
    type: string
    description: possible criteria types
    enum:
    - AGE
    - ATC
    - BRAND
    - CPT4
    - DECEASED
    - ETHNICITY
    - GENDER
    - HCPCS
    - ICD10CM
    - ICD10PCS
    - ICD9CM
    - ICD9Proc
    - LOINC
    - PPI
    - RACE
    - RXNORM
    - SEX
    - SNOMED
    - VISIT
  CriteriaSubType:
    type: string
    description: possible criteria types
    enum:
    - ANSWER
    - BMI
    - BP
    - CLIN
    - HC
    - HEIGHT
    - HR
    - HR-DETAIL
    - HR-IRR
    - HR-NOIRR
    - LAB
    - PREG
    - QUESTION
    - SURVEY
    - WC
    - WEIGHT
    - WHEEL
  TemporalMention:
    type: string
    description: Mentions refer to occurrences of entry date per person
    enum:
    - ANY_MENTION
    - FIRST_MENTION
    - LAST_MENTION
  TemporalTime:
    type: string
    description: time refers to the amount of time in reference to temporal mentions
    enum:
    - DURING_SAME_ENCOUNTER_AS
    - X_DAYS_BEFORE
    - X_DAYS_AFTER
    - WITHIN_X_DAYS_OF
  AttrName:
    type: string
    description: Name that descibes the type of attribute
    enum:
    - ANY
    - NUM
    - CAT
    - AGE
    - AGE_AT_CONSENT
    - AGE_AT_CDR
  AgeType:
    type: string
    description: Different age types
    enum:
    - AGE
    - AGE_AT_CONSENT
    - AGE_AT_CDR
  GenderOrSexType:
    type: string
    description: represents gender or sex at birth
    enum:
    - GENDER
    - SEX_AT_BIRTH
  DemoChartInfoListResponse:
    type: object
    required:
    - items
    properties:
      items:
        type: array
        items:
          "$ref": "#/definitions/DemoChartInfo"
  DemoChartInfo:
    type: object
    required:
    - name
    - race
    - ageRange
    - count
    properties:
      name:
        description: gender or sex at birth of subject
        type: string
      race:
        description: race of subject
        type: string
      ageRange:
        description: age range of subject
        type: string
      count:
        description: number of subjects
        type: integer
        format: int64
  ParticipantDemographics:
    type: object
    required:
    - genderList
    - raceList
    - ethnicityList
    properties:
      genderList:
        type: array
        items:
          "$ref": "#/definitions/ConceptIdName"
      raceList:
        type: array
        items:
          "$ref": "#/definitions/ConceptIdName"
      ethnicityList:
        type: array
        items:
          "$ref": "#/definitions/ConceptIdName"
  ConceptIdName:
    type: object
    required:
    - conceptId
    - conceptName
    properties:
      conceptId:
        type: integer
        format: int64
      conceptName:
        type: string
