openapi: 3.0.1
info:
  title: AllOfUs Workbench API
  description: |
    The API for the AllOfUs workbench.

    Throughout, we use integer/int64 in preference to string/date-time because Swagger's
    date formatting is inconsistent between server and client. Time values are stored as
    milliseconds since the UNIX epoch.

    Note: all requests tagged as "cron" must have the header X-Appengine-Cron:
    true, which app engine itself only sets when invoking as a cronjob.
    See https://cloud.google.com/appengine/docs/standard/java/config/cron#securing_urls_for_cron
    and o.p.w.interceptors.CronInterceptor which implements the header check.
  termsOfService: http://www.pmi-ops.org/terms_of_service.html
  contact:
    name: developer_help@pmi-ops.org
  license:
    name: BSD
  version: 0.1.0
servers:
  - url: https://api.pmi-ops.org/
security:
  - aou_oauth: []
paths:
  /v1/status:
    get:
      tags:
        - status
      description: Returns the status of the various services and integrations
      operationId: getStatus
      responses:
        200:
          description: A map of system name to status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /v1/config:
    get:
      tags:
        - config
      description: Returns some server configuration data.
      operationId: getConfig
      responses:
        200:
          description: Configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
  /v1/featured-workspace-config:
    get:
      tags:
        - featured-workspaces-config
      description: Returns the featured workspaces config
      operationId: getFeaturedWorkspacesConfig
      responses:
        200:
          description: List of featured workspaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturedWorkspacesConfigResponse'
  /v1/cdrVersions:
    get:
      tags:
        - cdrVersions
      description: Returns all curated data repository (CDR) versions that the user
        has access to
      operationId: getCdrVersions
      responses:
        200:
          description: A list of CDR versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdrVersionListResponse'
  /v1/status-alert:
    get:
      tags:
        - status-alert
      description: Returns status alert information if any exists.
      operationId: getStatusAlert
      responses:
        200:
          description: A status alert information object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusAlert'
    post:
      tags:
        - status-alert
      description: Pushes new status alert information to all users
      operationId: postStatusAlert
      requestBody:
        description: the new status alert to use
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StatusAlert'
        required: false
      responses:
        200:
          description: A status alert information object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusAlert'
      x-codegen-request-body-name: statusAlert
  /v1/profile:
    get:
      tags:
        - profile
      description: Returns the user's profile information
      operationId: getMe
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    delete:
      tags:
        - profile
      description: Deletes the user's profile and gsuite account, does not clean up
        in firecloud.
      operationId: deleteProfile
      responses:
        204:
          description: Request Received.
          content: {}
    patch:
      tags:
        - profile
      description: Updates a users profile
      operationId: updateProfile
      requestBody:
        description: the new profile to use
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: false
      responses:
        204:
          description: Request received.
          content: {}
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: updatedProfile
  /v1/is-username-taken:
    get:
      tags:
        - profile
      description: Checks to see if the given username is not available.
      operationId: isUsernameTaken
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: The answer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameTakenResponse'
  /v1/update-contact-email:
    post:
      tags:
        - profile
      description: Only for accounts that have not logged in yet, update contact email.
      operationId: updateContactEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactEmailRequest'
        required: false
      responses:
        200:
          description: Contact Email Updated
          content: {}
        400:
          description: Invalid contact email address
          content: {}
        403:
          description: Unable to process this request
          content: {}
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: updateContactEmailRequest
  /v1/resend-welcome-email:
    post:
      tags:
        - profile
      description: Resend welcome email
      operationId: resendWelcomeEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendWelcomeEmailRequest'
        required: false
      responses:
        200:
          description: Welcome Email sent.
          content: {}
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: resendWelcomeEmail
  /v1/invitation-key-verification:
    post:
      tags:
        - profile
      description: Verifies invitation key.
      operationId: invitationKeyVerification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationVerificationRequest'
        required: false
      responses:
        200:
          description: Invitation Key verified.
          content: {}
        400:
          description: Error occurred while verifying Invitation Key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: invitationVerificationRequest
  /v1/google-account:
    post:
      tags:
        - profile
      description: Creates an account in the researchallofus.org domain.
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: false
      responses:
        200:
          description: Account created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Error occurred while creating account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: createAccountRequest
  /v1/beta-access:
    post:
      tags:
        - profile
      description: Request betaAccess.
      operationId: requestBetaAccess
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /v1/update-nih-token:
    post:
      tags:
        - profile
      description: Updates a users NIH token
      operationId: updateNihToken
      requestBody:
        description: the token retrieved from NIH
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NihToken'
        required: false
      responses:
        200:
          description: The user's updated profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: token
  /v1/page-visits:
    post:
      tags:
        - profile
      description: Updates a users page visits
      operationId: updatePageVisits
      requestBody:
        description: the users pageVisits
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageVisit'
        required: false
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: pageVisit
  /v1/account/submit-data-use-agreement:
    post:
      tags:
        - profile
      description: Submits consent to the data use agreement for researchers.
      operationId: submitDataUseAgreement
      parameters:
        - name: dataUseAgreementSignedVersion
          in: query
          description: Version \# of the Data Use Agreement that was signed.
          required: true
          schema:
            type: integer
        - name: initials
          in: query
          description: Initials of the user on the form.
          required: true
          schema:
            type: string
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /v1/account/sync-training-status:
    post:
      tags:
        - profile
      summary: Sync compliance training status
      description: Retrieves moodleId(either from DB or call from Moodle API) and
        gets Training status on the basis of that
      operationId: syncComplianceTrainingStatus
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/account/sync-era-commons-status:
    post:
      tags:
        - profile
      summary: Sync eRA Commons status
      description: Retrieves and stores the current user's NIH / eRA Commons linkage
        status, fetched via the FireCloud API.
      operationId: syncEraCommonsStatus
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/account/sync-two-factor-auth-status:
    post:
      tags:
        - profile
      summary: Sync two factor auth status
      description: Syncs a user's 2FA status from google
      operationId: syncTwoFactorAuthStatus
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth-domain/{groupName}:
    post:
      tags:
        - authDomain
      description: This endpoint will create the registered auth domain.
      operationId: createAuthDomain
      parameters:
        - name: groupName
          in: path
          description: groupName
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully created group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/auth-domain/users:
    post:
      tags:
        - authDomain
      summary: enable/disable a user to an auth domain if you have ID verification
        authority
      operationId: updateUserDisabledStatus
      requestBody:
        description: Request containing user email to update and a disabled status
          to update the user to.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDisabledRequest'
        required: false
      responses:
        204:
          description: Successfully Updated User In Group
          content: {}
        403:
          description: You must be an admin of this group in order to enable/disable
            members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: FireCloud Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: request
  /v1/user/{term}:
    get:
      tags:
        - user
      description: Returns user information matching search terms
      operationId: user
      parameters:
        - name: term
          in: path
          description: String to find in user's name or email address. Search is a case-insensitive
            substring match.
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            Pagination token retrieved from a previous call to user; used for retrieving additional pages of results.
          schema:
            type: string
        - name: pageSize
          in: query
          description: |
            Maximum number of results to return in a response. Defaults to 10.
          schema:
            type: integer
        - name: sortOrder
          in: query
          description: Sort order, either 'asc' or 'desc'. Defaults to 'asc' on the
            user's email.
          schema:
            type: string
      responses:
        200:
          description: The user information matching supplied search terms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /v1/user/billingAccounts:
    get:
      tags:
        - user
      description: Returns a list of billing accounts the caller can set a workspace's
        billing account to
      operationId: listBillingAccounts
      responses:
        200:
          description: List of billing accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkbenchListBillingAccountsResponse'
  /v1/admin/security/clusters/{billingProjectId}/delete-clusters:
    post:
      tags:
        - cluster
      summary: Delete specified (or all if no specified list) clusters in a project
      description: |
        An admin gated endpoint that deletes given clusters in a given billing project.
      operationId: deleteClustersInProject
      parameters:
        - name: billingProjectId
          in: path
          description: The unique identifier of the Google Billing Project containing
            the clusters
          required: true
          schema:
            type: string
      requestBody:
        description: A list of names of clusters to delete. To delete all clusters,
          use an empty object, without providing a list property at all (e.g., {})
          An empty list will delete no clusters.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ListClusterDeleteRequest'
        required: true
      responses:
        200:
          description: Clusters deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListClusterResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: clustersToDelete
  /v1/clusters/{workspaceNamespace}:
    get:
      tags:
        - cluster
      summary: Get the user's workspace cluster.
      description: |
        Returns the current user's cluster, if any, which has been created for the given workspace.
      operationId: getCluster
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: The cluster for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        404:
          description: No cluster exists for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - cluster
      summary: Create a workspace cluster.
      description: |
        Creates a new cluster for the current user in the given billing project. If a cluster already exists for the user in this billing project, a 409 conflict error is returned (even if the cluster is still initializing or is not in a ready state).
        TODO(RW-3697): Custom cluster creation params should be added as a body param here.
      operationId: createCluster
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns the cluster that was created for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
        409:
          description: A cluster for this user and workspace already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    delete:
      tags:
        - cluster
      summary: Delete a workspace cluster.
      description: |
        TODO(RW-3695): updateCluster should be added as a PATCH endpoint here.
      operationId: deleteCluster
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        404:
          description: No cluster exists for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/clusters/{workspaceNamespace}/localize:
    post:
      tags:
        - cluster
      summary: Localize files to the user's cluster.
      description: |
        Localizes files to the cluster for the current user and given workspace. As a side-effect, JSON workspace environment files will also be localized to the cluster.
      operationId: localize
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      requestBody:
        description: Localization request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterLocalizeRequest'
        required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterLocalizeResponse'
        404:
          description: Cluster or Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /v1/billingProjects:
    get:
      tags:
        - profile
      summary: List billing projects for a user
      operationId: getBillingProjects
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BillingProjectMembership'
        404:
          description: User Not Found
          content: {}
        500:
          description: Internal Server Error
          content: {}
  /v1/workspaces:
    get:
      tags:
        - workspaces
      description: Returns all workspaces that a user has access to
      operationId: getWorkspaces
      responses:
        200:
          description: A list of workspace definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponseListResponse'
    post:
      tags:
        - workspaces
      description: Creates a workspace
      operationId: createWorkspace
      requestBody:
        description: workspace definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: false
      responses:
        200:
          description: The workspace that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
      x-codegen-request-body-name: workspace
  /v1/workspaces/published:
    get:
      tags:
        - workspaces
      description: Returns a list of published workspaces
      operationId: getPublishedWorkspaces
      responses:
        200:
          description: A list of workspace definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponseListResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}:
    get:
      tags:
        - workspaces
      description: Returns the workspace definition with the specified ID and namespace
      operationId: getWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: A workspace response containing workspace and access level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponse'
    delete:
      tags:
        - workspaces
      description: Deletes the workspace definition with the specified ID and namespace
      operationId: deleteWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        202:
          description: Workspace deletion request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
        - workspaces
      description: |
        Modifies the workspace definition with the specified ID and namespace; fields that are omitted will not be modified
      operationId: updateWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: workspace definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
        required: false
      responses:
        200:
          description: The updated workspace definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
      x-codegen-request-body-name: workspace
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/billing-usage:
    get:
      tags:
        - workspaces
      description: Gets the free tier billing spend for a specified workspace
      operationId: getBillingUsage
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: The billing usage for a workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceBillingUsageResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/share:
    post:
      tags:
        - workspaces
      description: |
        Shares a workspace with the given users and permissions. Note that the entire ACL must be provided to this method (including all existing users and roles), not just the additional roles desired. Clients should first fetch existing ACLs via the getFirecloudWorkspaceUserRoles method, make any changes desired, then pass the final list to this method.
      operationId: shareWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: users to share the workspace with
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareWorkspaceRequest'
        required: false
      responses:
        200:
          description: Successful share response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUserRolesResponse'
      x-codegen-request-body-name: body
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/duplicate:
    post:
      tags:
        - workspaces
      description: |
        Duplicate an existing workspace, with given modifications to workspace metadata. Caller will own the newly duplicated workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be duplicated:
          - the associated Firecloud workspace
          - cohorts, along with reviews and annotations
          - notebooks located in the default notebook directory for this workspace
      operationId: cloneWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneWorkspaceRequest'
        required: false
      responses:
        200:
          description: Successful duplicate response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneWorkspaceResponse'
      x-codegen-request-body-name: body
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/userRoles:
    get:
      tags:
        - workspaces
      description: Returns the user roles for all collaborators on a workspace
      operationId: getFirecloudWorkspaceUserRoles
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of workspace collaborators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUserRolesResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/publish:
    post:
      tags:
        - workspaces
      description: |
        Makes a workspace public to all AoU registered users. Requires FEATURED_WORKSPACE_ADMIN authority.
      operationId: publishWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/unpublish:
    post:
      tags:
        - workspaces
      description: |
        Makes a workspace public to all AoU registered users. Requires FEATURED_WORKSPACE_ADMIN authority.
      operationId: unpublishWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/admin/workspaces/review:
    get:
      tags:
        - workspaces
      description: |
        Returns workspaces that need research purpose review. Requires REVIEW_RESEARCH_PURPOSE authority.
      operationId: getWorkspacesForReview
      responses:
        200:
          description: A list of workspaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceListResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebook-list:
    get:
      tags:
        - workspaces
      summary: Get details of Python files from google Bucket directory notebook
      description: |
        Returns list of name and path of python files from google bucket, directory notebook.
      operationId: getNoteBookList
      parameters:
        - name: workspaceNamespace
          in: path
          description: workspaceNamespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: workspaceId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDetail'
        404:
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/unsafe-self-bypass-access-requirement:
    post:
      tags:
        - profile
      description: |
        Updates the given user to bypass the request access requirement
      operationId: unsafeSelfBypassAccessRequirement
      requestBody:
        description: |
          Whether the requirement should be bypassed or not. Defaults to true, so an empty body  will cause the requirement to be bypassed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessBypassRequest'
        required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: No module exists with name submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Self bypass is disallowed in this environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: bypassed
  /v1/admin/users/{userId}/bypass-access-requirement:
    post:
      tags:
        - profile
      description: |
        Updates the given user to bypass the request access requirement, e.g. "eraCommons", or "twoFactorAuth"
      operationId: bypassAccessRequirement
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: |
          Whether the requirement should be bypassed or not. Defaults to true, so an empty body  will cause the requirement to be bypassed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessBypassRequest'
        required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: No module exists with name submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: bypassed
  /v1/admin/users/{userId}:
    get:
      tags:
        - profile
      description: |
        Returns a user's profile for review.  Requires ACCESS_CONTROL_ADMIN authority.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/users/list:
    get:
      tags:
        - profile
      description: |
        Returns a list of profiles for users to be reviewed. Requires ACCESS_CONTROL_ADMIN authority.
      operationId: getAllUsers
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/review:
    post:
      tags:
        - workspaces
      description: Sets a research purpose review result.
      operationId: reviewWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: result of the research purpose review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResearchPurposeReviewRequest'
        required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      x-codegen-request-body-name: review
  /v1/admin/workspaces/{workspaceNamespace}:
    get:
      tags:
        - workspaceAdmin
      description: |
        Given a workspace namespace (Google Cloud Platform  Project ID), returns workspace details. Requires the WORKSPACES_VIEW authority.
      operationId: getFederatedWorkspaceDetails
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: Federated details about the workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminFederatedWorkspaceDetailsResponse'
        404:
          description: Workspace not found for namespace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/workspaces/{workspaceNamespace}/cloudStorageTraffic:
    get:
      tags:
        - workspaceAdmin
      description: |
        Returns a time series of cloud storage traffic for the given project. Requires the WORKSPACES_VIEW authority.
      operationId: getCloudStorageTraffic
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudStorageTraffic'
  /v1/admin/clusters/updateConfig:
    post:
      tags:
        - cluster
      summary: Sets default cluster creation request parameters for a user.
      description: |
        Clusters are created with a default machine configuration. Setting this override changes that configuration for subsequent cluster creations. This change only takes effect after a new cluster creation, e.g. due to standard cluster expiration (~2w) or via manual reset. Requires DEVELOPER authority.
      operationId: updateClusterConfig
      requestBody:
        description: Cluster config update request.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateClusterConfigRequest'
        required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      x-codegen-request-body-name: body
  /v1/admin/sumo/egressEvent:
    post:
      tags:
        - sumoLogic
      description: |
        Registers an egress event detected by SumoLogic with the Workbench. Forwards the event to Stackdriver for recording and potential alerting.
      operationId: logEgressEvent
      parameters:
        - name: X-API-KEY
          in: header
          description: |
            Semi-secret API key sent by SumoLogic. This will be checked against the set of valid API keys stored in the per-environment credentials bucket.
          required: true
          schema:
            type: string
      requestBody:
        description: Egress event request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EgressEventRequest'
        required: false
      responses:
        204:
          description: The egress event was successfully handled.
          content: {}
      x-codegen-request-body-name: request
  /v1/cron/auditBigQuery:
    get:
      tags:
        - offlineAudit
        - cron
      description: |
        Endpoint meant to be called offline to trigger BigQuery auditing; may be slow to execute. Only executable via App Engine cronjob.
      operationId: auditBigQuery
      responses:
        200:
          description: Audit was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditBigQueryResponse'
    x-aou-note: |
      Note: all requests tagged as "cron" must have the header X-Appengine-Cron:
      true, which app engine itself only sets when invoking as a cronjob.
      See https://cloud.google.com/appengine/docs/standard/java/config/cron#securing_urls_for_cron
      and o.p.w.interceptors.CronInterceptor which implements the header check.
  /v1/cron/checkClusters:
    get:
      tags:
        - offlineCluster
        - cron
      description: |
        Endpoint meant to be called offline to trigger cluster checks and cleanup. Enforces upgrades for older cluster deployments. May be slow to execute. Only executable via App Engine cronjob.
      operationId: checkClusters
      responses:
        200:
          description: Clusters were checked and handled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckClustersResponse'
  /v1/cron/bulkSyncComplianceTrainingStatus:
    get:
      tags:
        - offlineUser
        - cron
      description: sync moodle badge/training status for all users.
      operationId: bulkSyncComplianceTrainingStatus
      responses:
        204:
          description: The user table is updated with training status.
          content: {}
        404:
          description: User not found while retrieving  badge.
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/bulkSyncEraCommonsStatus:
    get:
      tags:
        - offlineUser
        - cron
      description: sync eRA Commons linkage status for all users.
      operationId: bulkSyncEraCommonsStatus
      responses:
        204:
          description: All users' eRA Commons statuses were updated.
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/bulkSyncTwoFactorAuthStatus:
    get:
      tags:
        - offlineUser
        - cron
      description: sync 2FA status for all users
      operationId: bulkSyncTwoFactorAuthStatus
      responses:
        204:
          description: All users' 2FA statuses were updated.
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/bulkAuditProjectAccess:
    get:
      tags:
        - offlineUser
        - cron
      description: Audits project access for all users
      operationId: bulkAuditProjectAccess
      responses:
        204:
          description: All users' project access were audited.
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/exportToRdr:
    get:
      tags:
        - offlineRdrExport
        - cron
      description: Send workbench data to RDR
      operationId: exportData
      responses:
        204:
          description: All modified/created workspaces and users were exported
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/bufferBillingProjects:
    get:
      tags:
        - offlineBilling
        - cron
      description: If the AoU Billing Project buffer is not full, refill with one
        or more billing projects.
      operationId: bufferBillingProjects
      responses:
        204:
          description: No Error
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/syncBillingProjectStatus:
    get:
      tags:
        - offlineBilling
        - cron
      description: Fetch a BillingProjectBufferEntry that is in the CREATING state
        and check its status on Firecloud
      operationId: syncBillingProjectStatus
      responses:
        204:
          description: No Error
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/cleanBillingBuffer:
    get:
      tags:
        - offlineBilling
        - cron
      description: Find BillingProjectBufferEntries that have failed during the creation
        or assignment step and set their statuses to ERROR
      operationId: cleanBillingBuffer
      responses:
        204:
          description: No Error
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/checkFreeTierBillingUsage:
    get:
      tags:
        - offlineBilling
        - cron
      description: Find and alert users that have exceeded their free tier billing
        usage
      operationId: checkFreeTierBillingUsage
      responses:
        204:
          description: No Error
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/billingProjectGarbageCollection:
    get:
      tags:
        - offlineBilling
        - cron
      description: Trigger a bulk transfer of ownership of billing projects associated
        with deleted workspaces
      operationId: billingProjectGarbageCollection
      responses:
        204:
          description: Billing Project Garbage Collection was successful.
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/monitoring/billingProjectBufferStatus:
    get:
      tags:
        - monitoring
      description: Return statistics about the billing buffer.
      operationId: getBillingProjectBufferStatus
      responses:
        200:
          description: No Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingProjectBufferStatus'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/monitoring/updateGaugeMetrics:
    get:
      tags:
        - offlineMonitoring
        - cron
      description: Trigger recording of all gauge metrics
      operationId: updateGaugeMetrics
      responses:
        204:
          description: No content
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/rename:
    post:
      tags:
        - workspaces
      description: Renames specified notebook
      operationId: renameNotebook
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: new name for notebook
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                newName:
                  type: string
        required: true
      responses:
        200:
          description: Successful rename
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
      x-codegen-request-body-name: NotebookRename
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/duplicate:
    post:
      tags:
        - workspaces
      description: Duplicates specified notebook
      operationId: cloneNotebook
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: notebookName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful duplicate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/copy:
    post:
      tags:
        - workspaces
      description: Copy specified notebook in path to specified workspace in body
      operationId: copyNotebook
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: notebookName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CopyRequest'
        required: true
      responses:
        200:
          description: Successful copy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
      x-codegen-request-body-name: copyNotebookRequest
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/delete:
    delete:
      tags:
        - workspaces
      description: Deletes specified notebook
      operationId: deleteNotebook
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: notebookName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/readonly:
    post:
      tags:
        - workspaces
      description: Get the HTML for a read only view of the notebook
      operationId: readOnlyNotebook
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: notebookName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: HTML Read Only version of the notebook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyNotebookResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/lockingMetadata:
    get:
      tags:
        - workspaces
      summary: Get the locking metadata for a notebook
      description: |
        Get the locking metadata for a notebook, if available.  If the notebook is not locked
        (e.g. at first creation) this may be empty.  Additionally, the caller of this endpoint
        may not have the appropriate permissions to determine who is locking this notebook.
        When this is the case, the lastLockedBy field is set to UNKNOWN.
      operationId: getNotebookLockingMetadata
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: notebookName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The locking metadata fields for the notebook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotebookLockingMetadataResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohort-reviews:
    get:
      tags:
        - cohortReview
      description: Returns all cohort reviews in a workspace
      operationId: getCohortReviewsInWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of cohort definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReviewListResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohort-reviews/{cohortReviewId}:
    delete:
      tags:
        - cohortReview
      description: Deletes the cohort review with the specified ID
      operationId: deleteCohortReview
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: specifies which cohort review
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: ACCEPTED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
        - cohortReview
      description: |
        Modifies the cohort review with the specified ID; fields that are omitted will not be modified
      operationId: updateCohortReview
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: specifies which cohort review
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: cohort review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortReview'
        required: false
      responses:
        200:
          description: The updated cohort review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReview'
      x-codegen-request-body-name: cohortReview
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts:
    get:
      tags:
        - cohorts
      description: Returns all cohort definitions in a workspace
      operationId: getCohortsInWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of cohort definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortListResponse'
    post:
      tags:
        - cohorts
      description: Creates a cohort definition in a workspace.
      operationId: createCohort
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: cohort definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cohort'
        required: false
      responses:
        200:
          description: The cohort definition that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          description: Bad Request. Cohort name already exists
          content: {}
      x-codegen-request-body-name: cohort
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/duplicate:
    post:
      tags:
        - cohorts
      description: Creates a duplicate of the cohort specified by cohortId
      operationId: duplicateCohort
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: Duplicate Cohort Request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DuplicateCohortRequest'
        required: false
      responses:
        200:
          description: The cohort definition that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          description: Bad Request. Cohort name already exists
          content: {}
      x-codegen-request-body-name: DuplicateCohortRequest
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}:
    get:
      tags:
        - cohorts
      description: Returns the cohort definition with the specified ID
      operationId: getCohort
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A cohort definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
    delete:
      tags:
        - cohorts
      description: Deletes the cohort definition with the specified ID
      operationId: deleteCohort
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: ACCEPTED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
        - cohorts
      description: |
        Modifies the cohort definition with the specified ID; fields that are omitted will not be modified
      operationId: updateCohort
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: cohort definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cohort'
        required: false
      responses:
        200:
          description: The updated cohort definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
      x-codegen-request-body-name: cohort
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/materializeCohort:
    post:
      tags:
        - cohorts
      description: |
        Materializes a cohort for a given CDR version to specified output.
      operationId: materializeCohort
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: cohort materialization request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterializeCohortRequest'
        required: false
      responses:
        200:
          description: The results of materializing the cohort
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterializeCohortResponse'
      x-codegen-request-body-name: request
  /v1/workspaces/user-recent-resources:
    get:
      tags:
        - userMetrics
      description: Returns the resources accessed by user order by access time desc
      operationId: getUserRecentResources
      responses:
        200:
          description: A list of resources order by last access time desc order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentResourceResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-resources/update:
    post:
      tags:
        - userMetrics
      description: Add/update user recent resource
      operationId: updateRecentResource
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: request object for updating recent resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecentResourceRequest'
        required: true
      responses:
        200:
          description: Successfully added/updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentResource'
      x-aou-note: |
        this response type is currently only ever used by Notebooks because other
        resources are stored in our db, and therefore cache ops are
        done for them in the backend
      x-codegen-request-body-name: RecentResourceRequest
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-resources/delete:
    delete:
      tags:
        - userMetrics
      description: Deletes entry from recent resource
      operationId: deleteRecentResource
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: request object for updating recent resource
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RecentResourceRequest'
        required: true
      responses:
        200:
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
      x-codegen-request-body-name: RecentResourceRequest
  /v1/workspaces/user-recent-workspaces:
    get:
      tags:
        - workspaces
      description: Returns the workspaces edited by the user in descending order of
        update time
      operationId: getUserRecentWorkspaces
      responses:
        200:
          description: A list of workspaces order by last-updated time in descending
            order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentWorkspaceResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/user-recent-workspaces/update:
    post:
      tags:
        - workspaces
      description: Add/update user recent workspaces
      operationId: updateRecentWorkspaces
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully added/updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentWorkspaceResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets:
    get:
      tags:
        - conceptSets
      description: Returns all concept sets in a workspace
      operationId: getConceptSetsInWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of concept sets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSetListResponse'
    post:
      tags:
        - conceptSets
      description: Creates a concept set in a workspace.
      operationId: createConceptSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: create concept set request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConceptSetRequest'
        required: false
      responses:
        200:
          description: The concept set that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/survey-concept-sets/{surveyName}:
    get:
      tags:
        - conceptSets
      description: Returns all survey concept sets in a workspace
      operationId: getSurveyConceptSetsInWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: surveyName
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of concept sets of type surveys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSetListResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}:
    get:
      tags:
        - conceptSets
      description: Returns the concept set definition with the specified ID
      operationId: getConceptSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: conceptSetId
          in: path
          description: Concept set ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A concept set definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
    delete:
      tags:
        - conceptSets
      description: Deletes the concept set with the specified ID
      operationId: deleteConceptSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: conceptSetId
          in: path
          description: Concept set ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: ACCEPTED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
        - conceptSets
      description: |
        Modifies the name or description of the concept set with the specified ID; fields that are omitted will not be modified
      operationId: updateConceptSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: conceptSetId
          in: path
          description: Concept set ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: concept set definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConceptSet'
        required: false
      responses:
        200:
          description: The updated concept set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      x-codegen-request-body-name: conceptSet
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/concepts:
    post:
      tags:
        - conceptSets
      description: |
        Adds or removes concepts from the concept set.
      operationId: updateConceptSetConcepts
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: conceptSetId
          in: path
          description: Concept set ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: update concept set request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConceptSetRequest'
        required: false
      responses:
        200:
          description: The updated concept set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/concept-sets/{conceptSetId}/copy:
    post:
      tags:
        - conceptSets
      description: Copy specified concept set in path to specified workspace in body
      operationId: copyConceptSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: conceptSetId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CopyRequest'
        required: true
      responses:
        200:
          description: Successful copy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      x-codegen-request-body-name: copyConceptSetRequest
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/domainInfo:
    get:
      tags:
        - concepts
      description: |
        Returns information on the domains of data in the workspace's CDR version along with participant and concept counts
      operationId: getDomainInfo
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: information on the domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainInfoResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/surveyInfo:
    get:
      tags:
        - concepts
      description: |
        Returns survey information in the workspace's CDR version along with participant and question count
      operationId: getSurveyInfo
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: information about the surveys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveysResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/searchSurveys:
    post:
      tags:
        - concepts
      description: |
        Searches for surveys in criteria table by synonyms or survey name
      operationId: searchSurveys
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: survey search request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SearchSurveysRequest'
        required: false
      responses:
        200:
          description: collection of survey questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SurveyQuestions'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/generateCode/{kernelType}:
    post:
      tags:
        - dataSet
      description: |
        Given a Data Set, return the SQL query built from it.
      operationId: generateCode
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: kernelType
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataSetRequest'
        required: true
      responses:
        200:
          description: |
            A SQL query for each domain in the Data Set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetCodeResponse'
      x-codegen-request-body-name: dataSet
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/data-sets:
    get:
      tags:
        - dataSet
      description: Returns all data sets in a workspace
      operationId: getDataSetsInWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of data sets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetListResponse'
    post:
      tags:
        - dataSet
      description: |
        Creates Data Set
      operationId: createDataSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataSetRequest'
        required: true
      responses:
        200:
          description: Data set has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        400:
          description: Invalid data set request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Data Set with the same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: dataSetRequest
  /v1/{workspaceNamespace}/{workspaceId}/data-sets/{dataSetId}:
    get:
      tags:
        - dataSet
      operationId: getDataSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: dataSetId
          in: path
          description: Data set ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The data set with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
    delete:
      tags:
        - dataSet
      description: Deletes the data set with the specified ID
      operationId: deleteDataSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: dataSetId
          in: path
          description: Data set ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: ACCEPTED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
        - dataSet
      operationId: updateDataSet
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: dataSetId
          in: path
          description: Data set ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: data set definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetRequest'
        required: false
      responses:
        200:
          description: The updated data set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        409:
          description: Data Set with the same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: dataSet
  /v1/{workspaceNamespace}/{workspaceId}/data-sets/dataSetByResourceId:
    post:
      tags:
        - dataSet
      operationId: getDataSetByResourceId
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResourceType'
        required: true
      responses:
        200:
          description: A list of data sets containg cohort/concept Id passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetListResponse'
      x-codegen-request-body-name: resourceType
  /v1/cdrVersionId/{cdrVersionId}/domain/{domain}/domainValue/{domainValue}/dataDictionaryEntry:
    get:
      tags:
        - dataSet
      operationId: getDataDictionaryEntry
      parameters:
        - name: cdrVersionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: domain
          in: path
          required: true
          schema:
            type: string
        - name: domainValue
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Detailed definition of a given domain value for the specified
            CDR Version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataDictionaryEntry'
  /v1/{workspaceNamespace}/{workspaceId}/data-set/markDirty:
    post:
      tags:
        - dataSet
      operationId: markDirty
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MarkDataSetRequest'
        required: false
      responses:
        200:
          description: Mark all dataset with cohort/concept id as dirty
          content:
            application/json:
              schema:
                type: boolean
                default: false
      x-codegen-request-body-name: markDataSetRequest
  /v1/{workspaceNamespace}/{workspaceId}/data-set/exportToNotebook:
    post:
      tags:
        - dataSet
      description: |
        Exports a data set query to a notebook
      operationId: exportToNotebook
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataSetExportRequest'
        required: true
      responses:
        200:
          description: Data set has been exported correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: Invalid data set request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: dataSetExportRequest
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/preview:
    post:
      tags:
        - dataSet
      description: |
        Preview data set
      operationId: previewDataSetByDomain
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataSetPreviewRequest'
        required: true
      responses:
        200:
          description: |
            A SQL query for each domain in the Data Set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetPreviewResponse'
      x-codegen-request-body-name: dataSetPreviewRequest
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/data-set/domainValues/{domain}:
    get:
      tags:
        - dataSet
      description: |
        Returns all column names/values for a given domain.
      operationId: getValuesFromDomain
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: domain
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: the values/column names in the domain.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainValuesResponse'
  /v1/cloudTask/exportResearcherData:
    post:
      tags:
        - cloudTaskRdrExport
        - cloudTask
      description: |
        Task handler which handle request from cloud task queue rdrQueueTest to send Researcher data
      operationId: exportResearcherData
      requestBody:
        description: The IDs of Users to be exported to Rdr.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrayOfLong'
        required: true
      responses:
        200:
          description: |
            A SQL query for each domain in the Data Set
          content: {}
      x-codegen-request-body-name: researcherIds
    x-aou-note: |
      Endpoints for task in cloud task queue
      Note: all requests tagged as "cloudTask" must have the header X-AppEngine-QueueName:
      to the queue name, which app engine itself only sets (and overrides internally) when invoking
      cloud task. See
      https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_app_engine_task_request_headers
      and o.p.w.interceptors.CloudTaskInterceptor which implements the header check.

      Using body parameter ref ArrayOfLong instead of defining array of type long here because of
      bug in swagger version 2.3.0 https://github.com/swagger-api/swagger-codegen/issues/6745.2.2.3
  /v1/cloudTask/exportWorkspaceData:
    post:
      tags:
        - cloudTaskRdrExport
        - cloudTask
      description: |
        Task handler which handle request from cloud task queue rdrQueueTest to send Workspace data
      operationId: exportWorkspaceData
      requestBody:
        description: The IDs of workspace to be exported to Rdr.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ArrayOfLong'
        required: true
      responses:
        200:
          description: |
            A SQL query for each domain in the Data Set
          content: {}
      x-codegen-request-body-name: researchIds
  /v1/institutions:
    get:
      tags:
        - institution
      description: Gets the list of all Institutions. Requires INSTITUTION_ADMIN authority.
      operationId: getInstitutions
      responses:
        200:
          description: A list of all Institutions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInstitutionsResponse'
    post:
      tags:
        - institution
      description: Create an Institution. Requires INSTITUTION_ADMIN authority.
      operationId: createInstitution
      requestBody:
        description: The Institution to be created by this operation.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      responses:
        200:
          description: The Institution created by this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      x-codegen-request-body-name: institutionToCreate
    x-aou-note: Institution endpoints, for Verified Institutional Affiliation
  /v1/institutions/publicDetails:
    get:
      tags:
        - institution
      description: Gets the public details for the list of all Institutions.
      operationId: getPublicInstitutionDetails
      responses:
        200:
          description: A list of all Institutions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicInstitutionDetailsResponse'
  /v1/institutions/{shortName}:
    get:
      tags:
        - institution
      description: Gets the Institution corresponding to the shortName ID. Requires
        INSTITUTION_ADMIN authority.
      operationId: getInstitution
      parameters:
        - name: shortName
          in: path
          description: A short unique name for the Institution used as an identifier,
            such as "VUMC"
          required: true
          schema:
            type: string
      responses:
        200:
          description: The Institution corresponding to the shortName ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
    delete:
      tags:
        - institution
      description: Deletes the Institution corresponding to the shortName ID. Requires
        INSTITUTION_ADMIN authority.
      operationId: deleteInstitution
      parameters:
        - name: shortName
          in: path
          description: A short unique name for the Institution used as an identifier,
            such as "VUMC"
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successful deletion of the Institution corresponding to the
            shortName ID.
          content: {}
        409:
          description: Could not delete the Institution because it has verified affiliations.
          content: {}
    patch:
      tags:
        - institution
      description: Updates an Institution. Requires INSTITUTION_ADMIN authority.
      operationId: updateInstitution
      parameters:
        - name: shortName
          in: path
          description: A short unique name for the Institution used as an identifier,
            such as "VUMC"
          required: true
          schema:
            type: string
      requestBody:
        description: The Institution to update.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      responses:
        200:
          description: The updated Institution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      x-codegen-request-body-name: institutionToUpdate
  /v1/institutions/{shortName}/checkEmail/{email}/:
    get:
      tags:
        - institution
      description: Checks whether the given email address is a verified member of
        an institution.
      operationId: checkEmail
      parameters:
        - name: shortName
          in: path
          description: The short name / key of the institution to check, e.g. "VUMC"
          required: true
          schema:
            type: string
        - name: email
          in: path
          description: Institutional contact email address to check.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Whether the email is a valid member of the institution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckEmailResponse'
      x-aou-note: This endpoint is publicly-accessible and called by clients during
        user registration.
  /v1/institutions/instructionsEmail:
    post:
      tags:
        - institution
      description: Sets or updates the Institution-specific user instructions to be
        sent by email after registration. Requires INSTITUTION_ADMIN authority.
      operationId: setInstitutionUserInstructions
      requestBody:
        description: Text to include in an email sent to users for an Institution
          after they are registered.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InstitutionUserInstructions'
        required: false
      responses:
        200:
          description: Successfully set or updated the Institution-specific user instructions
            to be sent by email after registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionUserInstructions'
      x-codegen-request-body-name: userInstructions
  /v1/institutions/instructionsEmail/{shortName}:
    delete:
      tags:
        - institution
      description: Remove the Institution-specific user instructions to be sent by
        email after registration. Requires INSTITUTION_ADMIN authority.
      operationId: deleteInstitutionUserInstructions
      parameters:
        - name: shortName
          in: path
          description: A short unique name for the Institution used as an identifier,
            such as "VUMC"
          required: true
          schema:
            type: string
      responses:
        204:
          description: Successfully removed the Institution-specific user instructions
            to be sent by email after registration.
          content: {}
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/getDataTableQuery:
    post:
      tags:
        - cohorts
      description: |
        Translates a data table specification into a SQL query to run against the CDR.
      operationId: getDataTableQuery
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: a query specification for a data table
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataTableSpecification'
        required: false
      responses:
        200:
          description: the query to run against the CDR to retrieve the data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdrQuery'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/getCohortAnnotations:
    post:
      tags:
        - cohorts
      description: |
        Retrieves annotations for a cohort in the workspace
      operationId: getCohortAnnotations
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: a request indicating what annotations to retrieve
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnnotationsRequest'
        required: false
      responses:
        200:
          description: the requested annotations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationsResponse'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/searchConcepts:
    post:
      tags:
        - concepts
      description: |
        Searches for concepts in concept table by name, and optionally filter on domain, vocabulary IDs, or standard concept status. Uses the CDR version affiliated with the workspace specified in the path.
      operationId: searchConcepts
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: concept search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchConceptsRequest'
        required: false
      responses:
        200:
          description: A collection of concepts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptListResponse'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/domainCounts:
    post:
      tags:
        - concepts
      description: |
        Searches for concepts in concept table by name, and optionally filter on domain, vocabulary IDs, or standard concept status. Uses the CDR version affiliated with the workspace specified in the path.
      operationId: domainCounts
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
      requestBody:
        description: domain counts search request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DomainCountsRequest'
        required: false
      responses:
        200:
          description: A collection of concepts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainCountsListResponse'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}:
    post:
      tags:
        - cohortReview
      description: |
        This endpoint will create an cohort review which is a participant cohort sample specified by the review size parameter.
      operationId: createCohortReview
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: cohort review creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
        required: true
      responses:
        200:
          description: A cohortReviewId and cohort count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReview'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortId}/{cdrVersionId}/participants:
    post:
      tags:
        - cohortReview
      description: |
        Returns a collection of participants for the specified cohortId and cdrVersionId. This endpoint does pagination based on page, limit, order and column.
      operationId: getParticipantCohortStatuses
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: request body for getting list of ParticipantCohortStatuses.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageFilterRequest'
        required: true
      responses:
        200:
          description: A collection of participants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReview'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}:
    get:
      tags:
        - cohortReview
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantCohortStatus
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
        - name: participantId
          in: path
          description: specifies which participant
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: The ParticipantCohortStatus definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortStatus'
    put:
      tags:
        - cohortReview
      description: Modifies the ParticipantCohortStatus status
      operationId: updateParticipantCohortStatus
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
        - name: participantId
          in: path
          description: specifies which participant
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Contains the new review status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyCohortStatusRequest'
        required: false
      responses:
        200:
          description: The updated ParticipantCohortStatus definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortStatus'
      x-codegen-request-body-name: cohortStatusRequest
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/charts/{domain}:
    get:
      tags:
        - cohortReview
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantChartData
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
        - name: participantId
          in: path
          description: specifies which participant
          required: true
          schema:
            type: integer
            format: int64
        - name: domain
          in: path
          description: specifies which domain the chart data should belong to.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: the limit search results to
          schema:
            type: integer
      responses:
        200:
          description: The Participant Chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantChartDataListResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/charts/{domain}:
    get:
      tags:
        - cohortReview
      description: Returns a collection of CohortChartData for UI charting in cohort
        review.
      operationId: getCohortChartData
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
        - name: domain
          in: path
          description: specifies which domain the CohortChartData should belong to.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: the limit search results to
          schema:
            type: integer
      responses:
        200:
          description: A collection of CohortChartData
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortChartDataListResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/annotations:
    get:
      tags:
        - cohortReview
      description: This endpoint will get a collection of ParticipantCohortAnnotations.
      operationId: getParticipantCohortAnnotations
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
        - name: participantId
          in: path
          description: specifies which participant
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of ParticipantCohortAnnotation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortAnnotationListResponse'
    post:
      tags:
        - cohortReview
      description: This endpoint will create a ParticipantCohortAnnotation.
      operationId: createParticipantCohortAnnotation
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
        - name: participantId
          in: path
          description: specifies which participant
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: ParticipantCohortAnnotation creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantCohortAnnotation'
        required: true
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortAnnotation'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/data:
    post:
      tags:
        - cohortReview
      description: |
        Returns a collection of participant data for the specified params based off the PageFilterRequest. This endpoint does pagination based on page, limit, order and column.
      operationId: getParticipantData
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
        - name: participantId
          in: path
          description: specifies which participant
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: request body for getting list of participant data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageFilterRequest'
        required: true
      responses:
        200:
          description: A collection of ParticipantConditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantDataListResponse'
      x-codegen-request-body-name: request
  ? /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/participants/{participantId}/annotations/{annotationId}
    : put:
        tags:
          - cohortReview
        description: This endpoint will modify a ParticipantCohortAnnotation.
        operationId: updateParticipantCohortAnnotation
        parameters:
          - name: workspaceNamespace
            in: path
            description: The Workspace namespace
            required: true
            schema:
              type: string
          - name: workspaceId
            in: path
            description: The Workspace ID (a.k.a. the workspace's Firecloud name)
            required: true
            schema:
              type: string
          - name: cohortReviewId
            in: path
            description: Cohort Review ID
            required: true
            schema:
              type: integer
              format: int64
          - name: participantId
            in: path
            description: specifies which participant
            required: true
            schema:
              type: integer
              format: int64
          - name: annotationId
            in: path
            description: specifies which annotation
            required: true
            schema:
              type: integer
              format: int64
        requestBody:
          description: ParticipantCohortAnnotation modification request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyParticipantCohortAnnotationRequest'
          required: true
        responses:
          200:
            description: A ParticipantCohortAnnotation.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ParticipantCohortAnnotation'
        x-codegen-request-body-name: request
      delete:
        tags:
          - cohortReview
        description: Deletes the ParticipantCohortAnnotation with the specified ID
        operationId: deleteParticipantCohortAnnotation
        parameters:
          - name: workspaceNamespace
            in: path
            description: The Workspace namespace
            required: true
            schema:
              type: string
          - name: workspaceId
            in: path
            description: The Workspace ID (a.k.a. the workspace's Firecloud name)
            required: true
            schema:
              type: string
          - name: cohortReviewId
            in: path
            description: Cohort Review ID
            required: true
            schema:
              type: integer
              format: int64
          - name: participantId
            in: path
            description: specifies which participant
            required: true
            schema:
              type: integer
              format: int64
          - name: annotationId
            in: path
            description: specifies which annotation
            required: true
            schema:
              type: integer
              format: int64
        responses:
          202:
            description: ParticipantCohortAnnotation deletion request accepted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/EmptyResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/review/{cohortReviewId}/vocabularies:
    get:
      tags:
        - cohortReview
      description: This endpoint will get a collection of OMOP vocabularies per cdrVersionId.
      operationId: getVocabularies
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of OMOP vocabularies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VocabularyListResponse'
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions:
    get:
      tags:
        - cohortAnnotationDefinition
      description: Returns a collection of CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinitions
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of CohortAnnotationDefinition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinitionListResponse'
    post:
      tags:
        - cohortAnnotationDefinition
      description: This endpoint will create a CohortAnnotationDefinition.
      operationId: createCohortAnnotationDefinition
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: CohortAnnotationDefinition creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnnotationDefinition'
        required: true
      responses:
        200:
          description: A CohortAnnotationDefinition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{workspaceId}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}:
    get:
      tags:
        - cohortAnnotationDefinition
      description: Returns a CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinition
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
        - name: annotationDefinitionId
          in: path
          description: specifies which CohortAnnotationDefinition.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A CohortAnnotationDefinition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
    put:
      tags:
        - cohortAnnotationDefinition
      description: modify the CohortAnnotationDefinition.
      operationId: updateCohortAnnotationDefinition
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
        - name: annotationDefinitionId
          in: path
          description: specifies which CohortAnnotationDefinition.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Contains the new CohortAnnotationDefinition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnnotationDefinition'
        required: false
      responses:
        200:
          description: The updated CohortAnnotationDefinition definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
      x-codegen-request-body-name: cohortAnnotationDefinition
    delete:
      tags:
        - cohortAnnotationDefinition
      description: Deletes the CohortAnnotationDefinition with the specified ID
      operationId: deleteCohortAnnotationDefinition
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: workspaceId
          in: path
          description: The Workspace ID (a.k.a. the workspace's Firecloud name)
          required: true
          schema:
            type: string
        - name: cohortId
          in: path
          description: Cohort ID
          required: true
          schema:
            type: integer
            format: int64
        - name: annotationDefinitionId
          in: path
          description: specifies which CohortAnnotationDefinition.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        202:
          description: CohortAnnotationDefinition deletion request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/cohortbuilder/{cdrVersionId}/criteria/menu:
    get:
      tags:
        - cohortBuilder
      description: |
        Returns criteria menu options
      operationId: findCriteriaMenuOptions
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of criteria menu options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaMenuOptionsListResponse'
  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search/term:
    get:
      tags:
        - cohortBuilder
      description: |
        Returns a collection of criteria per search term
      operationId: findCriteriaByDomainAndSearchTerm
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
        - name: domain
          in: path
          description: the specific type of domain
          required: true
          schema:
            type: string
        - name: term
          in: query
          description: the term to search for
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: number of criteria matches to return
          schema:
            type: integer
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/{conceptId}:
    get:
      tags:
        - cohortBuilder
      description: |
        Returns a collection of criteria per concept id
      operationId: findStandardCriteriaByDomainAndConceptId
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
        - name: domain
          in: path
          description: the specific type of domain
          required: true
          schema:
            type: string
        - name: conceptId
          in: path
          description: the concept id to search for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}:
    get:
      tags:
        - cohortBuilder
      description: |
        Returns a collection of criteria by optional query parameters of the following: type, subtype, parentId and/or allChildren
      operationId: findCriteriaBy
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
        - name: domain
          in: path
          description: the specific domain of criteria to get
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: the specific type of criteria to get
          schema:
            type: string
        - name: standard
          in: query
          description: reveals if source or standard
          schema:
            type: boolean
            default: false
        - name: parentId
          in: query
          description: fetch direct children of parentId
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{cdrVersionId}/criteria/{domain}/search:
    get:
      tags:
        - cohortBuilder
      description: Returns matches on criteria table by code or name
      operationId: findCriteriaAutoComplete
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
        - name: domain
          in: path
          description: the specific domain of criteria to get
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: the type of the criteria were search for
          schema:
            type: string
        - name: standard
          in: query
          description: the type of the criteria were search for
          schema:
            type: boolean
            default: false
        - name: term
          in: query
          description: the term to search for
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: number of criteria matches to return
          schema:
            type: integer
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{cdrVersionId}/criteria/drug:
    get:
      tags:
        - cohortBuilder
      description: Returns criteria tree matching value
      operationId: findDrugBrandOrIngredientByValue
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
        - name: value
          in: query
          description: matches name or code of drug
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: number of criteria matches to return
          schema:
            type: integer
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{cdrVersionId}/criteria/drug/ingredient/{conceptId}:
    get:
      tags:
        - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: findDrugIngredientByConceptId
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
        - name: conceptId
          in: path
          description: conceptId of brand
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{cdrVersionId}/criteria/attribute/{conceptId}:
    get:
      tags:
        - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: findCriteriaAttributeByConceptId
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
        - name: conceptId
          in: path
          description: conceptId of brand
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaAttributeListResponse'
  /v1/cohortbuilder/{cdrVersionId}/age/counts:
    get:
      tags:
        - cohortBuilder
      description: Return counts for age type and age
      operationId: findAgeTypeCounts
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection age type counts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgeTypeCountListResponse'
  /v1/cohortbuilder/{cdrVersionId}/search:
    post:
      tags:
        - cohortBuilder
      description: Searches for participants based on criteria, criteria specific
        parameters, and modifiers.
      operationId: countParticipants
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: object of parameters by which to perform the search
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        200:
          description: A count of subjects
          content:
            application/json:
              schema:
                type: integer
                format: int64
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{cdrVersionId}/chartinfo/{genderOrSex}/{age}:
    post:
      tags:
        - cohortBuilder
      description: Searches for demographic info about subjects.
      operationId: findDemoChartInfo
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
        - name: genderOrSex
          in: path
          description: represents gender or sex at birth
          required: true
          schema:
            type: string
        - name: age
          in: path
          description: represents age, age at consent or age at cdr
          required: true
          schema:
            type: string
      requestBody:
        description: object of parameters by which to perform the search
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoChartInfoListResponse'
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{cdrVersionId}/demographics:
    get:
      tags:
        - cohortBuilder
      description: Will return a list all values for gender, race and ethnicity.
      operationId: findParticipantDemographics
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: An object which contains a list of all values for gender, race
            and ethnicity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantDemographics'
  /v1/cohortbuilder/{cdrVersionId}/dataFilters:
    get:
      tags:
        - cohortBuilder
      description: Returns data filter options per cdr version
      operationId: findDataFilters
      parameters:
        - name: cdrVersionId
          in: path
          description: specifies which cdr version
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A collection of data filter options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFiltersResponse'
components:
  schemas:
    ArchivalStatus:
      type: string
      description: CDR archival status; archived CDRs cannot be used for new workspaces.
      enum:
        - LIVE
        - ARCHIVED
    DataAccessLevel:
      type: string
      description: levels of access to data in the curated data repository
      enum:
        - unregistered
        - registered
        - protected
    RdrEntity:
      type: string
      description: Entities send to RDR
      enum:
        - USER
        - WORKSPACE
    Degree:
      type: string
      enum:
        - PHD
        - MD
        - JD
        - EDD
        - MSN
        - MS
        - MA
        - MBA
        - ME
        - BA
        - BS
        - BSN
        - NONE
    Domain:
      type: string
      description: a domain for concepts corresponding to a table in the OMOP schema
      enum:
        - OBSERVATION
        - PROCEDURE
        - DRUG
        - CONDITION
        - MEASUREMENT
        - DEVICE
        - DEATH
        - VISIT
        - SURVEY
        - PERSON
        - PHYSICALMEASUREMENT
    Surveys:
      type: string
      description: a survey for concepts
      enum:
        - THE BASICS
        - LIFESTYLE
        - OVERALL HEALTH
    Race:
      type: string
      enum:
        - AIAN
        - ASIAN
        - AA
        - NHOPI
        - WHITE
        - NONE
        - PREFER_NO_ANSWER
    Ethnicity:
      type: string
      enum:
        - HISPANIC
        - NOT_HISPANIC
        - PREFER_NO_ANSWER
    GenderIdentity:
      type: string
      enum:
        - MAN
        - WOMAN
        - NON_BINARY
        - TRANSGENDER
        - NONE_DESCRIBE_ME
        - PREFER_NO_ANSWER
    SexAtBirth:
      type: string
      enum:
        - MALE
        - FEMALE
        - INTERSEX
        - NONE_OF_THESE_DESCRIBE_ME
        - PREFER_NO_ANSWER
    SexualOrientation:
      type: string
      enum:
        - GAY
        - LESBIAN
        - STRAIGHT
        - BISEXUAL
        - NONE_OF_THESE_DESCRIBE_ME
        - PREFER_NO_ANSWER
    Education:
      type: string
      enum:
        - NO_EDUCATION
        - GRADES_1_12
        - UNDERGRADUATE
        - COLLEGE_GRADUATE
        - MASTER
        - DOCTORATE
    Disability:
      type: string
      enum:
        - "true"
        - "false"
    NonAcademicAffiliation:
      type: string
      description: |
        This enum is used by the older Institutional Affiliation flow associated with the Demographic Survey. The corresponding Verified Institutional Affiliation (newer flow) enum is OrganizationType. The two have slightly different values and are therefore NOT COMPATIBLE. This enum may be deleted in the future.
      enum:
        - INDUSTRY
        - EDUCATIONAL_INSTITUTION
        - COMMUNITY_SCIENTIST
        - FREE_TEXT
    IndustryRole:
      type: string
      description: |
        This enum is used by the older Institutional Affiliation flow associated with the Demographic Survey. The corresponding Verified Institutional Affiliation (newer flow) enum is the UI-only InstitutionalRole_IND_HCNP. The two have slightly different values and are therefore NOT COMPATIBLE. This enum may be deleted in the future.
      enum:
        - PRE_DOCTORAL
        - POST_DOCTORAL
        - EARLY
        - PI
        - FREE_TEXT
    EducationalRole:
      type: string
      description: |
        This enum is used by the older Institutional Affiliation flow associated with the Demographic Survey. The corresponding Verified Institutional Affiliation (newer flow) enum is the UI-only InstitutionalRole_EDU. The two have slightly different values and are therefore NOT COMPATIBLE. This enum may be deleted in the future.
      enum:
        - TEACHER
        - STUDENT
        - ADMIN
        - FREE_TEXT
    AcademicRole:
      type: string
      description: |
        This enum is used by the older Institutional Affiliation flow associated with the Demographic Survey. The corresponding Verified Institutional Affiliation (newer flow) enum is the UI-only InstitutionalRole_ARI. The two have slightly different values and are therefore NOT COMPATIBLE. This enum may be deleted in the future.
      enum:
        - UNDERGRADUATE
        - TRAINEE
        - FELLOW
        - EARLY_CAREER
        - NON_TENURE
        - MID_CAREER
        - LATE_CAREER
        - PROJECT_PERSONNEL
    FeaturedWorkspaceCategory:
      type: string
      enum:
        - PHENOTYPE_LIBRARY
        - TUTORIAL_WORKSPACES
    CdrVersionListResponse:
      required:
        - defaultCdrVersionId
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CdrVersion'
        defaultCdrVersionId:
          type: string
          description: ID of the CDR versions that should be used by the user by default
    CdrVersion:
      required:
        - cdrVersionId
        - creationTime
        - dataAccessLevel
        - name
      type: object
      properties:
        cdrVersionId:
          type: string
        name:
          type: string
        dataAccessLevel:
          $ref: '#/components/schemas/DataAccessLevel'
        archivalStatus:
          $ref: '#/components/schemas/ArchivalStatus'
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch. This timestamp is derived
            from the deid dataset name. Ex - deid_output_20191004 -> 2019-10-04 00:00:00Z
          format: int64
    DomainInfo:
      required:
        - allConceptCount
        - description
        - domain
        - name
        - participantCount
        - standardConceptCount
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        name:
          type: string
          description: display name of the domain
        description:
          type: string
          description: description of the domain
        standardConceptCount:
          type: integer
          description: number of standard concepts in this domain
          format: int64
        allConceptCount:
          type: integer
          description: number of concepts in this domain (standard or non-standard)
          format: int64
        participantCount:
          type: integer
          description: number of participants with data in the CDR for a concept in
            this domain
          format: int64
    DataFiltersResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataFilter'
    DataFilter:
      required:
        - dataFilterId
        - displayName
        - name
      type: object
      properties:
        dataFilterId:
          type: integer
          description: unique id
          format: int64
        displayName:
          type: string
          description: display name
        name:
          type: string
          description: name
    SurveyModule:
      required:
        - conceptId
        - description
        - name
        - orderNumber
        - participantCount
        - questionCount
      type: object
      properties:
        conceptId:
          type: integer
          description: the concept ID for the survey module
          format: int64
        name:
          type: string
          description: display name of the module
        description:
          type: string
          description: description of the module
        questionCount:
          type: integer
          description: number of questions in the module
          format: int64
        participantCount:
          type: integer
          description: number of participants with data in the CDR for questions in
            this module
          format: int64
        orderNumber:
          type: integer
          description: survey release order number
          format: int32
    FeaturedWorkspace:
      type: object
      properties:
        name:
          type: string
          description: the name of the workspace
        namespace:
          type: string
          description: the namespace of the workspace
        id:
          type: string
          description: the Firecloud id of the workspace
        category:
          $ref: '#/components/schemas/FeaturedWorkspaceCategory'
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: General error message for the response.
        statusCode:
          type: integer
          description: HTTP status code
        errorClassName:
          type: string
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
        errorUniqueId:
          type: string
          description: Unique ID for this error response, for correlation with backend
            logs
    ErrorCode:
      type: string
      description: Short parsable error descriptions
      enum:
        - PARSE_ERROR
        - USER_DISABLED
    StatusResponse:
      required:
        - firecloudStatus
        - notebooksStatus
      type: object
      properties:
        firecloudStatus:
          type: boolean
          default: false
        notebooksStatus:
          type: boolean
          default: false
    ConfigResponse:
      required:
        - gsuiteDomain
      type: object
      properties:
        gsuiteDomain:
          type: string
          description: G-Suite domain containing user accounts.
          x-aou-note: |
            This should be gSuiteDomain, but the Swagger-Codegen-generated server code causes the JSON
            response to have the keys "gsuiteDomain" and "gSuiteDomain". This weirdness is a workaround.
        projectId:
          type: string
          description: The cloud project in which this app is running.
        firecloudURL:
          type: string
          description: The Firecloud URL to use for REST requests.
        publicApiKeyForErrorReports:
          type: string
          description: |
            Stackdriver API key for error reporting, scoped to a particular
            domain. If unset, Stackdriver error reporting should be disabled.
        enableComplianceTraining:
          type: boolean
          description: Whether the compliance training access module is enabled.
          default: false
        enableDataUseAgreement:
          type: boolean
          description: Whether the data use agreement access module is enabled.
          default: false
        enableEraCommons:
          type: boolean
          description: Whether the eRA Commons access module is enabled.
          default: false
        unsafeAllowSelfBypass:
          type: boolean
          description: Whether a user is allowed to self-bypass. Only enabled in test
            environments.
          default: false
        defaultFreeCreditsDollarLimit:
          type: number
          description: The default dollar amount of free credits alloted to each user
          format: double
        enableBillingLockout:
          type: boolean
          description: Feature flag for billing lockout and upgrade
          default: false
        requireInvitationKey:
          type: boolean
          description: Whether the current environment requires an invitation key
            for signup.
          default: false
        requireInstitutionalVerification:
          type: boolean
          description: Feature flag for verifying the institutional affiliation of
            new users by validating their contact emails.
          default: false
        enableCBAgeTypeOptions:
          type: boolean
          description: Whether to use the new age type options in cohort builder age
            wizard
          default: false
        enableV3DataUserCodeOfConduct:
          type: boolean
          description: Whether to enable version 2 of the Data User Code of Conduct
          default: false
        enableEventDateModifier:
          type: boolean
          description: Whether to show the Event Date modifier in cohort builder
          default: false
    FeaturedWorkspacesConfigResponse:
      type: object
      properties:
        featuredWorkspacesList:
          type: array
          items:
            $ref: '#/components/schemas/FeaturedWorkspace'
    BillingProjectMembership:
      required:
        - projectName
        - role
        - status
      type: object
      properties:
        projectName:
          type: string
          description: the name of the project
        role:
          type: string
          description: the role of the current user in the project
        status:
          $ref: '#/components/schemas/BillingProjectStatus'
      description: ""
      x-aou-note: Mirrors BillingProjectMembership from fireCloud.yaml
    DataDictionaryEntry:
      type: object
      properties:
        cdrVersionId:
          type: integer
          format: int64
        definedTime:
          type: integer
          format: int64
        relevantOmopTable:
          type: string
        fieldName:
          type: string
        omopCdmStandardOrCustomField:
          type: string
        description:
          type: string
        fieldType:
          type: string
        dataProvenance:
          type: string
        sourcePpiModule:
          type: string
        transformedByRegisteredTierPrivacyMethods:
          type: boolean
          default: false
    BillingProjectStatus:
      type: string
      description: |
        Initialization status of a Firecloud billing project for use with Workbench.
      enum:
        - none
        - pending
        - ready
        - error
    EmailVerificationStatus:
      type: string
      description: stage of email verification
      enum:
        - unverified
        - pending
        - subscribed
    EmptyResponse:
      type: object
      properties:
        additionalInfo:
          type: string
    VerifyEmailRequest:
      type: object
      properties:
        emailToVerify:
          type: string
        username:
          type: string
    Authority:
      type: string
      description: actions a user can have authority/permission to perform
      enum:
        - REVIEW_RESEARCH_PURPOSE
        - DEVELOPER
        - ACCESS_CONTROL_ADMIN
        - FEATURED_WORKSPACE_ADMIN
        - COMMUNICATIONS_ADMIN
        - SECURITY_ADMIN
        - INSTITUTION_ADMIN
        - WORKSPACES_VIEW
      x-aou-note: |
        Authorities are a tool used to add discrete permissions to users. We currently
        define the following authorities:
         1) REVIEW_RESEARCH_PURPOSE: This authority allows the user to review workspaces where
            the user has requested review to approve or reject.
         2) DEVELOPER: Grants access to some internal-only
            administrative endpoints, including group management and cluster
            management. Intended to be granted for devops needs, e.g. for oncall.
         3) ACCESS_CONTROL_ADMIN: This is actually basically a user admin authority, for people
            to perform actions on a user's enabled status and manual verification.
         4) FEATURED_WORKSPACE_ADMIN: Allows a user to publish workspaces
         5) COMMUNICATIONS_ADMIN: Allows a user to post a Status Alert banner
         6) SECURITY_ADMIN: Allows a user to respond to egress alerts by deleting all clusters in a project
         7) INSTITUTION_ADMIN: Allows a user to create, delete, and update Institute entities

        Note on enum names: Swagger trims any common prefix from enum values' corresponding
        Java fields by default; this has no side-effect currently as there is
        no common prefix. https://github.com/swagger-api/swagger-codegen/issues/4261
    PageVisit:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        page:
          type: string
        firstVisit:
          type: integer
          format: int64
    WorkspaceListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
    WorkspaceResponseListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceResponse'
    Workspace:
      required:
        - name
      type: object
      properties:
        id:
          type: string
        etag:
          type: string
          description: |
            Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        name:
          type: string
        namespace:
          type: string
        cdrVersionId:
          type: string
        creator:
          type: string
        billingAccountName:
          type: string
        billingAccountType:
          $ref: '#/components/schemas/BillingAccountType'
        googleBucketName:
          type: string
        dataAccessLevel:
          $ref: '#/components/schemas/DataAccessLevel'
        researchPurpose:
          $ref: '#/components/schemas/ResearchPurpose'
        billingStatus:
          $ref: '#/components/schemas/BillingStatus'
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        published:
          type: boolean
          default: false
    WorkspaceBillingUsageResponse:
      required:
        - cost
      type: object
      properties:
        cost:
          type: number
          description: amount of free tier money spent on this workspace in USD
          format: double
    UserRole:
      required:
        - email
        - role
      type: object
      properties:
        email:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        role:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
    ShareWorkspaceRequest:
      required:
        - items
      type: object
      properties:
        workspaceEtag:
          type: string
          description: |
            Associated workspace etag retrieved via reading the workspaces API. If provided, validates that the workspace (and its user roles) has not been modified since this etag was retrieved.
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    WorkspaceUserRolesResponse:
      type: object
      properties:
        workspaceEtag:
          type: string
          description: |
            Updated workspace etag after the share request has been applied.
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    CopyRequest:
      required:
        - newName
        - toWorkspaceName
        - toWorkspaceNamespace
      type: object
      properties:
        toWorkspaceName:
          type: string
        toWorkspaceNamespace:
          type: string
        newName:
          type: string
    CloneWorkspaceRequest:
      required:
        - workspace
      type: object
      properties:
        includeUserRoles:
          type: boolean
          description: |
            Whether to duplicate the user roles (sharing settings) on the workspace. By default, duplicate follows the behavior of CreateWorkspace - it is shared solely with the creator as an OWNER. If true, all user roles are also copied onto the new workspace in addition to the caller becoming an OWNER.
          default: false
        workspace:
          $ref: '#/components/schemas/Workspace'
    CloneWorkspaceResponse:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
    UpdateWorkspaceRequest:
      required:
        - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
    WorkspaceAccessLevel:
      type: string
      description: levels of access to workspace, NO ACCESS is akin to removing a
        user from a workspace ACL.
      enum:
        - NO ACCESS
        - READER
        - WRITER
        - OWNER
    WorkspaceActiveStatus:
      type: string
      description: Status of workspace
      enum:
        - ACTIVE
        - DELETED
        - PENDING_DELETION_POST_1PPW_MIGRATION
    ResearchPurpose:
      required:
        - ancestry
        - anticipatedFindings
        - commercialPurpose
        - controlSet
        - diseaseFocusedResearch
        - drugDevelopment
        - educational
        - ethics
        - intendedStudy
        - methodsDevelopment
        - otherPurpose
        - populationHealth
        - reviewRequested
        - scientificApproach
        - socialBehavioral
      type: object
      properties:
        additionalNotes:
          type: string
        approved:
          type: boolean
          default: false
        ancestry:
          type: boolean
          default: false
        anticipatedFindings:
          type: string
        commercialPurpose:
          type: boolean
          default: false
        controlSet:
          type: boolean
          default: false
        diseaseFocusedResearch:
          type: boolean
          default: false
        diseaseOfFocus:
          type: string
        drugDevelopment:
          type: boolean
          default: false
        educational:
          type: boolean
          default: false
        intendedStudy:
          type: string
        scientificApproach:
          type: string
        methodsDevelopment:
          type: boolean
          default: false
        otherPopulationDetails:
          type: string
        otherPurpose:
          type: boolean
          default: false
        otherPurposeDetails:
          type: string
        ethics:
          type: boolean
          default: false
        populationDetails:
          type: array
          items:
            $ref: '#/components/schemas/SpecificPopulationEnum'
        populationHealth:
          type: boolean
          default: false
        reasonForAllOfUs:
          type: string
        reviewRequested:
          type: boolean
          default: false
        socialBehavioral:
          type: boolean
          default: false
        timeRequested:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        timeReviewed:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        disseminateResearchFindingList:
          type: array
          items:
            $ref: '#/components/schemas/DisseminateResearchEnum'
        otherDisseminateResearchFindings:
          type: string
        researchOutcomeList:
          type: array
          items:
            $ref: '#/components/schemas/ResearchOutcomeEnum'
    SpecificPopulationEnum:
      type: string
      description: Short parsable descriptions of specific population categories
      enum:
        - RACE_ETHNICITY
        - AGE_GROUPS
        - SEX
        - GENDER_IDENTITY
        - SEXUAL_ORIENTATION
        - GEOGRAPHY
        - DISABILITY_STATUS
        - ACCESS_TO_CARE
        - EDUCATION_LEVEL
        - INCOME_LEVEL
        - OTHER
        - RACE_ASIAN
        - RACE_AA
        - RACE_HISPANIC
        - RACE_AIAN
        - RACE_MENA
        - RACE_NHPI
        - RACE_MORE_THAN_ONE
        - AGE_CHILDREN
        - AGE_ADOLESCENTS
        - AGE_OLDER
        - AGE_OLDER_MORE_THAN_75
    DisseminateResearchEnum:
      type: string
      description: Represents how researchers plan to to disseminate thier research
        findings.
      enum:
        - PUBLICATION_PEER_REVIEWED_JOURNALS
        - PRESENATATION_SCIENTIFIC_CONFERENCES
        - PRESS_RELEASE
        - PUBLICATION_COMMUNITY_BASED_BLOG
        - PUBLICATION_PERSONAL_BLOG
        - SOCIAL_MEDIA
        - PRESENTATION_ADVISORY_GROUPS
        - OTHER
    ResearchOutcomeEnum:
      type: string
      description: Represents antipicated outcomes from the research
      enum:
        - PROMOTE_HEALTHY_LIVING
        - IMPROVE_HEALTH_EQUALITY_UBR_POPULATIONS
        - IMPROVED_RISK_ASSESMENT
        - DECREASE_ILLNESS_BURDEN
        - PRECISION_INTERVENTION
        - NONE_APPLY
    ResearchPurposeReviewRequest:
      required:
        - approved
      type: object
      properties:
        approved:
          type: boolean
          default: false
      description: Approve or reject a workspace's research purpose.
    ClusterConfig:
      type: object
      properties:
        masterDiskSize:
          type: integer
          description: Master persistent disk size in GB.
          format: int32
        machineType:
          type: string
          description: GCE machine type, e.g. n1-standard-2.
    UpdateClusterConfigRequest:
      required:
        - userEmail
      type: object
      properties:
        userEmail:
          type: string
        clusterConfig:
          $ref: '#/components/schemas/ClusterConfig'
      description: |
        Request to update the default cluster configuration for a given user. Fields of the config may be omitted, in which case a default will be used. Set clusterConfig to null to clear it.
    AccessModule:
      type: string
      enum:
        - DATA_USE_AGREEMENT
        - COMPLIANCE_TRAINING
        - BETA_ACCESS
        - ERA_COMMONS
        - TWO_FACTOR_AUTH
    AccessBypassRequest:
      required:
        - isBypassed
      type: object
      properties:
        moduleName:
          $ref: '#/components/schemas/AccessModule'
        isBypassed:
          type: boolean
          default: false
    CohortReviewListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortReview'
    WorkbenchListBillingAccountsResponse:
      required:
        - billingAccounts
      type: object
      properties:
        billingAccounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingAccount'
    BillingAccount:
      required:
        - displayName
        - isFreeTier
        - isOpen
        - name
      type: object
      properties:
        isFreeTier:
          type: boolean
          description: Returns true if this is the billing account used for free tier
        name:
          type: string
        displayName:
          type: string
        isOpen:
          type: boolean
      description: |
        See https://cloud.google.com/billing/reference/rest/v1/billingAccounts#BillingAccount for documentation on name, displayName, and isOpen.
    CohortListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Cohort'
    Cohort:
      required:
        - criteria
        - name
        - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        etag:
          type: string
          description: |
            Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        name:
          type: string
        criteria:
          type: string
          description: |
            Internal representation of the cohort definition. Clients should not depend directly on this, but instead call client functions to issue a SQL query for the cohort.
        type:
          type: string
        description:
          type: string
        creator:
          type: string
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
    MaterializeCohortRequest:
      type: object
      properties:
        cohortName:
          type: string
          description: |
            The name of a cohort that is to be evaluated. Either this or cohortSpec should be specified
        cohortSpec:
          type: string
          description: |
            JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). Either this or cohortName should be specified
        statusFilter:
          type: array
          description: |
            An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.)
          items:
            $ref: '#/components/schemas/CohortStatus'
        cdrVersionName:
          type: string
          description: |
            The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used
        pageToken:
          type: string
          description: |
            Pagination token retrieved from a previous call to materializeCohort; used for retrieving additional pages of results. If this is specified, all other fields on MaterializeCohortRequest apart from pageSize must match the values specified on the request that generated this token.
        pageSize:
          type: integer
          description: |
            Maximum number of results to return in a response. Defaults to 1000.
          format: int32
        fieldSet:
          $ref: '#/components/schemas/FieldSet'
    FieldSet:
      type: object
      properties:
        tableQuery:
          $ref: '#/components/schemas/TableQuery'
        annotationQuery:
          $ref: '#/components/schemas/AnnotationQuery'
      description: |
        A specification for fields to retrieve about participants in a cohort. Exactly one of the properties below should be specified.
    MaterializeCohortResponse:
      required:
        - results
      type: object
      properties:
        results:
          type: array
          description: |
            An array of JSON dictionaries representing results to the cohort materialization. (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a list[object] where each object is a dictionary. In Typescript clients, this is an Array<any> where each object is a dictionary.) Keys in the dictionaries will be the columns selected in the field set provided in the request, and the values will be the values of those columns.
          items:
            type: object
            properties: {}
        nextPageToken:
          type: string
          description: |
            Pagination token that can be used in a subsequent call to MaterializeCohortRequest to retrieve more results. If not set, there are no more results to retrieve.
    ConceptSetListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ConceptSet'
    ConceptSet:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        etag:
          type: string
          description: |
            Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        name:
          type: string
        domain:
          $ref: '#/components/schemas/Domain'
        survey:
          $ref: '#/components/schemas/Surveys'
        description:
          type: string
        creator:
          type: string
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        participantCount:
          type: integer
          description: |
            Count of participants in the CDR version for the workspace containing this concept set that match the specified concept set
          format: int32
        concepts:
          type: array
          description: Concepts in the concept set, in conceptName order.
          items:
            $ref: '#/components/schemas/Concept'
    CreateConceptSetRequest:
      required:
        - conceptSet
      type: object
      properties:
        conceptSet:
          $ref: '#/components/schemas/ConceptSet'
        addedIds:
          type: array
          description: The IDs of concepts to be added to the concept set.
          items:
            type: integer
            format: int64
    UpdateConceptSetRequest:
      required:
        - etag
      type: object
      properties:
        etag:
          type: string
          description: |
            Etag of the concept set being modified. Validates that the concept set has not been modified since this etag was retrieved.
        addedIds:
          type: array
          description: |
            The IDs of concepts to be added to the concept set.
          items:
            type: integer
            format: int64
        removedIds:
          type: array
          description: |
            The IDs of concepts to be removed from the concept set.
          items:
            type: integer
            format: int64
    DataSetRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        etag:
          type: string
          description: |
            Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        workspaceId:
          type: integer
          format: int64
        includesAllParticipants:
          type: boolean
          description: |
            Whether to include all participants or filter by cohorts
          default: false
        prePackagedConceptSet:
          $ref: '#/components/schemas/PrePackagedConceptSetEnum'
        conceptSetIds:
          type: array
          description: |
            The ids of all concept sets in the data set
          items:
            type: integer
            format: int64
        cohortIds:
          type: array
          description: |
            The ids of all cohorts in the data set
          items:
            type: integer
            format: int64
        domainValuePairs:
          type: array
          description: |
            All the selected domain/value pairs in the data set
          items:
            $ref: '#/components/schemas/DomainValuePair'
    PrePackagedConceptSetEnum:
      type: string
      enum:
        - NONE
        - DEMOGRAPHICS
        - SURVEY
        - BOTH
    DataSetExportRequest:
      required:
        - dataSetRequest
        - newNotebook
        - notebookName
      type: object
      properties:
        dataSetRequest:
          $ref: '#/components/schemas/DataSetRequest'
        notebookName:
          type: string
        newNotebook:
          type: boolean
          default: false
        kernelType:
          $ref: '#/components/schemas/KernelTypeEnum'
    MarkDataSetRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        resourceType:
          $ref: '#/components/schemas/ResourceType'
    ResourceType:
      type: string
      enum:
        - NOTEBOOK
        - COHORT
        - COHORT_SEARCH_GROUP
        - COHORT_SEARCH_ITEM
        - COHORT_REVIEW
        - CONCEPT_SET
        - DATASET
        - WORKSPACE
    KernelTypeEnum:
      type: string
      enum:
        - Python
        - R
    DomainValuePair:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        value:
          type: string
    DataSet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        etag:
          type: string
          description: |
            Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        includesAllParticipants:
          type: boolean
          default: false
        description:
          type: string
        workspaceId:
          type: integer
          format: int64
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        conceptSets:
          type: array
          description: |
            All concept sets in the data set
          items:
            $ref: '#/components/schemas/ConceptSet'
        cohorts:
          type: array
          description: |
            All cohorts in the data set
          items:
            $ref: '#/components/schemas/Cohort'
        domainValuePairs:
          type: array
          description: |
            All the selected domain/value pairs in the data set
          items:
            $ref: '#/components/schemas/DomainValuePair'
        prePackagedConceptSet:
          $ref: '#/components/schemas/PrePackagedConceptSetEnum'
    DataSetListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataSet'
    DataSetCodeResponse:
      type: object
      properties:
        kernelType:
          $ref: '#/components/schemas/KernelTypeEnum'
        code:
          type: string
          description: The code required to generate the query for the data set.
    DataSetQuery:
      required:
        - domain
        - query
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        query:
          type: string
          description: |
            The parameterized BigQuery SQL string to fetch the domain-specific subset of the data set from the CDR.
        namedParameters:
          type: array
          description: |
            The set of named parameters to use for the SQL query.
          items:
            $ref: '#/components/schemas/NamedParameterEntry'
    NamedParameterEntry:
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/NamedParameterValue'
    NamedParameterValue:
      required:
        - name
        - parameterType
        - parameterValue
      type: object
      properties:
        name:
          type: string
        parameterType:
          type: string
          description: |
            Should be any parameter allowed by bigquery, with the exception of struct. The list of parameter types can be found here: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types
        arrayType:
          type: string
        parameterValue:
          type: object
          properties: {}
          description: Can be any value
    DataSetPreviewRequest:
      required:
        - domain
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        includesAllParticipants:
          type: boolean
          description: |
            Whether to include all participants or filter by cohorts
          default: false
        prePackagedConceptSet:
          $ref: '#/components/schemas/PrePackagedConceptSetEnum'
        conceptSetIds:
          type: array
          description: |
            The ids of all concept sets in the data set
          items:
            type: integer
            format: int64
        cohortIds:
          type: array
          description: |
            The ids of all cohorts in the data set
          items:
            type: integer
            format: int64
        values:
          type: array
          description: |
            All the selected values in the data set
          items:
            type: string
    DataSetPreviewResponse:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        values:
          type: array
          items:
            $ref: '#/components/schemas/DataSetPreviewValueList'
    DataSetPreviewValueList:
      type: object
      properties:
        value:
          type: string
          description: Value selected by user which will act as column header in preview
            table
        queryValue:
          type: array
          items:
            type: string
    DomainInfoResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DomainInfo'
    ValueSet:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        survey:
          $ref: '#/components/schemas/Surveys'
        values:
          $ref: '#/components/schemas/DomainValuesResponse'
    DomainValuesResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DomainValue'
    DomainValue:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: The user facing display name for the value.
      description: |
        Domain values map to various column names in OMOP.
    ReadOnlyNotebookResponse:
      type: object
      properties:
        html:
          type: string
    SurveysResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SurveyModule'
    SearchSurveysRequest:
      required:
        - standardConceptFilter
      type: object
      properties:
        query:
          type: string
          description: |
            A query string that can be used to match a subset of the name (case-insensitively), the entire code value (case-insensitively), or the concept ID. If not specified, all concepts are returned.
        standardConceptFilter:
          $ref: '#/components/schemas/StandardConceptFilter'
        surveyName:
          type: string
          description: The name of the survey clicked
        maxResults:
          type: integer
          description: The maximum number of results returned. Defaults to 20.
          format: int32
        pageNumber:
          type: integer
          description: By default it returns the first page and then its next pages
            from that on.
    SurveyQuestions:
      type: object
      properties:
        question:
          type: string
        conceptId:
          type: integer
          format: int64
        countValue:
          type: integer
          description: Count of participants matching this concept in the CDR
          format: int64
    CreateAccountRequest:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
        invitationKey:
          type: string
        captchaVerificationToken:
          type: string
          description: Token generated by captcha service once user successfully completes
            captcha
        termsOfServiceVersion:
          type: integer
          description: |
            Optional version of the TOS that the user has acknowledged during the sign-up flow. If null, the system assumes that the user has not acknowledged any TOS during sign-up.
          format: int32
    DuplicateCohortRequest:
      type: object
      properties:
        originalCohortId:
          type: integer
          format: int64
        newName:
          type: string
    InvitationVerificationRequest:
      required:
        - invitationKey
      type: object
      properties:
        invitationKey:
          type: string
          description: Invitation key for verification
    ResendWelcomeEmailRequest:
      required:
        - creationNonce
        - username
      type: object
      properties:
        username:
          type: string
          description: Username of account to resend welcome email to
        creationNonce:
          type: string
          description: The nonce returned from the account creation API.
    UpdateContactEmailRequest:
      required:
        - contactEmail
        - creationNonce
        - username
      type: object
      properties:
        contactEmail:
          type: string
          description: Email to update contact email
        username:
          type: string
          description: Username for account.
        creationNonce:
          type: string
          description: The nonce returned from the account creation API.
    NihToken:
      required:
        - jwt
      type: object
      properties:
        jwt:
          type: string
          description: the encoded/signed JWT
    Profile:
      required:
        - dataAccessLevel
        - username
      type: object
      properties:
        userId:
          type: integer
          description: researchallofus userId
          format: int64
        username:
          type: string
          description: researchallofus username
        creationNonce:
          type: string
          description: |
            A value which can be used to secure API calls during the account creation flow, prior to account login.
        contactEmail:
          type: string
          description: email address that can be used to contact the user
        contactEmailFailure:
          type: boolean
          description: Whether or not contact email could be added to verification
            list
          default: false
        firstSignInTime:
          type: integer
          format: int64
        dataAccessLevel:
          $ref: '#/components/schemas/DataAccessLevel'
        degrees:
          type: array
          items:
            $ref: '#/components/schemas/Degree'
        givenName:
          type: string
          description: the user's given name (e.g. Alice)
        familyName:
          type: string
          description: the user's family  name (e.g. Jones)
        phoneNumber:
          type: string
          description: the user's phone number
        professionalUrl:
          type: string
          description: the link to the user's professional url
        currentPosition:
          type: string
          description: the user's curent position (job title)
        organization:
          type: string
          description: the user's current organization
        authorities:
          type: array
          description: authorities granted to this user
          items:
            $ref: '#/components/schemas/Authority'
        pageVisits:
          type: array
          description: pages user has visited
          items:
            $ref: '#/components/schemas/PageVisit'
        demographicSurveyCompletionTime:
          type: integer
          description: Timestamp when the user completed a demographic survey in milliseconds
            since the UNIX epoch.
          format: int64
        disabled:
          type: boolean
          default: false
        emailVerificationStatus:
          $ref: '#/components/schemas/EmailVerificationStatus'
        aboutYou:
          type: string
        areaOfResearch:
          type: string
        institutionalAffiliations:
          type: array
          description: |
            A list of institutions the user is affiliated with. DEPRECATED in favor of the newer verifiedInstitutionalAffiliation
          items:
            $ref: '#/components/schemas/InstitutionalAffiliation'
        verifiedInstitutionalAffiliation:
          $ref: '#/components/schemas/VerifiedInstitutionalAffiliation'
        demographicSurvey:
          $ref: '#/components/schemas/DemographicSurvey'
        idVerificationCompletionTime:
          type: integer
          description: Timestamp when the user completes identity verification.
          format: int64
        idVerificationBypassTime:
          type: integer
          description: Timestamp when the user is bypassed for completing identity
            verification
          format: int64
        twoFactorAuthCompletionTime:
          type: integer
          description: Timestamp when the user completed two factor authentication
            in milliseconds since the UNIX epoch.
          format: int64
        twoFactorAuthBypassTime:
          type: integer
          description: Timestamp when the user was bypassed for completing two factor
            authentication in milliseconds since the UNIX epoch.
          format: int64
        eraCommonsLinkedNihUsername:
          type: string
          description: The user's NIH username
        eraCommonsLinkExpireTime:
          type: integer
          description: The FireCloud-calculated expiration time
          format: int64
          default: 0
        eraCommonsCompletionTime:
          type: integer
          description: Timestamp when the user completed era commons linking.
          format: int64
        eraCommonsBypassTime:
          type: integer
          description: Timestamp when the user was bypassed for completing era commons
            linking.
          format: int64
        complianceTrainingCompletionTime:
          type: integer
          description: Timestamp when a user completed compliance training.
          format: int64
        complianceTrainingBypassTime:
          type: integer
          description: Timestamp when a user was bypassed for completing compliance
            training
          format: int64
        betaAccessBypassTime:
          type: integer
          description: Timestamp when a user was bypassed for beta access
          format: int64
        betaAccessRequestTime:
          type: integer
          description: Timestamp when the user requests beta access.
          format: int64
        emailVerificationCompletionTime:
          type: integer
          description: Timestamp when a user completed email verification
          format: int64
        emailVerificationBypassTime:
          type: integer
          description: Timestamp when a user was bypassed for completing email verification
          format: int64
        dataUseAgreementCompletionTime:
          type: integer
          description: Timestamp when a user completed the data use agreement.
          format: int64
        dataUseAgreementBypassTime:
          type: integer
          description: Timestamp when a user was bypassed for completing the data
            use agreement.
          format: int64
        dataUseAgreementSignedVersion:
          type: integer
          description: Version of the data use agreement that the user last signed.
          format: int32
        address:
          $ref: '#/components/schemas/Address'
        freeTierUsage:
          type: number
          format: double
        freeTierDollarQuota:
          type: number
          format: double
        latestTermsOfServiceVersion:
          type: integer
          description: |
            Version of the terms of service that the user last acknowledged. May be null if the user has never acknowledged the Terms of Service.
          format: int32
        latestTermsOfServiceTime:
          type: integer
          description: |
            Timestamp when the user last acknowledged the terms of service. May be null if the user has never acknowledged the Terms of Service.
          format: int64
    InstitutionalAffiliation:
      type: object
      properties:
        institution:
          type: string
        role:
          type: string
        nonAcademicAffiliation:
          $ref: '#/components/schemas/NonAcademicAffiliation'
        other:
          type: string
    DemographicSurvey:
      type: object
      properties:
        race:
          type: array
          items:
            $ref: '#/components/schemas/Race'
        ethnicity:
          $ref: '#/components/schemas/Ethnicity'
        identifiesAsLgbtq:
          type: boolean
        lgbtqIdentity:
          type: string
        genderIdentityList:
          type: array
          items:
            $ref: '#/components/schemas/GenderIdentity'
        sexAtBirth:
          type: array
          items:
            $ref: '#/components/schemas/SexAtBirth'
        yearOfBirth:
          type: number
        education:
          $ref: '#/components/schemas/Education'
        disability:
          type: boolean
          default: false
    Address:
      type: object
      properties:
        streetAddress1:
          type: string
        streetAddress2:
          type: string
        zipCode:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
    StackTraceElement:
      required:
        - className
        - fileName
        - lineNumber
        - methodName
      type: object
      properties:
        className:
          type: string
          description: class name
        methodName:
          type: string
          description: method name
        fileName:
          type: string
          description: source file name
        lineNumber:
          type: integer
          description: line number
      description: ""
    ClusterStatus:
      type: string
      enum:
        - Creating
        - Running
        - Updating
        - Error
        - Stopping
        - Stopped
        - Starting
        - Deleting
        - Deleted
        - Unknown
    Cluster:
      required:
        - clusterName
        - clusterNamespace
        - status
      type: object
      properties:
        clusterName:
          type: string
          description: The user-supplied name for the cluster
        clusterNamespace:
          type: string
          description: The Google Project used to create the cluster
        status:
          $ref: '#/components/schemas/ClusterStatus'
        createdDate:
          type: string
          description: The date and time the cluster was created, in ISO-8601 format
      description: A Firecloud notebook cluster.
    FileDetail:
      required:
        - lastModifiedTime
        - name
        - path
      type: object
      properties:
        name:
          type: string
          description: File Name
        path:
          type: string
          description: The path is in format of gs://bucket-name/name
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
    GetClusterResponse:
      type: object
      properties:
        cluster:
          $ref: '#/components/schemas/Cluster'
    CreateClusterResponse:
      required:
        - cluster
      type: object
      properties:
        cluster:
          $ref: '#/components/schemas/Cluster'
    ListClusterResponse:
      required:
        - clusterName
        - createdDate
        - dateAccessed
        - googleProject
        - labels
        - status
      type: object
      properties:
        clusterName:
          type: string
          description: The user-supplied name for the cluster
        googleProject:
          type: string
          description: The Google Project used to create the cluster
        status:
          $ref: '#/components/schemas/ClusterStatus'
        createdDate:
          type: string
          description: The date and time the cluster was created, in ISO-8601 format
        labels:
          type: object
          properties: {}
          description: The labels to be placed on the cluster. Of type Map[String,String]
        dateAccessed:
          type: string
          description: |
            The date and time the cluster was last accessed, in ISO-8601 format.
            Date accessed is defined as the last time the cluster was created, modified, or accessed via the proxy.
      description: Limited set of responses for a cluster. This is a subset of options
        in a full cluster, copied from the Leonardo swagger
    ListClusterDeleteRequest:
      type: object
      properties:
        clustersToDelete:
          type: array
          items:
            type: string
    ClusterLocalizeRequest:
      required:
        - notebookNames
        - playgroundMode
      type: object
      properties:
        notebookNames:
          type: array
          description: |
            Names of notebooks to localize. This is just the basename (no gs:// needed). This is interpreted as relative to the /notebooks directory within the provided workspace's Google Cloud Storage bucket.
          items:
            type: string
        playgroundMode:
          type: boolean
          description: Set to true if playgroundMode needed
          default: false
    ClusterLocalizeResponse:
      required:
        - clusterLocalDirectory
      type: object
      properties:
        clusterLocalDirectory:
          type: string
          description: |
            The directory on the notebook cluster file system where the requested files were localized. This is the "API" directory in Jupyter terms, which means it is a relative path in the Jupyter user-facing file system, e.g. "foo/bar.ipynb".
    UsernameTakenResponse:
      required:
        - isTaken
      type: object
      properties:
        isTaken:
          type: boolean
          description: Boolean response to whether username is already taken.
          default: false
      example:
        isTaken: false
    CheckEmailResponse:
      type: object
      properties:
        isValidMember:
          type: boolean
          description: Whether the requested email address is a valid member of the
            institution.
    WorkspaceResponse:
      required:
        - accessLevel
        - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
        accessLevel:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
    UserListResponse:
      required:
        - profileList
      type: object
      properties:
        profileList:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
    UpdateUserDisabledRequest:
      required:
        - email
      type: object
      properties:
        email:
          type: string
        disabled:
          type: boolean
          description: Set to true to disable user in auth domain, false otherwise
          default: false
    AuditBigQueryResponse:
      type: object
      properties:
        numQueryIssues:
          type: integer
          description: |
            Number of queries issues against the Curated data repository which are flagged as possible audit issues. See logs/alerts for details.
          format: int32
    CheckClustersResponse:
      type: object
      properties:
        clusterDeletionCount:
          type: integer
          description: |
            Number of clusters deleted during the check.
          format: int32
    User:
      type: object
      properties:
        email:
          type: string
          description: researchallofus email address (deprecated in favor of userName)
        userName:
          type: string
          description: Unique researchallofus username (a Google account email)
        givenName:
          type: string
          description: the user's given name (e.g. Alice)
        familyName:
          type: string
          description: the user's family  name (e.g. Jones)
    UserResponse:
      type: object
      properties:
        users:
          type: array
          description: A list of users matching the provided search query.
          items:
            $ref: '#/components/schemas/User'
        nextPageToken:
          type: string
          description: |
            Pagination token that can be used in a subsequent calls to retrieve more results. If not set, there are no more results to retrieve.
    RecentResourceResponse:
      type: array
      items:
        $ref: '#/components/schemas/RecentResource'
    RecentResource:
      type: object
      properties:
        workspaceId:
          type: integer
          format: int64
        workspaceNamespace:
          type: string
        workspaceFirecloudName:
          type: string
        workspaceBillingStatus:
          $ref: '#/components/schemas/BillingStatus'
        permission:
          type: string
        cohort:
          $ref: '#/components/schemas/Cohort'
        cohortReview:
          $ref: '#/components/schemas/CohortReview'
        notebook:
          $ref: '#/components/schemas/FileDetail'
        conceptSet:
          $ref: '#/components/schemas/ConceptSet'
        dataSet:
          $ref: '#/components/schemas/DataSet'
        modifiedTime:
          type: string
    RecentResourceRequest:
      type: object
      properties:
        notebookName:
          type: string
    RecentWorkspace:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
        accessLevel:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
    RecentWorkspaceResponse:
      type: array
      items:
        $ref: '#/components/schemas/RecentWorkspace'
    NotebookLockingMetadataResponse:
      type: object
      properties:
        lastLockedBy:
          type: string
        lockExpirationTime:
          type: integer
          description: The time when the lock will expire, in ms from the Unix epoch
          format: int64
    BillingStatus:
      type: string
      description: |
        Is the billing account associated with this workspace available to incur costs?  For a free tier project, this indicates whether a user has an available balance in their quota.  For a user-provided billing account, this corresponds to whether payment is valid and up to date.
      enum:
        - ACTIVE
        - INACTIVE
    BillingAccountType:
      type: string
      description: |
        Whether a billing project is provided by the Researcher Workbench as a Free Tier project subject to quota checks, or the project has a billing account provided by the user
      enum:
        - FREE_TIER
        - USER_PROVIDED
    BillingProjectBufferStatus:
      type: object
      properties:
        bufferSize:
          type: integer
          description: |
            Current size of the billing buffer, i.e. the number of projects ready to be claimed.
          format: int64
    StatusAlert:
      type: object
      properties:
        statusAlertId:
          type: integer
          description: The primary key of the status alert in the database
          format: int64
        title:
          type: string
          description: |
            Title of the status alert, e.g. 'Service Incident: December 6, 2019'
        message:
          type: string
          description: |
            The actual message of the status alert, e.g. 'AoU RW is down because GCP is down'
        link:
          type: string
          description: |
            A URL linking to an incident report where users can read more
    EgressEventRequest:
      type: object
      properties:
        eventsJsonArray:
          type: string
          description: |
            A JSON string containing an array of JSON-encoded egress events. See the EgressEvent definition for the expected schema of each event.
    EgressEvent:
      type: object
      properties:
        environment:
          type: string
          description: The AoU environment in which the high-egress event occurred.
          enum:
            - test
            - perf
            - staging
            - stable
            - preprod
            - prod
        time_window_duration:
          type: integer
          description: |
            The duration of the time window during which the high-egress event occurred, in seconds.
          format: int64
        time_window_start:
          type: integer
          description: Beginning of the time window, in milliseconds since Epoch.
          format: int64
        egress_mib:
          type: number
          description: The amount of egress detected during the window, in mebibytes
            (MiB).
          format: double
        egress_mib_threshold:
          type: number
          description: The threshold value for which this egress triggered an alert,
            in mebibytes (MiB).
          format: double
        project_name:
          type: string
          description: |
            The Google Cloud project name associated with the workspace, e.g. aou-rw-6b66533d. Always present.
        vm_name:
          type: string
          description: The name of the Jupyter VM which generated egress, e.g. all-of-us-260-m.
    ArrayOfLong:
      type: array
      items:
        type: integer
        format: int64
    Institution:
      required:
        - displayName
        - organizationTypeEnum
        - shortName
      type: object
      properties:
        shortName:
          type: string
          description: A short unique name for the Institution used as an identifier,
            such as 'VUMC'
        displayName:
          type: string
          description: A more descriptive name for the Institution, such as 'Vanderbilt
            University Medical Center'
        organizationTypeEnum:
          $ref: '#/components/schemas/OrganizationType'
        organizationTypeOtherText:
          type: string
          description: The detailed Organization Type of this institution, as text,
            if its enumerated type is OTHER
        duaTypeEnum:
          $ref: '#/components/schemas/DuaType'
        emailAddresses:
          type: array
          description: A list of email addresses which can be validated as members
            of this Institution
          items:
            type: string
        emailDomains:
          type: array
          description: A list of email domains which can be validated as members of
            this Institution
          items:
            type: string
      description: Represents an institution which has been approved to validate researchers
        who wish to use the system, including the email patterns which we use to validate
        users.
    PublicInstitutionDetails:
      required:
        - displayName
        - organizationTypeEnum
        - shortName
      type: object
      properties:
        shortName:
          type: string
          description: A short unique name for the Institution used as an identifier,
            such as 'VUMC'
        displayName:
          type: string
          description: A more descriptive name for the Institution, such as 'Vanderbilt
            University Medical Center'
        duaTypeEnum:
          $ref: '#/components/schemas/DuaType'
        organizationTypeEnum:
          $ref: '#/components/schemas/OrganizationType'
      description: |
        Represents an institution which has been approved to validate researchers who wish to use the system. Does not include the sensitive email patterns used to validate users.
    InstitutionUserInstructions:
      required:
        - institutionShortName
        - instructions
      type: object
      properties:
        institutionShortName:
          type: string
          description: The short unique name for the Institution used as an identifier,
            such as 'VUMC'.
        instructions:
          type: string
          description: Text to include in an email sent to this Institution's users
            after they are registered.
      description: Institution-specific instructions for users to perform after registration.
    GetInstitutionsResponse:
      required:
        - institutions
      type: object
      properties:
        institutions:
          type: array
          items:
            $ref: '#/components/schemas/Institution'
    GetPublicInstitutionDetailsResponse:
      required:
        - institutions
      type: object
      properties:
        institutions:
          type: array
          items:
            $ref: '#/components/schemas/PublicInstitutionDetails'
    OrganizationType:
      type: string
      description: A categorization of institutions, derived from CAPS requirements
      enum:
        - ACADEMIC_RESEARCH_INSTITUTION
        - INDUSTRY
        - EDUCATIONAL_INSTITUTION
        - HEALTH_CENTER_NON_PROFIT
        - OTHER
    DuaType:
      type: string
      description: Type of Data Use Agreement Institution has signed, Applicable to
        all researchers or restricted to  just few
      enum:
        - MASTER
        - RESTRICTED
    InstitutionalRole:
      type: string
      description: |
        The union of the roles researchers can have at Institutions of all OrganizationTypes, derived from CAPS requirements.
      enum:
        - UNDERGRADUATE
        - TRAINEE
        - FELLOW
        - EARLY_CAREER
        - MID_CAREER
        - LATE_CAREER
        - PRE_DOCTORAL
        - POST_DOCTORAL
        - SENIOR_RESEARCHER
        - TEACHER
        - STUDENT
        - ADMIN
        - PROJECT_PERSONNEL
        - OTHER
    VerifiedInstitutionalAffiliation:
      required:
        - institutionShortName
        - institutionalRoleEnum
      type: object
      properties:
        institutionShortName:
          type: string
          description: The unique Short Name of the Institution where the user has
            a Verified Affiliation, such as 'VUMC'
        institutionDisplayName:
          type: string
          description: |
            The longer, more descriptive name of the Institution where the user has a Verified Affiliation, such as 'Vanderbilt University Medical Center'
        institutionalRoleEnum:
          $ref: '#/components/schemas/InstitutionalRole'
        institutionalRoleOtherText:
          type: string
          description: |
            The user's detailed Institutional Role at this Institution, as text, if its enumerated type is OTHER
    AdminFederatedWorkspaceDetailsResponse:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
        collaborators:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        resources:
          $ref: '#/components/schemas/AdminWorkspaceResources'
      description: Admin-visible metadata about a workspace.
    AdminWorkspaceResources:
      type: object
      properties:
        workspaceObjects:
          $ref: '#/components/schemas/AdminWorkspaceObjectsCounts'
        cloudStorage:
          $ref: '#/components/schemas/AdminWorkspaceCloudStorageCounts'
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/ListClusterResponse'
      description: |
        A summary of application-level resources associated with a workspace. Includes data about Cohort Builder objects, analysis clusters, and cloud-storage contents.
    AdminWorkspaceObjectsCounts:
      type: object
      properties:
        cohortCount:
          type: integer
        conceptSetCount:
          type: integer
        datasetCount:
          type: integer
    AdminWorkspaceCloudStorageCounts:
      type: object
      properties:
        notebookFileCount:
          type: integer
        nonNotebookFileCount:
          type: integer
        storageBytesUsed:
          type: integer
          format: int64
    CloudStorageTraffic:
      type: object
      properties:
        receivedBytes:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'
    TimeSeriesPoint:
      type: object
      properties:
        timestamp:
          type: integer
          description: |
            Timestamp, in milliseconds since Unix epoch, of the end point of the time window covered by this time series point.
          format: int64
        value:
          type: number
          format: double
      description: Represents a floating-point valued time series point.
    DataTableSpecification:
      type: object
      properties:
        cohortName:
          type: string
          description: |
            The name of a cohort that data should be retrieved for. This and cohortSpec should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR.
        cohortSpec:
          type: string
          description: |
            JSON representation of a cohort to be evaluated (using the same format used for saved cohorts). This and cohortName should not be used at the same time. If neither cohortName nor cohortSpec are specified, data will be extracted for everyone in the CDR.
        statusFilter:
          type: array
          description: |
            An array of status values; participants with these statuses will be included. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED. Only valid for use with cohortName (cohorts saved in the database.)
          items:
            $ref: '#/components/schemas/CohortStatus'
        cdrVersionName:
          type: string
          description: |
            The name of a CDR version to use when evaluating the cohort; if none is specified, the CDR version currently associated with the workspace will be used
        tableQuery:
          $ref: '#/components/schemas/TableQuery'
        maxResults:
          type: integer
          description: |
            The maximum number of results returned in the data table. Defaults to no limit (all matching results are returned.)
          format: int64
    CdrQuery:
      required:
        - bigqueryDataset
        - bigqueryProject
        - columns
      type: object
      properties:
        sql:
          type: string
          description: |
            Google SQL to use when querying the CDR. If empty, it means no participants can possibly match the data table specification, and an empty data table should be returned.
        columns:
          type: array
          description: |
            An array of names to be used for the columns being returned by the query. (Note that related table aliases will be returned with '.' as a separator, whereas '__' is used in the SQL.) This will be populated even if sql is empty (i.e. there are no results.)
          items:
            type: string
        configuration:
          type: object
          properties: {}
          description: |
            configuration for the BigQuery job (includes named parameters); you can pass this JSON dictionary in for the configuration when calling methods like pandas.read_gbq().
        bigqueryProject:
          type: string
          description: name of the Google Cloud project containing the CDR dataset
        bigqueryDataset:
          type: string
          description: name of the CDR BigQuery dataset
    CohortAnnotationsRequest:
      required:
        - cohortName
      type: object
      properties:
        cohortName:
          type: string
          description: |
            The name of a cohort that annotations should be retrieved for.
        statusFilter:
          type: array
          description: |
            An array of status values; participants with these statuses will have their annotations retrieved. Defaults to [NOT_REVIEWED, INCLUDED, NEEDS_FURTHER_REVIEW] -- everything but EXCLUDED.
          items:
            $ref: '#/components/schemas/CohortStatus'
        cdrVersionName:
          type: string
          description: |
            The name of a CDR version to use when retrieving annotations; if none is specified, the CDR version currently associated with the workspace will be used
        annotationQuery:
          $ref: '#/components/schemas/AnnotationQuery'
    CohortAnnotationsResponse:
      required:
        - results
      type: object
      properties:
        columns:
          type: array
          description: |
            An array of columns for the annotations being returned.
          items:
            type: string
        results:
          type: array
          description: |
            An array of JSON dictionaries, with each dictionary representing the requested annotations and/or review status for a single person. (In Java, this is represented as Map<String, Object>[]. In Python clients, this is a list[object] where each object is a dictionary. In Typescript clients, this is an Array<any> where each object is a dictionary.) Keys in the dictionaries will be "person_id", "review_status", or the name of an annotation.
          items:
            type: object
            properties: {}
    TableQuery:
      required:
        - tableName
      type: object
      properties:
        tableName:
          type: string
          description: |
            The name of a table containing a person_id column to retrieve data from (e.g. person, observation); should be in the OMOP CDM 5.2 schema.
        columns:
          type: array
          description: |
            An array of columns to retrieve from the table, taken from the table specified above. Defaults to all columns.
          items:
            type: string
        filters:
          $ref: '#/components/schemas/ResultFilters'
        conceptSetName:
          type: string
          description: |
            A name of a concept set in the workspace used to filter results; results must match one of the concepts in the named concept set. If both filters and conceptSetName are specified, results must match both.
        orderBy:
          type: array
          description: |
            An array of columns to sort the resulting data by, taken from the table specified above, each one optionally enclosed in "DESCENDING()" for descending sort order. Default sort order is "person_id" (in ascending order) followed by the ID of the specified table (in ascending order.)
          items:
            type: string
      description: |
        A specification for retrieving data from a single table.
    AnnotationQuery:
      type: object
      properties:
        columns:
          type: array
          description: |
            An array of names of annotations to retrieve about participants, or "review_status" for the cohort review status of the participant or "person_id" for the ID of the participant. Defaults to "person_id", "review_status", and the names of all defined annotations in the cohort review. This is only valid in combination with the use of cohortName above. Only data for participants in the cohort review will be returned; if no cohort review has been created, no results will be returned.
          items:
            type: string
        orderBy:
          type: array
          description: |
            An array of names of annotations, or "review status" or "person_id", each one optionally enclosed in "DESCENDING()" for descending sort order. Specifies the order that results should be returned. Defaults to "person_id" (in ascending order). Annotations referenced in orderBy must also be present in columns.
          items:
            type: string
      description: |
        A specification for retrieving annotation values or review statuses entered for participants.
    ResultFilters:
      type: object
      properties:
        if_not:
          type: boolean
          description: |
            Set to true if a result matching allOf or anyOf below should result in a result *not* being returned.
          default: false
        allOf:
          type: array
          description: |
            A list of result filters. All filters matching means a result should be returned (or not returned if "not" is true.)
          items:
            $ref: '#/components/schemas/ResultFilters'
        anyOf:
          type: array
          description: |
            A list of column filters. Any filters matching means a result should be returned (or not returned if "not" is true.)
          items:
            $ref: '#/components/schemas/ResultFilters'
        columnFilter:
          $ref: '#/components/schemas/ColumnFilter'
      description: |
        A list of filters applied to the results of a query. Only results matching the filter criteria should be returned. Exactly one of "allOf", "anyOf", and "columnFilter" should be set.
    ColumnFilter:
      required:
        - columnName
      type: object
      properties:
        columnName:
          type: string
          description: |
            The name of the column to filter on.
        operator:
          $ref: '#/components/schemas/Operator'
        value:
          type: string
          description: |
            A string to use in comparisons (case-sensitive).
        values:
          type: array
          description: |
            An array of strings to use in comparisons (case-sensitive); used with the "in" operator.
          items:
            type: string
        valueDate:
          type: string
          description: |
            A date (yyyy-MM-dd) or datetime (yyyy-MM-dd HH:mm:ss zzz) value to use in comparisons.
        valueNumber:
          type: number
          description: |
            A number to use in comparisons (either integer or floating point.)
        valueNumbers:
          type: array
          description: |
            An array of numbers to use in comparisons (used with the "in" operator)
          items:
            type: number
        valueNull:
          type: boolean
          description: |
            Set to true if the column value should be compared to null.
          default: false
      description: |
        A filter applied to the results of a query, based on a column value in a table. Only results matching the filter will be returned. One (and only one) of the value columns should be populated. values and valueNumbers should only be used in conjunction with the "in" operator.
    CohortStatus:
      type: string
      description: possible values indicating whether participants are in or out of
        the cohort
      enum:
        - EXCLUDED
        - INCLUDED
        - NEEDS_FURTHER_REVIEW
        - NOT_REVIEWED
    Operator:
      type: string
      enum:
        - EQUAL
        - NOT_EQUAL
        - LESS_THAN
        - GREATER_THAN
        - LESS_THAN_OR_EQUAL_TO
        - GREATER_THAN_OR_EQUAL_TO
        - LIKE
        - IN
        - BETWEEN
    StandardConceptFilter:
      type: string
      description: filter on whether standard, non-standard, or all concepts should
        be returned\
      enum:
        - ALL_CONCEPTS
        - STANDARD_CONCEPTS
        - NON_STANDARD_CONCEPTS
        - STANDARD_OR_CODE_ID_MATCH
    MatchType:
      type: string
      description: match column type on concept search
      enum:
        - CONCEPT_CODE
        - CONCEPT_ID
        - CONCEPT_NAME
    Concept:
      required:
        - conceptClassId
        - conceptCode
        - conceptId
        - conceptName
        - countValue
        - domainId
        - prevalence
        - standardConcept
        - vocabularyId
      type: object
      properties:
        conceptId:
          type: integer
          description: ID of the concept
          format: int64
        conceptName:
          type: string
          description: Name of the concept
        domainId:
          type: string
          description: Domain ID of the concept (e.g. Observation)
        vocabularyId:
          type: string
          description: Vocabulary ID of the concept (e.g. SNOMED)
        conceptCode:
          type: string
          description: Code for the concept in its vocabulary (e.g. G8107)
        conceptClassId:
          type: string
          description: Class of the concept (e.g. Ingredient)
        standardConcept:
          type: boolean
          description: True if this is a standard concept, false otherwise
          default: false
        countValue:
          type: integer
          description: Count of participants matching this concept in the CDR
          format: int64
        prevalence:
          type: number
          description: Prevalence among participants in the CDR (a percentage of the
            total)
          format: float
        conceptSynonyms:
          type: array
          description: concept synonym names
          items:
            type: string
      description: A concept describing a type of entity (e.g. measurement, observation,
        procedure.)
    ConceptSynonym:
      required:
        - conceptId
        - conceptSynonymName
        - languageConceptId
      type: object
      properties:
        conceptId:
          type: integer
          description: concept id
          format: int64
        conceptSynonymName:
          type: string
          description: concept synonym name
        languageConceptId:
          type: integer
          description: language concept id
          format: int64
      description: concept synonym
    SearchConceptsRequest:
      required:
        - domain
        - standardConceptFilter
      type: object
      properties:
        query:
          type: string
          description: |
            A query string that can be used to match a subset of the name (case-insensitively), the entire code value (case-insensitively), or the concept ID. If not specified, all concepts are returned.
        standardConceptFilter:
          $ref: '#/components/schemas/StandardConceptFilter'
        domain:
          $ref: '#/components/schemas/Domain'
        surveyName:
          type: string
          description: The name of the survey clicked
        maxResults:
          type: integer
          description: The maximum number of results returned. Defaults to 20.
          format: int32
        pageNumber:
          type: integer
          description: By default it returns the first page and then its next pages
            from that on.
    DomainCountsRequest:
      required:
        - standardConceptFilter
      type: object
      properties:
        query:
          type: string
          description: |
            A query string that can be used to match a subset of the name (case-insensitively), the entire code value (case-insensitively), or the concept ID. If not specified, all concepts are returned.
        standardConceptFilter:
          $ref: '#/components/schemas/StandardConceptFilter'
        surveyName:
          type: string
          description: The name of the survey clicked
    ConceptListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Concept'
    DomainCountsListResponse:
      required:
        - domainCounts
      type: object
      properties:
        domainCounts:
          type: array
          items:
            $ref: '#/components/schemas/DomainCount'
    DomainCount:
      required:
        - conceptCount
        - domain
        - name
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        name:
          type: string
          description: display name of the domain
        conceptCount:
          type: integer
          description: number of concepts matching the search query in this domain
          format: int64
    CreateReviewRequest:
      required:
        - size
      type: object
      properties:
        size:
          type: integer
          description: A sample size to review
    CohortReview:
      required:
        - cdrVersionId
        - cohortDefinition
        - cohortId
        - cohortName
        - cohortReviewId
        - creationTime
        - matchedParticipantCount
        - reviewStatus
      type: object
      properties:
        cohortReviewId:
          type: integer
          format: int64
        cohortId:
          type: integer
          format: int64
        cdrVersionId:
          type: integer
          format: int64
        etag:
          type: string
          description: |
            Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        creationTime:
          type: string
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        cohortDefinition:
          type: string
        cohortName:
          type: string
        description:
          type: string
        matchedParticipantCount:
          type: integer
          format: int64
        reviewSize:
          type: integer
          format: int64
        reviewedCount:
          type: integer
          format: int64
        queryResultSize:
          type: integer
          format: int64
        reviewStatus:
          $ref: '#/components/schemas/ReviewStatus'
        participantCohortStatuses:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantCohortStatus'
        page:
          type: integer
        pageSize:
          type: integer
        sortOrder:
          type: string
        sortColumn:
          type: string
    PageFilterRequest:
      required:
        - page
        - pageSize
        - sortOrder
      type: object
      properties:
        page:
          type: integer
          description: specific page (default is 0)
        pageSize:
          type: integer
          description: page size of results (default is 25)
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
        sortColumn:
          $ref: '#/components/schemas/FilterColumns'
        filters:
          $ref: '#/components/schemas/FilterList'
        domain:
          $ref: '#/components/schemas/DomainType'
    FilterColumns:
      type: string
      enum:
        - PARTICIPANTID
        - STATUS
        - GENDER
        - BIRTHDATE
        - RACE
        - ETHNICITY
        - DECEASED
        - START_DATE
        - STANDARD_CODE
        - STANDARD_VOCAB
        - STANDARD_NAME
        - STANDARD_CONCEPT_ID
        - SOURCE_CODE
        - SOURCE_VOCAB
        - SOURCE_NAME
        - SOURCE_CONCEPT_ID
        - DOMAIN
        - AGE_AT_EVENT
        - NUM_OF_MENTIONS
        - FIRST_MENTION
        - LAST_MENTION
        - VISIT_TYPE
        - ROUTE
        - DOSE
        - STRENGTH
        - VAL_AS_NUMBER
        - UNIT
        - REF_RANGE
        - SURVEY_NAME
        - QUESTION
        - ANSWER
    DomainType:
      type: string
      enum:
        - CONDITION
        - PROCEDURE
        - OBSERVATION
        - DRUG
        - ALL_EVENTS
        - DEVICE
        - VISIT
        - MEASUREMENT
        - PHYSICAL_MEASUREMENT
        - LAB
        - VITAL
        - SURVEY
        - PERSON
    SortOrder:
      type: string
      enum:
        - asc
        - desc
    FilterList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
    Filter:
      required:
        - operator
        - property
        - values
      type: object
      properties:
        property:
          $ref: '#/components/schemas/FilterColumns'
        operator:
          $ref: '#/components/schemas/Operator'
        values:
          type: array
          items:
            type: string
    ParticipantCohortStatus:
      required:
        - participantId
        - status
      type: object
      properties:
        participantId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/CohortStatus'
        genderConceptId:
          type: integer
          format: int64
        gender:
          type: string
        birthDate:
          type: string
        raceConceptId:
          type: integer
          format: int64
        race:
          type: string
        ethnicityConceptId:
          type: integer
          format: int64
        ethnicity:
          type: string
        deceased:
          type: boolean
          default: false
    ModifyCohortStatusRequest:
      required:
        - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CohortStatus'
    ParticipantChartDataListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantChartData'
    VocabularyListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary'
    Vocabulary:
      required:
        - domain
        - type
        - vocabulary
      type: object
      properties:
        type:
          type: string
          description: Source or Standard
        domain:
          type: string
          description: OMOP domain
        vocabulary:
          type: string
          description: Vocabulary
    CohortChartDataListResponse:
      required:
        - count
        - items
      type: object
      properties:
        count:
          type: integer
          description: total count for cohort.
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortChartData'
    ParticipantCohortAnnotation:
      required:
        - cohortAnnotationDefinitionId
        - cohortReviewId
        - participantId
      type: object
      properties:
        annotationId:
          type: integer
          description: participant annotation id.
          format: int64
        cohortAnnotationDefinitionId:
          type: integer
          description: annotation definition id.
          format: int64
        cohortReviewId:
          type: integer
          description: the cohort reivew id.
          format: int64
        participantId:
          type: integer
          description: the participant id.
          format: int64
        annotationValueString:
          type: string
          description: The Value of the annotation if the AnnotationType is STRING
        annotationValueEnum:
          type: string
          description: The option chosen for the annotation if the AnnotationType
            is ENUM
        annotationValueDate:
          type: string
          description: The Value of the annotation if the AnnotationType is DATE
        annotationValueBoolean:
          type: boolean
          description: The Value of the annotation if the AnnotationType is BOOLEAN
          default: false
        annotationValueInteger:
          type: integer
          description: The Value of the annotation if the AnnotationType is INTEGER
    ParticipantCohortAnnotationListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantCohortAnnotation'
    ParticipantDataListResponse:
      required:
        - count
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantData'
        count:
          type: integer
          description: the total count of items.
          format: int64
    ModifyParticipantCohortAnnotationRequest:
      type: object
      properties:
        annotationValueString:
          type: string
          description: The Value of the annotation if the AnnotationType is STRING
        annotationValueEnum:
          type: string
          description: The option chosen for the annotation if the AnnotationType
            is ENUM
        annotationValueDate:
          type: string
          description: The Value of the annotation if the AnnotationType is DATE
        annotationValueBoolean:
          type: boolean
          description: The Value of the annotation if the AnnotationType is BOOLEAN
          default: false
        annotationValueInteger:
          type: integer
          description: The Value of the annotation if the AnnotationType is INTEGER
    ReviewStatus:
      type: string
      description: possible values indicating whether review has been created
      enum:
        - NONE
        - CREATED
    CohortChartData:
      required:
        - conceptId
        - count
        - name
      type: object
      properties:
        name:
          type: string
          description: the name of this data
        conceptId:
          type: integer
          description: the source concept id for this data
          format: int64
        count:
          type: integer
          description: the count for this data
          format: int64
    ParticipantChartData:
      required:
        - ageAtEvent
        - rank
        - standardName
        - standardVocabulary
        - startDate
      type: object
      properties:
        standardName:
          type: string
          description: the standard name
        standardVocabulary:
          type: string
          description: the standard vocabulary
        startDate:
          type: string
          description: the date of the event
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        rank:
          type: integer
          description: the rank of the data
    ParticipantData:
      required:
        - itemDate
      type: object
      properties:
        itemDate:
          type: string
          description: The date of the event
        domain:
          type: string
          description: the domain of this data.
        standardName:
          type: string
          description: The standard name of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        standardConceptId:
          type: integer
          description: The standard concept id
          format: int64
        sourceConceptId:
          type: integer
          description: The source concept id
          format: int64
        sourceVocabulary:
          type: string
          description: The source vocabulary type of this data
        standardVocabulary:
          type: string
          description: The standard vocabulary of this data
        sourceName:
          type: string
          description: The source name of this data
        sourceCode:
          type: string
          description: The source code of this data
        standardCode:
          type: string
          description: The standard code of this data
        value:
          type: string
          description: The source value of this data
        visitType:
          type: string
          description: The visit type of this data
        numMentions:
          type: string
          description: The number of mentions of this data
        firstMention:
          type: string
          description: The date of first mention of this data
        lastMention:
          type: string
          description: The date of last mention of this data
        unit:
          type: string
          description: The unit of this data
        dose:
          type: string
          description: The quantity of this data
        strength:
          type: string
          description: The strength of this data
        route:
          type: string
          description: The route of this data
        refRange:
          type: string
          description: The reference range of this data
        survey:
          type: string
          description: The name of this survey
        question:
          type: string
          description: a question in this survey
        answer:
          type: string
          description: an answer in this survey
    AnnotationType:
      type: string
      description: possible values representing the type of annotation.
      enum:
        - STRING
        - ENUM
        - DATE
        - BOOLEAN
        - INTEGER
    CohortAnnotationDefinition:
      required:
        - annotationType
        - cohortId
        - columnName
      type: object
      properties:
        cohortAnnotationDefinitionId:
          type: integer
          description: the annotation definition id.
          format: int64
        etag:
          type: string
          description: |
            Entity tag for optimistic concurrency control. To be set during a read-modify-write to ensure that the client has not attempted to modify a changed resource.
        cohortId:
          type: integer
          description: the cohort id.
          format: int64
        columnName:
          type: string
          description: the name of this annotation.
        annotationType:
          $ref: '#/components/schemas/AnnotationType'
        enumValues:
          type: array
          items:
            type: string
    CohortAnnotationDefinitionListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortAnnotationDefinition'
    AgeTypeCountListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AgeTypeCount'
    AgeTypeCount:
      required:
        - age
        - ageType
        - count
      type: object
      properties:
        ageType:
          type: string
          description: type of age
        age:
          type: integer
          description: age
        count:
          type: integer
          description: count
          format: int64
    CriteriaListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Criteria'
    CriteriaMenuOptionsListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaMenuOption'
    Criteria:
      required:
        - group
        - hasAttributes
        - id
        - name
        - parentId
        - selectable
        - type
      type: object
      properties:
        id:
          type: integer
          description: |
            Primary identifier which is unique within a CDR version. Value may not be stable across different CDR versions.
          format: int64
        parentId:
          type: integer
          description: |
            The parent id of the criteria. 0 if this is the root node of a criteria tree.
          format: int64
        type:
          type: string
          description: |
            The tree type of this criteria, see TreeType. This will need to change to CriteriaType with the new implementation(change type below to ref CriteriaType)
        subtype:
          type: string
          description: |
            The subtype of this criteria, see TreeSubType. This will need to change to CriteriaSubType with the new implementation(change type below to ref CriteriaSubType)
        code:
          type: string
          description: |
            Code that identifies this criteria. In some vocabularies such as ICD9 and ICD10, this code captures the tree hierarchy, e.g. '001.002.003'. Multiple criteria may exist for the same code within a CDR version if a given concept has multiple entries at different locations in the criteria tree (this is common in SNOMED).
            Criteria codes should generally be stable across CDR versions.
        name:
          type: string
          description: description of criteria
        count:
          type: integer
          description: |
            Estimated number of participants in a particular CDR version which have a least one event matching this criteria.
          format: int64
        group:
          type: boolean
          description: specifies if child or parent
          default: false
        selectable:
          type: boolean
          description: |
            Whether or not a client can specify this criteria in a search request. Selecting a group implies selecting all criteria contained within that group.
          default: false
        conceptId:
          type: integer
          description: |
            The OMOP concept id associated with this criteria. May be null if this criteria does not match an OMOP concept, e.g. for intermediate nodes (groups) in the criteria tree. Concept ids are ids associated with a specific vocabulary item in the concept table and allow you to search for that code in its domain table. This may be a source or standard concept ID, depending on the tree for the criteria.
            Similar to a code, multiple criteria may reference the same concept ID due to multiple occurrences of a concept in the criteria tree. In other cases a criteria may share the concept ID of its parent, e.g. in the PPI tree a question and child answer share a concept id.
            Concept IDs should generally be stable across CDR versions.
          format: int64
        domainId:
          type: string
          description: |
            # TODO: Remove this field. Deprecated. Clue to determine which OMOP tables to search, but these only exist for leaves in the tree. Parents don't have domain ids and concept id will be used in the case that a parent is selectable.
        hasAttributes:
          type: boolean
          description: |
            Whether this criteria has associated attributes which can be filtered by value during a search, for example a blood pressure measurement criteria might have an associated measurement value attribute.
          default: false
        path:
          type: string
          description: |
            A "." delimited path of all parent criteria IDs. Does not include the id for this criteria; root criteria nodes have a null path.
        value:
          type: string
          description: |
            A helper property to fully describe PPI/AGE data. Age holds the value of the age and for PPI it holds value as number or value as concept id.
        hasHierarchy:
          type: boolean
          description: Whether criteria is linked to a tree.
          default: false
        hasAncestorData:
          type: boolean
          description: Whether criteria needs lookup in the criteria_ancestor table.
          default: false
        isStandard:
          type: boolean
          description: Reveals if this criteria is standard or source.
          default: false
    CriteriaMenuOption:
      required:
        - domain
        - types
      type: object
      properties:
        domain:
          type: string
          description: The criteria domains that are searchable in Cohort Builder
        types:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaMenuSubOption'
    CriteriaMenuSubOption:
      required:
        - standardFlags
        - type
      type: object
      properties:
        type:
          type: string
          description: The criteria types that are searchable in Cohort Builder
        standardFlags:
          type: array
          items:
            $ref: '#/components/schemas/StandardFlag'
    StandardFlag:
      required:
        - standard
      type: object
      properties:
        standard:
          type: boolean
          description: flag that determines standard or source
          default: false
    CriteriaAttributeListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaAttribute'
    CriteriaAttribute:
      required:
        - conceptName
        - estCount
        - id
        - type
        - valueAsConceptId
      type: object
      properties:
        id:
          type: integer
          description: id of the criteria
          format: int64
        valueAsConceptId:
          type: integer
          description: categorical concept id
          format: int64
        conceptName:
          type: string
          description: name of concept
        type:
          type: string
          description: numerical or categorical
        estCount:
          type: string
          description: possible count
    SearchRequest:
      required:
        - dataFilters
        - excludes
        - includes
      type: object
      properties:
        includes:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroup'
        excludes:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroup'
        dataFilters:
          type: array
          items:
            type: string
      description: |
        The SearchRequest describes the state of the Cohort Builder at any given moment. It contains two keys, `include` and `exclude`, each of which specifies an array of SearchGroups which are `AND`ed together, and which collectively specify which subjects to include or exclude from the cohort.
      example:
        typical:
          include:
            - - type: ICD9
                searchParameters:
                  - value: Foo
                    domainId: Bar
                  - value: C
              - type: ICD9
                searchParameters:
                  - value: Baz
            - - type: ICD10
                searchParameters:
                  - value: Baz
                    domainId: Bar
                modifiers: []
          exclude: []
        minimum:
          include:
            - - type: A Crit Type
                searchParameters:
                  - value: A value
    SearchGroup:
      required:
        - items
        - temporal
      type: object
      properties:
        id:
          type: string
          description: Unique within the cohort definition
        name:
          type: string
          description: optional custom name set by user
        temporal:
          type: boolean
          description: indicates if this search group relates to time
          default: false
        mention:
          $ref: '#/components/schemas/TemporalMention'
        time:
          $ref: '#/components/schemas/TemporalTime'
        timeValue:
          type: integer
          description: time value between temporal items
          format: int64
        timeFrame:
          type: string
          description: time increments(Day, Month or Year)
        items:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroupItem'
      description: |
        A SearchGroup is a container for groups of criteria which are `OR`ed together.
    SearchGroupItem:
      required:
        - modifiers
        - searchParameters
        - type
      type: object
      properties:
        id:
          type: string
          description: Unique within the cohort definition
        name:
          type: string
          description: optional custom name set by user
        type:
          type: string
          description: type of criteria
        temporalGroup:
          type: integer
          description: temporal group that this item belongs to
        searchParameters:
          type: array
          description: values that help search for subjects
          items:
            $ref: '#/components/schemas/SearchParameter'
        modifiers:
          type: array
          description: |
            Predicates to apply to the search parameters. Aggregate modifiers (i.e. NUM_OF_OCCURRENCES) are applied independently to each SearchParameter and furthermore, are applied independently to any group elements within those SearchParameters.
            Consider the following example query scenario.
            Example criteria tree: - parent
              - child1
              - child2

            Curated dataset contains 1 participant with 1 event each of concepts child1 and child2. Search request is made on "parent", with a modifier of {type: NUM_OF_OCCURRENCES, operands: [2]}.
            This does not match - the participant would need to have at least 2 events of type child1 and/or of child2 and/or of parent (in the event that "parent" corresponds to a real concept in the data).
            Additionally, aggregate modifiers are applied secondarily to other modifiers. For example, combining the AGE_AT_EVENT with NUM_OF_OCCURRENCES - first we filter down all events by the age predicate, then we count occurrences.
          items:
            $ref: '#/components/schemas/Modifier'
      description: |
        A SearchGroupItem is the "line item" of the Cohort Builder.  It specifies a set of criteria of a given kind, possibly alongside a set of modifiers, the results of which are `OR`ed together with the other criteria in the group.
      example:
        type: ICD9
        searchParameters:
          - value: E9293
            domainId: Condition
          - value: E979-E979.9
        modifiers:
          - name: age_at_event
            operator: GTE >=
            operands:
              - Arg1
              - Arg2
    SearchParameter:
      required:
        - ancestorData
        - attributes
        - domain
        - group
        - name
        - parameterId
        - standard
        - type
      type: object
      properties:
        parameterId:
          type: string
          description: Unique within the cohort definition
        name:
          type: string
          description: The name of the generating Criterion
        value:
          type: string
          description: The Criteria code (or name if querying for Deceased)
        domain:
          type: string
          description: The omop domain that this criteria belongs to
        type:
          type: string
          description: The type of the generating Criterion
        subtype:
          type: string
          description: The subtype of the generating Criterion
        group:
          type: boolean
          description: Specifies if the generating Criterion is a leaf or node in
            its Criteria tree
          default: false
        ancestorData:
          type: boolean
          description: flag that determines if concept ids need to be looked up in
            the ancestor table
          default: false
        standard:
          type: boolean
          description: flag that determines standard or source
          default: false
        conceptId:
          type: integer
          description: The concept id that maps to concept table, if any.
          format: int64
        attributes:
          type: array
          description: |
            Attributes are extra inputs provided by users through the UX. Currently used by Demographics(Age), Measurements(Body Height, Weight.. etc) and Physical Measurements(Blood Pressure, Body Weight.. etc). Measurements and Physical Measurements have overlap in many areas such as body weight, but the difference is standard(measurements) and source(physical measurements).

             Example demo age search parameter:
             {
               "type": "DEMO",
               "searchParameters": [
                 {
                   "type": "DEMO",
                   "subtype": "AGE",
                   "group": false,
                   "attributes": [{"name": "Age", "operator": "BETWEEN", "operands": [23, 31]}]
                 }
               ],
               "modifiers": []
             }

             Example physical measurement blood pressure(Hypotensive (Systolic <= 90 / Diastolic <= 60))
             {
               "type": "PM",
               "searchParameters": [
                 {
                   "type": "PM",
                   "subtype": "BP",
                   "group": false,
                   "attributes": [
                     {
                       "conceptId": 903118,
                       "name": "Systolic",
                       "operands": ["90"],
                       "operator":"LESS_THAN_OR_EQUAL_TO"
                     },
                     {
                       "conceptId": 903115,
                       "name": "Diastolic",
                       "operands": ["60"],
                        "operator": "LESS_THAN_OR_EQUAL_TO"
                      }
                    ]
                  }
                ],
                "modifiers": []
              }
          items:
            $ref: '#/components/schemas/Attribute'
      example:
        leafExample:
          value: E9293
          subtype: AGE
          domainId: Condition
        parentExample:
          value: E979-E979.9
          subtype: BP_EHR
    Attribute:
      required:
        - name
        - operands
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AttrName'
        operator:
          $ref: '#/components/schemas/Operator'
        operands:
          type: array
          items:
            type: string
        conceptId:
          type: integer
          description: The concept id that maps to concept table.
          format: int64
      example:
        singleValued:
          operator: GTE
          operands:
            - "20"
        multiValued:
          operator: BETWEEN
          operands:
            - "18"
            - "35"
    Modifier:
      required:
        - name
        - operands
        - operator
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ModifierType'
        operator:
          $ref: '#/components/schemas/Operator'
        operands:
          type: array
          items:
            type: string
      example:
        singleValued:
          name: AGE_AT_EVENT
          operator: GREATER_THAN_OR_EQUAL_TO
          operands:
            - "20"
    ModifierType:
      type: string
      description: possible types of modifiers
      enum:
        - AGE_AT_EVENT
        - NUM_OF_OCCURRENCES
        - EVENT_DATE
        - ENCOUNTERS
    CriteriaType:
      type: string
      description: possible criteria types
      enum:
        - AGE
        - ATC
        - BRAND
        - CPT4
        - DECEASED
        - ETHNICITY
        - GENDER
        - HCPCS
        - ICD10CM
        - ICD10PCS
        - ICD9CM
        - ICD9Proc
        - LOINC
        - PPI
        - RACE
        - RXNORM
        - SEX
        - SNOMED
        - VISIT
    CriteriaSubType:
      type: string
      description: possible criteria types
      enum:
        - ANSWER
        - BMI
        - BP
        - CLIN
        - HC
        - HEIGHT
        - HR
        - HR-DETAIL
        - HR-IRR
        - HR-NOIRR
        - LAB
        - PREG
        - QUESTION
        - SURVEY
        - WC
        - WEIGHT
        - WHEEL
    TemporalMention:
      type: string
      description: Mentions refer to occurrences of entry date per person
      enum:
        - ANY_MENTION
        - FIRST_MENTION
        - LAST_MENTION
    TemporalTime:
      type: string
      description: time refers to the amount of time in reference to temporal mentions
      enum:
        - DURING_SAME_ENCOUNTER_AS
        - X_DAYS_BEFORE
        - X_DAYS_AFTER
        - WITHIN_X_DAYS_OF
    AttrName:
      type: string
      description: Name that descibes the type of attribute
      enum:
        - ANY
        - NUM
        - CAT
        - AGE
        - AGE_AT_CONSENT
        - AGE_AT_CDR
    AgeType:
      type: string
      description: Different age types
      enum:
        - AGE
        - AGE_AT_CONSENT
        - AGE_AT_CDR
    GenderOrSexType:
      type: string
      description: represents gender or sex at birth
      enum:
        - GENDER
        - SEX_AT_BIRTH
    DemoChartInfoListResponse:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DemoChartInfo'
    DemoChartInfo:
      required:
        - ageRange
        - count
        - name
        - race
      type: object
      properties:
        name:
          type: string
          description: gender or sex at birth of subject
        race:
          type: string
          description: race of subject
        ageRange:
          type: string
          description: age range of subject
        count:
          type: integer
          description: number of subjects
          format: int64
    ParticipantDemographics:
      required:
        - ethnicityList
        - genderList
        - raceList
      type: object
      properties:
        genderList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
        raceList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
        ethnicityList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
    ConceptIdName:
      required:
        - conceptId
        - conceptName
      type: object
      properties:
        conceptId:
          type: integer
          format: int64
        conceptName:
          type: string
  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    conceptSetId:
      name: conceptSetId
      in: path
      description: Concept set ID
      required: true
      schema:
        type: integer
        format: int64
    dataSetId:
      name: dataSetId
      in: path
      description: Data set ID
      required: true
      schema:
        type: integer
        format: int64
    workspaceNamespace:
      name: workspaceNamespace
      in: path
      description: The Workspace namespace
      required: true
      schema:
        type: string
    workspaceId:
      name: workspaceId
      in: path
      description: The Workspace ID (a.k.a. the workspace's Firecloud name)
      required: true
      schema:
        type: string
    cohortId:
      name: cohortId
      in: path
      description: Cohort ID
      required: true
      schema:
        type: integer
        format: int64
    cohortReviewId:
      name: cohortReviewId
      in: path
      description: Cohort Review ID
      required: true
      schema:
        type: integer
        format: int64
    cdrVersionId:
      name: cdrVersionId
      in: path
      description: specifies which cdr version
      required: true
      schema:
        type: integer
        format: int64
    participantId:
      name: participantId
      in: path
      description: specifies which participant
      required: true
      schema:
        type: integer
        format: int64
  securitySchemes:
    aou_oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://because-i-said-so.pmi-ops.org
          tokenUrl: https://jrr-token.pmi-ops.org
          scopes: {}
      x-aou-note: |
        Establish the fact that *some endpoints* are OAuth protected
        by defining an `aou_oauth` security mode, which we'll assigning
        to any protected endpoints below.

        TODO: Vet/fix this token and/or authorization URL to work in practice.
        These are currently included simply to satisfy the Swagger specification,
        as this is not directly used to dictate oauth details (just used to
        annotate which methods require oauth).

        The aou_auth entry under security (below) serves to establish the fact
        that all endpoints are protected: this annotation ensures that client
        libraries know to send bearer tokens when calling.

        For OpenAPI 3 conversion, we need to populate these URLs even if we don't
        use them.
x-aou-note: |
  This file is for endpoints we do NOT intend to generate client libraries for
  and advertise to notebook developers. Endpoints we DO want notebook developers to use should
  go in client_api.yaml.

  This file references parameters, paths, and definitions specified in
  client_api.yaml; the two files get merged together into a merged.yaml file at build time.

  If validation fails, gradle:generateApi fails claiming this file does not exist.

  For separate validation (with some false positives), do:
  ./project.rb validate-swagger
