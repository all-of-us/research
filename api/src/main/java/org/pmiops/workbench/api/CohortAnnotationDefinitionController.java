package org.pmiops.workbench.api;

import org.pmiops.workbench.db.dao.CohortAnnotationDefinitionDao;
import org.pmiops.workbench.model.CohortAnnotationDefinition;
import org.pmiops.workbench.model.CohortAnnotationDefinitionListResponse;
import org.pmiops.workbench.model.EmptyResponse;
import org.pmiops.workbench.model.ModifyCohortAnnotationDefinitionRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.function.Function;

public class CohortAnnotationDefinitionController implements CohortAnnotationDefinitionApiDelegate {

    private CohortAnnotationDefinitionDao cohortAnnotationDefinitionDao;

    /**
     * Converter function from backend representation (used with Hibernate) to
     * client representation (generated by Swagger).
     */
    private static final Function<org.pmiops.workbench.db.model.CohortAnnotationDefinition, CohortAnnotationDefinition>
            TO_CLIENT_COHORT_ANNOTATION_DEFINITION =
            new Function<org.pmiops.workbench.db.model.CohortAnnotationDefinition, org.pmiops.workbench.model.CohortAnnotationDefinition>() {
                @Override
                public org.pmiops.workbench.model.CohortAnnotationDefinition apply(org.pmiops.workbench.db.model.CohortAnnotationDefinition cohortAnnotationDefinition) {
                    return new org.pmiops.workbench.model.CohortAnnotationDefinition()
                            .name(cohortAnnotationDefinition.getColumnName())
                            .cohortId(cohortAnnotationDefinition.getCohortId())
                            .annotationType(cohortAnnotationDefinition.getAnnotationType())
                            .cohortAnnotationDefinitionId(cohortAnnotationDefinition.getCohortAnnotationDefinitionId());
                }
            };

    @Autowired
    CohortAnnotationDefinitionController(CohortAnnotationDefinitionDao cohortAnnotationDefinitionDao) {
        this.cohortAnnotationDefinitionDao = cohortAnnotationDefinitionDao;
    }

    @Override
    public ResponseEntity<CohortAnnotationDefinition> createCohortAnnotationDefinition(String workspaceNamespace,
                                                                                       String workspaceId,
                                                                                       Long cohortId,
                                                                                       CohortAnnotationDefinition request) {
        return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).body(new CohortAnnotationDefinition());
    }

    @Override
    public ResponseEntity<EmptyResponse> deleteCohortAnnotationDefinition(String workspaceNamespace, String workspaceId, Long cohortId, Long annotationDefinitionId) {
        return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).body(new EmptyResponse());
    }

    @Override
    public ResponseEntity<CohortAnnotationDefinitionListResponse> getCohortAnnotationDefinitions(String workspaceNamespace, String workspaceId, Long cohortId) {
        return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).body(new CohortAnnotationDefinitionListResponse());
    }

    @Override
    public ResponseEntity<CohortAnnotationDefinition> updateCohortAnnotationDefinition(String workspaceNamespace, String workspaceId, Long cohortId, Long annotationDefinitionId, ModifyCohortAnnotationDefinitionRequest modifyCohortAnnotationDefinitionRequest) {
        return ResponseEntity.status(HttpStatus.NOT_IMPLEMENTED).body(new CohortAnnotationDefinition());
    }
}
