package org.pmiops.workbench.api;


import io.swagger.annotations.ApiParam;
import org.pmiops.workbench.cdr.dao.ConceptDao;
import org.pmiops.workbench.cdr.model.Concept;
import org.pmiops.workbench.cohortbuilder.QueryBuilderFactory;
import org.pmiops.workbench.cohortbuilder.SubjectCounter;
import org.pmiops.workbench.cohortbuilder.querybuilder.AbstractQueryBuilder;
import org.pmiops.workbench.cohortbuilder.querybuilder.FactoryKey;
import org.pmiops.workbench.cohortbuilder.querybuilder.QueryParameters;
import org.pmiops.workbench.config.WorkbenchConfig;
import org.pmiops.workbench.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.inject.Provider;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.logging.Logger;
import java.util.stream.Collectors;

@RestController
public class DataBrowserController implements DataBrowserApiDelegate {


    @Autowired
    private ConceptDao conceptDao;


    private static final Logger log = Logger.getLogger(DataBrowserController.class.getName());

    /**
     * Converter function from backend representation (used with Hibernate) to
     * client representation (generated by Swagger).
     */
    private static final Function<Concept, org.pmiops.workbench.model.Concept>
            TO_CLIENT_CONCEPT =
            new Function<Concept, org.pmiops.workbench.model.Concept>() {
                @Override
                public org.pmiops.workbench.model.Concept apply(Concept concept) {
                    return new org.pmiops.workbench.model.Concept()
                                .conceptId(concept.getConceptId())
                                .conceptName(concept.getConceptName())
                                .standardConcept(concept.getStandardConcept())
                                .conceptCode(concept.getConceptCode())
                                .conceptClassId(concept.getConceptClassId())
                                .vocabularyId(concept.getVocabularyId())
                                .domainId(concept.getDomainId())
                                .count(concept.getCount())
                                .prevalence(concept.getPrevalence());
                }
            };



    /**
     * This method searches concepts
     *
     * @param conceptName
     * @param standardConcept
     * @param concept_code
     * @param vocabulary_id
     * @param domain_id
     * @return
     */
    @Override
    public ResponseEntity<ConceptListResponse> getConceptsSearch(
            String conceptName,
            String standardConcept,
            String concept_code,
            String vocabulary_id,
            String domain_id) {

        final List<Concept> conceptList = conceptDao.findConceptLikeName(conceptName);
        ConceptListResponse resp = new ConceptListResponse();
        resp.setItems(conceptList.stream().map(TO_CLIENT_CONCEPT).collect(Collectors.toList()));

        return ResponseEntity.ok(resp);
    }

    /**
     * This method searches concepts
     *
     * @param analysisId
     * @param stratum1
     * @param stratum2
     * @param stratum3
     * @param stratum4
     * @param stratum5
     * @return
     */
    @Override
    public ResponseEntity<AnalysisResultListResponse> getAnalysisResults(
            Integer analysisId,
            String stratum1,
            String stratum2,
            String stratum3,
            String stratum4,
            String stratum5) {


       /* final List<Concept> conceptList = conceptDao.findConceptLikeName(conceptName);
        ConceptListResponse resp = new ConceptListResponse();
        resp.setItems(conceptList.stream().map(TO_CLIENT_CONCEPT).collect(Collectors.toList()));

        return ResponseEntity.ok(resp);*/
    }
}
