package org.pmiops.workbench.api;

import org.pmiops.workbench.cdr.model.Criteria;
import org.pmiops.workbench.db.dao.ParticipantDao;
import org.pmiops.workbench.model.CriteriaListResponse;
import org.pmiops.workbench.db.model.Participant;
import org.pmiops.workbench.model.ParticipantListResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;

public class CohortReviewController implements CohortReviewApiDelegate {

    public static final String STATUS = "status";
    public static final String PARTICIPANT_ID = "participantKey.participantId";
    public static final Integer PAGE = 0;
    public static final Integer LIMIT = 25;

    @Autowired
    private ParticipantDao participantDao;

    /**
     * Converter function from backend representation (used with Hibernate) to
     * client representation (generated by Swagger).
     */
    private static final Function<Participant, org.pmiops.workbench.model.Participant>
            TO_CLIENT_PARTICIPANT =
            new Function<Participant, org.pmiops.workbench.model.Participant>() {
                @Override
                public org.pmiops.workbench.model.Participant apply(Participant participant) {
                    return new org.pmiops.workbench.model.Participant()
                            .participantId(participant.getParticipantKey().getParticipantId())
                            .status(participant.getStatus());
                }
            };

    /**
     * Get all participants for the specified cohortId and cdrVersionId.
     *
     * @param cohortId
     * @param cdrVersionId
     * @param page
     * @param limit
     * @param order
     * @param column
     * @return
     */
    @Override
    public ResponseEntity<ParticipantListResponse>
    getParticipants(Long cohortId, Long cdrVersionId, Integer page, Integer limit, String order, String column) {

        int pageParam = Optional.ofNullable(page).orElse(PAGE);
        int limitParam = Optional.ofNullable(limit).orElse(LIMIT);
        Sort.Direction orderParam = Sort.Direction.fromString(Optional.ofNullable(order)
                .filter(o -> o.equalsIgnoreCase("DESC")).orElse("ASC"));
        String columnParam = Optional.ofNullable(column)
                .filter(o -> o.equalsIgnoreCase(STATUS)).orElse(PARTICIPANT_ID);

        final Sort sort = new Sort(orderParam, columnParam);
        final PageRequest pageRequest = new PageRequest(pageParam, limitParam, sort);
        final List<Participant> participantList =
                participantDao.findParticipantByParticipantKey_CohortIdAndParticipantKey_CdrVersionId(
                        cohortId,
                        cdrVersionId,
                        pageRequest)
                        .getContent();

        ParticipantListResponse participantResponse = new ParticipantListResponse();
        participantResponse.setItems(participantList.stream().map(TO_CLIENT_PARTICIPANT).collect(Collectors.toList()));

        return ResponseEntity.ok(participantResponse);
    }
}
