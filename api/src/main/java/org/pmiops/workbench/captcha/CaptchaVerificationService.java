package org.pmiops.workbench.captcha;

import java.net.URI;
import org.pmiops.workbench.config.WorkbenchConfig;
import org.pmiops.workbench.google.CloudStorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

/** Service to verify Captcha */
@Service
public class CaptchaVerificationService {

  final String captchaVerificationUrl =
      "https://www.google.com/recaptcha/api/siteverify?secret=%s&response=%s";

  private CloudStorageService cloudStorageService;
  final javax.inject.Provider<WorkbenchConfig> configProvider;

  @Bean
  public RestTemplate restTemplate() {
    return new RestTemplate();
  }

  @Autowired
  public CaptchaVerificationService(
      CloudStorageService cloudStorageService,
      javax.inject.Provider<WorkbenchConfig> configProvider) {
    this.cloudStorageService = cloudStorageService;
    this.configProvider = configProvider;
  }

  /**
   * Calls google api to verify Captcha Response by sending the captcha Server key associated with
   * host and the token generated by the user response on front end. Returns true if valid else
   * false
   *
   * @param responseToken
   * @return if Captcha is valid
   */
  public boolean verifyCaptcha(String responseToken) {
    URI verifyUri =
        URI.create(
            String.format(
                captchaVerificationUrl, cloudStorageService.getCaptchaServerKey(), responseToken));
    CaptchaServerVerificationResponse response =
        restTemplate().getForObject(verifyUri, CaptchaServerVerificationResponse.class);

    String uiUrl = configProvider.get().admin.loginUrl;
    return response.isSuccess() && uiUrl.contains(response.getHostname());
  }
}
