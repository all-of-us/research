/*
 * Leonardo
 * Workbench notebooks service. 
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.pmiops.workbench.notebooks.api;

import org.pmiops.workbench.notebooks.ApiCallback;
import org.pmiops.workbench.notebooks.ApiClient;
import org.pmiops.workbench.notebooks.ApiException;
import org.pmiops.workbench.notebooks.ApiResponse;
import org.pmiops.workbench.notebooks.Configuration;
import org.pmiops.workbench.notebooks.Pair;
import org.pmiops.workbench.notebooks.ProgressRequestBody;
import org.pmiops.workbench.notebooks.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.pmiops.workbench.notebooks.model.Cluster;
import org.pmiops.workbench.notebooks.model.ClusterRequest;
import org.pmiops.workbench.notebooks.model.ErrorReport;
import org.pmiops.workbench.notebooks.model.ListClusterResponse;
import org.pmiops.workbench.notebooks.model.UpdateClusterRequest;

import io.opencensus.common.Scope;
import io.opencensus.trace.AttributeValue;
import io.opencensus.trace.Span;
import io.opencensus.trace.Status;
import io.opencensus.trace.Tracer;
import io.opencensus.trace.Tracing;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClusterApi {
    private static final Tracer tracer = Tracing.getTracer();
    private ApiClient apiClient;

    public ClusterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClusterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param clusterRequest Request for new cluster (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterCall(String googleProject, String clusterName, ClusterRequest clusterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterRequest;

        // create path and map variables
        String localVarPath = "/api/cluster/{googleProject}/{clusterName}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterValidateBeforeCall(String googleProject, String clusterName, ClusterRequest clusterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling createCluster(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling createCluster(Async)");
        }
        
        // verify the required parameter 'clusterRequest' is set
        if (clusterRequest == null) {
            throw new ApiException("Missing the required parameter 'clusterRequest' when calling createCluster(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterCall(googleProject, clusterName, clusterRequest, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Creates a new Dataproc cluster in the given project with the given name
     * Default labels clusterName, googleProject, serviceAccount, and notebookExtension cannot be overridden.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param clusterRequest Request for new cluster (required)
     * @return Cluster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Cluster createCluster(String googleProject, String clusterName, ClusterRequest clusterRequest) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.createCluster", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/cluster/{googleProject}/{clusterName}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("PUT"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Creates a new Dataproc cluster in the given project with the given name"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("Cluster"));

        try {
            // Create and execute the API request.
            ApiResponse<Cluster> resp = createClusterWithHttpInfo(googleProject, clusterName, clusterRequest);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Creates a new Dataproc cluster in the given project with the given name
     * Default labels clusterName, googleProject, serviceAccount, and notebookExtension cannot be overridden.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param clusterRequest Request for new cluster (required)
     * @return ApiResponse&lt;Cluster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Cluster> createClusterWithHttpInfo(String googleProject, String clusterName, ClusterRequest clusterRequest) throws ApiException {
        com.squareup.okhttp.Call call = createClusterValidateBeforeCall(googleProject, clusterName, clusterRequest, null, null);
        Type localVarReturnType = new TypeToken<Cluster>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new Dataproc cluster in the given project with the given name (asynchronously)
     * Default labels clusterName, googleProject, serviceAccount, and notebookExtension cannot be overridden.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param clusterRequest Request for new cluster (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterAsync(String googleProject, String clusterName, ClusterRequest clusterRequest, final ApiCallback<Cluster> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterValidateBeforeCall(googleProject, clusterName, clusterRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Cluster>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createClusterV2
     * @param googleProject googleProject (required)
     * @param clusterName clusterName. only lowercase alphanumeric characters, numbers and dashes are allowed in cluster name (required)
     * @param clusterRequest Request for new cluster (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createClusterV2Call(String googleProject, String clusterName, ClusterRequest clusterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clusterRequest;

        // create path and map variables
        String localVarPath = "/api/cluster/v2/{googleProject}/{clusterName}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createClusterV2ValidateBeforeCall(String googleProject, String clusterName, ClusterRequest clusterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling createClusterV2(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling createClusterV2(Async)");
        }
        
        // verify the required parameter 'clusterRequest' is set
        if (clusterRequest == null) {
            throw new ApiException("Missing the required parameter 'clusterRequest' when calling createClusterV2(Async)");
        }
        

        com.squareup.okhttp.Call call = createClusterV2Call(googleProject, clusterName, clusterRequest, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Creates a new Dataproc cluster in the given project with the given name.
     * * The request is completed without waiting for the initiation of the cluster&#39;s creation on the Google side.   This reduces the response time compared with the other version. * Default labels clusterName, googleProject, serviceAccount, and notebookExtension cannot be overridden. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName. only lowercase alphanumeric characters, numbers and dashes are allowed in cluster name (required)
     * @param clusterRequest Request for new cluster (required)
     * @return Cluster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Cluster createClusterV2(String googleProject, String clusterName, ClusterRequest clusterRequest) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.createClusterV2", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/cluster/v2/{googleProject}/{clusterName}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("PUT"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Creates a new Dataproc cluster in the given project with the given name."));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("Cluster"));

        try {
            // Create and execute the API request.
            ApiResponse<Cluster> resp = createClusterV2WithHttpInfo(googleProject, clusterName, clusterRequest);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Creates a new Dataproc cluster in the given project with the given name.
     * * The request is completed without waiting for the initiation of the cluster&#39;s creation on the Google side.   This reduces the response time compared with the other version. * Default labels clusterName, googleProject, serviceAccount, and notebookExtension cannot be overridden. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName. only lowercase alphanumeric characters, numbers and dashes are allowed in cluster name (required)
     * @param clusterRequest Request for new cluster (required)
     * @return ApiResponse&lt;Cluster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Cluster> createClusterV2WithHttpInfo(String googleProject, String clusterName, ClusterRequest clusterRequest) throws ApiException {
        com.squareup.okhttp.Call call = createClusterV2ValidateBeforeCall(googleProject, clusterName, clusterRequest, null, null);
        Type localVarReturnType = new TypeToken<Cluster>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new Dataproc cluster in the given project with the given name. (asynchronously)
     * * The request is completed without waiting for the initiation of the cluster&#39;s creation on the Google side.   This reduces the response time compared with the other version. * Default labels clusterName, googleProject, serviceAccount, and notebookExtension cannot be overridden. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName. only lowercase alphanumeric characters, numbers and dashes are allowed in cluster name (required)
     * @param clusterRequest Request for new cluster (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createClusterV2Async(String googleProject, String clusterName, ClusterRequest clusterRequest, final ApiCallback<Cluster> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createClusterV2ValidateBeforeCall(googleProject, clusterName, clusterRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Cluster>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteClusterCall(String googleProject, String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/cluster/{googleProject}/{clusterName}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteClusterValidateBeforeCall(String googleProject, String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling deleteCluster(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling deleteCluster(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteClusterCall(googleProject, clusterName, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Deletes an existing Dataproc cluster in the given project
     * deletes a Dataproc cluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCluster(String googleProject, String clusterName) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.deleteCluster", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/cluster/{googleProject}/{clusterName}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("DELETE"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Deletes an existing Dataproc cluster in the given project"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));

        try {
            // Create and execute the API request.
            deleteClusterWithHttpInfo(googleProject, clusterName);
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Deletes an existing Dataproc cluster in the given project
     * deletes a Dataproc cluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteClusterWithHttpInfo(String googleProject, String clusterName) throws ApiException {
        com.squareup.okhttp.Call call = deleteClusterValidateBeforeCall(googleProject, clusterName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes an existing Dataproc cluster in the given project (asynchronously)
     * deletes a Dataproc cluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteClusterAsync(String googleProject, String clusterName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteClusterValidateBeforeCall(googleProject, clusterName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClusterCall(String googleProject, String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/cluster/{googleProject}/{clusterName}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClusterValidateBeforeCall(String googleProject, String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling getCluster(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling getCluster(Async)");
        }
        

        com.squareup.okhttp.Call call = getClusterCall(googleProject, clusterName, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Get details of a Dataproc cluster
     * Returns information about an existing Dataproc cluster managed by Leo. Poll this to find out when your cluster has finished starting up.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @return Cluster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Cluster getCluster(String googleProject, String clusterName) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.getCluster", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/cluster/{googleProject}/{clusterName}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("GET"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Get details of a Dataproc cluster"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("Cluster"));

        try {
            // Create and execute the API request.
            ApiResponse<Cluster> resp = getClusterWithHttpInfo(googleProject, clusterName);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Get details of a Dataproc cluster
     * Returns information about an existing Dataproc cluster managed by Leo. Poll this to find out when your cluster has finished starting up.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @return ApiResponse&lt;Cluster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Cluster> getClusterWithHttpInfo(String googleProject, String clusterName) throws ApiException {
        com.squareup.okhttp.Call call = getClusterValidateBeforeCall(googleProject, clusterName, null, null);
        Type localVarReturnType = new TypeToken<Cluster>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get details of a Dataproc cluster (asynchronously)
     * Returns information about an existing Dataproc cluster managed by Leo. Poll this to find out when your cluster has finished starting up.
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClusterAsync(String googleProject, String clusterName, final ApiCallback<Cluster> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClusterValidateBeforeCall(googleProject, clusterName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Cluster>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listClusters
     * @param labels Optional label key-value pairs to filter results by. Example: Querying by key1&#x3D;val1,key2&#x3D;val2 returns all clusters that contain the key1/val1 and key2/val2 labels (possibly among other labels). Note: this string format is a workaround because Swagger doesn&#39;t support free-form query string parameters. The recommended way to use this endpoint is to specify the labels as top-level query string parameters. For instance: GET /api/clusters?key1&#x3D;val1&amp;key2&#x3D;val2.  (optional)
     * @param includeDeleted Optional filter that includes any clusters with a Deleted status. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listClustersCall(String labels, Boolean includeDeleted, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (labels != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_labels", labels));
        if (includeDeleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeDeleted", includeDeleted));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listClustersValidateBeforeCall(String labels, Boolean includeDeleted, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listClustersCall(labels, includeDeleted, progressListener, progressRequestListener);
        return call;





    }

    /**
     * List all active clusters
     * List all active clusters, optionally filtering on a set of labels
     * @param labels Optional label key-value pairs to filter results by. Example: Querying by key1&#x3D;val1,key2&#x3D;val2 returns all clusters that contain the key1/val1 and key2/val2 labels (possibly among other labels). Note: this string format is a workaround because Swagger doesn&#39;t support free-form query string parameters. The recommended way to use this endpoint is to specify the labels as top-level query string parameters. For instance: GET /api/clusters?key1&#x3D;val1&amp;key2&#x3D;val2.  (optional)
     * @param includeDeleted Optional filter that includes any clusters with a Deleted status. (optional, default to false)
     * @return List&lt;ListClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ListClusterResponse> listClusters(String labels, Boolean includeDeleted) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.listClusters", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/clusters"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("GET"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("List all active clusters"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("List<ListClusterResponse>"));

        try {
            // Create and execute the API request.
            ApiResponse<List<ListClusterResponse>> resp = listClustersWithHttpInfo(labels, includeDeleted);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * List all active clusters
     * List all active clusters, optionally filtering on a set of labels
     * @param labels Optional label key-value pairs to filter results by. Example: Querying by key1&#x3D;val1,key2&#x3D;val2 returns all clusters that contain the key1/val1 and key2/val2 labels (possibly among other labels). Note: this string format is a workaround because Swagger doesn&#39;t support free-form query string parameters. The recommended way to use this endpoint is to specify the labels as top-level query string parameters. For instance: GET /api/clusters?key1&#x3D;val1&amp;key2&#x3D;val2.  (optional)
     * @param includeDeleted Optional filter that includes any clusters with a Deleted status. (optional, default to false)
     * @return ApiResponse&lt;List&lt;ListClusterResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ListClusterResponse>> listClustersWithHttpInfo(String labels, Boolean includeDeleted) throws ApiException {
        com.squareup.okhttp.Call call = listClustersValidateBeforeCall(labels, includeDeleted, null, null);
        Type localVarReturnType = new TypeToken<List<ListClusterResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all active clusters (asynchronously)
     * List all active clusters, optionally filtering on a set of labels
     * @param labels Optional label key-value pairs to filter results by. Example: Querying by key1&#x3D;val1,key2&#x3D;val2 returns all clusters that contain the key1/val1 and key2/val2 labels (possibly among other labels). Note: this string format is a workaround because Swagger doesn&#39;t support free-form query string parameters. The recommended way to use this endpoint is to specify the labels as top-level query string parameters. For instance: GET /api/clusters?key1&#x3D;val1&amp;key2&#x3D;val2.  (optional)
     * @param includeDeleted Optional filter that includes any clusters with a Deleted status. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listClustersAsync(String labels, Boolean includeDeleted, final ApiCallback<List<ListClusterResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listClustersValidateBeforeCall(labels, includeDeleted, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ListClusterResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listClustersByProject
     * @param googleProject googleProject (required)
     * @param labels Optional label key-value pairs to filter results by. Example: Querying by key1&#x3D;val1,key2&#x3D;val2 returns all clusters that contain the key1/val1 and key2/val2 labels (possibly among other labels). Note: this string format is a workaround because Swagger doesn&#39;t support free-form query string parameters. The recommended way to use this endpoint is to specify the labels as top-level query string parameters. For instance: GET /api/clusters?key1&#x3D;val1&amp;key2&#x3D;val2.  (optional)
     * @param includeDeleted Optional filter that includes any clusters with a Deleted status. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listClustersByProjectCall(String googleProject, String labels, Boolean includeDeleted, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/clusters/{googleProject}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (labels != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "_labels", labels));
        if (includeDeleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeDeleted", includeDeleted));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listClustersByProjectValidateBeforeCall(String googleProject, String labels, Boolean includeDeleted, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling listClustersByProject(Async)");
        }
        

        com.squareup.okhttp.Call call = listClustersByProjectCall(googleProject, labels, includeDeleted, progressListener, progressRequestListener);
        return call;





    }

    /**
     * List all active clusters within the given Google project
     * List all active clusters within the given Google project, optionally filtering on a set of labels
     * @param googleProject googleProject (required)
     * @param labels Optional label key-value pairs to filter results by. Example: Querying by key1&#x3D;val1,key2&#x3D;val2 returns all clusters that contain the key1/val1 and key2/val2 labels (possibly among other labels). Note: this string format is a workaround because Swagger doesn&#39;t support free-form query string parameters. The recommended way to use this endpoint is to specify the labels as top-level query string parameters. For instance: GET /api/clusters?key1&#x3D;val1&amp;key2&#x3D;val2.  (optional)
     * @param includeDeleted Optional filter that includes any clusters with a Deleted status. (optional, default to false)
     * @return List&lt;ListClusterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ListClusterResponse> listClustersByProject(String googleProject, String labels, Boolean includeDeleted) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.listClustersByProject", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/clusters/{googleProject}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("GET"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("List all active clusters within the given Google project"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("List<ListClusterResponse>"));

        try {
            // Create and execute the API request.
            ApiResponse<List<ListClusterResponse>> resp = listClustersByProjectWithHttpInfo(googleProject, labels, includeDeleted);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * List all active clusters within the given Google project
     * List all active clusters within the given Google project, optionally filtering on a set of labels
     * @param googleProject googleProject (required)
     * @param labels Optional label key-value pairs to filter results by. Example: Querying by key1&#x3D;val1,key2&#x3D;val2 returns all clusters that contain the key1/val1 and key2/val2 labels (possibly among other labels). Note: this string format is a workaround because Swagger doesn&#39;t support free-form query string parameters. The recommended way to use this endpoint is to specify the labels as top-level query string parameters. For instance: GET /api/clusters?key1&#x3D;val1&amp;key2&#x3D;val2.  (optional)
     * @param includeDeleted Optional filter that includes any clusters with a Deleted status. (optional, default to false)
     * @return ApiResponse&lt;List&lt;ListClusterResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ListClusterResponse>> listClustersByProjectWithHttpInfo(String googleProject, String labels, Boolean includeDeleted) throws ApiException {
        com.squareup.okhttp.Call call = listClustersByProjectValidateBeforeCall(googleProject, labels, includeDeleted, null, null);
        Type localVarReturnType = new TypeToken<List<ListClusterResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all active clusters within the given Google project (asynchronously)
     * List all active clusters within the given Google project, optionally filtering on a set of labels
     * @param googleProject googleProject (required)
     * @param labels Optional label key-value pairs to filter results by. Example: Querying by key1&#x3D;val1,key2&#x3D;val2 returns all clusters that contain the key1/val1 and key2/val2 labels (possibly among other labels). Note: this string format is a workaround because Swagger doesn&#39;t support free-form query string parameters. The recommended way to use this endpoint is to specify the labels as top-level query string parameters. For instance: GET /api/clusters?key1&#x3D;val1&amp;key2&#x3D;val2.  (optional)
     * @param includeDeleted Optional filter that includes any clusters with a Deleted status. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listClustersByProjectAsync(String googleProject, String labels, Boolean includeDeleted, final ApiCallback<List<ListClusterResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listClustersByProjectValidateBeforeCall(googleProject, labels, includeDeleted, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ListClusterResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startCluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startClusterCall(String googleProject, String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/cluster/{googleProject}/{clusterName}/start"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startClusterValidateBeforeCall(String googleProject, String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling startCluster(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling startCluster(Async)");
        }
        

        com.squareup.okhttp.Call call = startClusterCall(googleProject, clusterName, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Starts a Dataproc cluster
     * Starts the instances of a stopped Dataproc cluster. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void startCluster(String googleProject, String clusterName) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.startCluster", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/cluster/{googleProject}/{clusterName}/start"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("POST"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Starts a Dataproc cluster"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));

        try {
            // Create and execute the API request.
            startClusterWithHttpInfo(googleProject, clusterName);
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Starts a Dataproc cluster
     * Starts the instances of a stopped Dataproc cluster. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> startClusterWithHttpInfo(String googleProject, String clusterName) throws ApiException {
        com.squareup.okhttp.Call call = startClusterValidateBeforeCall(googleProject, clusterName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Starts a Dataproc cluster (asynchronously)
     * Starts the instances of a stopped Dataproc cluster. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startClusterAsync(String googleProject, String clusterName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startClusterValidateBeforeCall(googleProject, clusterName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for stopCluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopClusterCall(String googleProject, String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/cluster/{googleProject}/{clusterName}/stop"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopClusterValidateBeforeCall(String googleProject, String clusterName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling stopCluster(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling stopCluster(Async)");
        }
        

        com.squareup.okhttp.Call call = stopClusterCall(googleProject, clusterName, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Stops a Dataproc cluster
     * Stops the instances of a Dataproc cluster, but retains any data persisted on disk. The cluster may be restarted with the /start endpoint. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void stopCluster(String googleProject, String clusterName) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.stopCluster", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/cluster/{googleProject}/{clusterName}/stop"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("POST"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Stops a Dataproc cluster"));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));

        try {
            // Create and execute the API request.
            stopClusterWithHttpInfo(googleProject, clusterName);
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Stops a Dataproc cluster
     * Stops the instances of a Dataproc cluster, but retains any data persisted on disk. The cluster may be restarted with the /start endpoint. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> stopClusterWithHttpInfo(String googleProject, String clusterName) throws ApiException {
        com.squareup.okhttp.Call call = stopClusterValidateBeforeCall(googleProject, clusterName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stops a Dataproc cluster (asynchronously)
     * Stops the instances of a Dataproc cluster, but retains any data persisted on disk. The cluster may be restarted with the /start endpoint. 
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopClusterAsync(String googleProject, String clusterName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopClusterValidateBeforeCall(googleProject, clusterName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for updateCluster
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param updateClusterRequest Request for updated cluster (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateClusterCall(String googleProject, String clusterName, UpdateClusterRequest updateClusterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateClusterRequest;

        // create path and map variables
        String localVarPath = "/api/cluster/{googleProject}/{clusterName}"
            .replaceAll("\\{" + "googleProject" + "\\}", apiClient.escapeString(googleProject.toString()))
            .replaceAll("\\{" + "clusterName" + "\\}", apiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "googleoauth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateClusterValidateBeforeCall(String googleProject, String clusterName, UpdateClusterRequest updateClusterRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'googleProject' is set
        if (googleProject == null) {
            throw new ApiException("Missing the required parameter 'googleProject' when calling updateCluster(Async)");
        }
        
        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling updateCluster(Async)");
        }
        
        // verify the required parameter 'updateClusterRequest' is set
        if (updateClusterRequest == null) {
            throw new ApiException("Missing the required parameter 'updateClusterRequest' when calling updateCluster(Async)");
        }
        

        com.squareup.okhttp.Call call = updateClusterCall(googleProject, clusterName, updateClusterRequest, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Updates the configuration of a cluster.
     * In order to update the configuration of a cluster, it must first be running
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param updateClusterRequest Request for updated cluster (required)
     * @return Cluster
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Cluster updateCluster(String googleProject, String clusterName, UpdateClusterRequest updateClusterRequest) throws ApiException {
                // Generate an OpenCensus tracing span for this API method call.
        Scope scope = tracer.spanBuilderWithExplicitParent("ClusterApi.updateCluster", tracer.getCurrentSpan())
            .setSpanKind(Span.Kind.CLIENT).startScopedSpan();
        Span span = tracer.getCurrentSpan();
        // Some of these attribute keys use naming from the OpenCensus standard. See
        // https://github.com/census-instrumentation/opencensus-specs/blob/master/trace/HTTP.md
        span.putAttribute("package", AttributeValue.stringAttributeValue("org.pmiops.workbench.notebooks.api"));
        span.putAttribute("http.host", AttributeValue.stringAttributeValue(apiClient.getBasePath()));
        span.putAttribute("http.path", AttributeValue.stringAttributeValue("/api/cluster/{googleProject}/{clusterName}"));
        span.putAttribute("http.method", AttributeValue.stringAttributeValue("PATCH"));
        span.putAttribute("description", AttributeValue.stringAttributeValue("Updates the configuration of a cluster."));
        span.putAttribute("connectionTimeout", AttributeValue.longAttributeValue(apiClient.getConnectTimeout()));
            span.putAttribute("responseType", AttributeValue.stringAttributeValue("Cluster"));

        try {
            // Create and execute the API request.
            ApiResponse<Cluster> resp = updateClusterWithHttpInfo(googleProject, clusterName, updateClusterRequest);
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(resp.getStatusCode()));
            return resp.getData();
        } catch (ApiException e) {
            // We could be more intelligent about aligning HTTP error codes with OpenCensus canonical
            // status codes... but this is for tracing purposes, not logging / deeper debugging, so we'll
            // be lazy and use UNKNOWN, including the actual code as an attribute.
            span.setStatus(Status.UNKNOWN.withDescription(e.getMessage()));
            span.putAttribute("http.status_code", AttributeValue.longAttributeValue(e.getCode()));
            span.putAttribute("errorMessage", AttributeValue.stringAttributeValue(e.getMessage()));
            throw e;
        } finally {
            scope.close();
        }

    }

    /**
     * Updates the configuration of a cluster.
     * In order to update the configuration of a cluster, it must first be running
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param updateClusterRequest Request for updated cluster (required)
     * @return ApiResponse&lt;Cluster&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Cluster> updateClusterWithHttpInfo(String googleProject, String clusterName, UpdateClusterRequest updateClusterRequest) throws ApiException {
        com.squareup.okhttp.Call call = updateClusterValidateBeforeCall(googleProject, clusterName, updateClusterRequest, null, null);
        Type localVarReturnType = new TypeToken<Cluster>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the configuration of a cluster. (asynchronously)
     * In order to update the configuration of a cluster, it must first be running
     * @param googleProject googleProject (required)
     * @param clusterName clusterName (required)
     * @param updateClusterRequest Request for updated cluster (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateClusterAsync(String googleProject, String clusterName, UpdateClusterRequest updateClusterRequest, final ApiCallback<Cluster> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateClusterValidateBeforeCall(googleProject, clusterName, updateClusterRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Cluster>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
