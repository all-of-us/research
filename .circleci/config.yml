version: 2.1

# https://circleci.com/orbs/registry/
orbs:
  browser-tools: circleci/browser-tools@1.0.0

# -------------------------
#   PARAMETERS
# -------------------------
parameters:
  circleci_service_account:
    type: string
    default: "circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com"
  workbench_image:
    type: string
    default: "allofustest/workbench:buildimage-0.0.19"
  mysql_image:
    type: string
    default: "circleci/mysql:5.7"
  # CDR index generation parameters
  build_cdr_indices:
    type: boolean
    default: false
  cdr_source_project:
    type: string
    default: ''
  cdr_source_dataset:
    type: string
    default: ''
  cdr_sql_bucket:
    type: string
    default: ''
  cdr_dest_project:
    type: string
    default: ''
  cdr_version_db_name:
    type: string
    default: ''
  cdr_date:
    type: string
    default: ''

# -------------------------
#   ANCHORS
# -------------------------
anchors:
  java_env: &java_env
    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java
    # processes executed within CircleCI's docker containers will respect. Very helpful resource:
    # https://circleci.com/blog/how-to-handle-java-oom-errors/
    #
    # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,
    # so we bumped this down further to 2G.
    JAVA_TOOL_OPTIONS: -Xmx2g
    # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues
    GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process
    TERM: dumb
    MYSQL_ROOT_PASSWORD: ubuntu

  mysql_env: &mysql_env
    MYSQL_ROOT_PASSWORD: ubuntu
    MYSQL_USER: ubuntu
    MYSQL_PASSWORD: ubuntu

  e2e_env: &e2e_env
    CI: true
    NODE_ENV: development

  defaults: &defaults
    docker:
      - image: << pipeline.parameters.workbench_image >>
    working_directory: ~/workbench

  java_defaults: &java_defaults
    <<: *defaults
    environment:
      <<: *java_env

  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
  # Job runs for master branch only
  filter_only_master_branch: &filter_only_master_branch
    tags:
      ignore: /.*/
    branches:
      only: master

  # Job runs for no branch and only for tags starting with ‘v’
  filter_only_release_tags: &filter_only_release_tags
    branches:
      ignore: /.*/
    tags:
      # regex explanation:
      # "^" asserts position at start of a line.
      # "v" matches the character "v" literally (case sensitive).
      # "[0-9]+" match a single numerical digit (the + quantifier, matches between one and unlimited times, as many times as possible).
      # "-" matches the character "-" literally.
      # "rc" matches the character "rc" literally (case sensitive).
      # "$" asserts position at the end of a line.
      # Workbench release tag format example: v5-3-rc1
      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/


# -------------------------
#   COMMANDS
# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
# -------------------------
commands:
  activate_service_account_credential:
    description: "Activiate CircleCI service account credential"
    steps:
      - run:
          name: Activate CircleCI service account credential
          working_directory: ~/workbench
          # Used to call gsutil from the circle environment.
          command: ci/activate_creds.sh api/circle-sa-key.json

  checkout_init_git:
    description: "git checkout and update submodules"
    steps:
      - checkout
      - run:
          name: Update git submodules
          command: git submodule update --init --recursive

  halt_if_code_unchanged:
    description: "Halt job if no code changed"
    steps:
      - run:
          command: |
            if ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvFf .circleci/e2e-job-ignore-patterns.txt; then
              echo "Application code have not changed. halting job."
              circleci step halt
            else
              git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -vFf .circleci/e2e-job-ignore-patterns.txt
              echo "job continuing."
            fi
          name: Halt job if no code changed

  ensure_branch_has_changes:
    description: Halt job and succeed early if no code changes in << parameters.dir_name >> directory on non-master branch
    parameters:
      dir_name:
        type: enum
        enum: ["api", "ui"]
    steps:
      - run:
          command: |
            if [ ${CIRCLE_BRANCH} != "" ] &&
              [ ${CIRCLE_BRANCH} != "master" ] &&
              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then
                echo "No relevant changes in << parameters.dir_name >> directory on non-master branch. halting job."
                circleci step halt
            fi
          name: Halt job and succeed early if no code changes in << parameters.dir_name >> directory on non-master branch

  install_ui_dependencies:
    description: "workbench/ui: yarn install, save and restore cache"
    steps:
      # caching: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          name: "restore ui cache"
          keys:
            - v1-ui-cache-{{ .Branch }}-{{ checksum "~/workbench/ui/yarn.lock" }}
            - v1-ui-cache-master
            - v1-ui-cache-
      - run:
          name: "workbench/ui: yarn install dependencies"
          working_directory: ~/workbench/ui
          command: yarn install --verbose --frozen-lockfile --non-interactive
      - save_cache:
          name: "save ui cache"
          paths:
            - ~/.cache/yarn
            - ui/node_modules
          key: v1-ui-cache-{{ .Branch }}-{{ checksum "~/workbench/ui/yarn.lock" }}

  install_e2e_dependencies:
    description: "workbench/e2e: yarn install, save and restore cache"
    steps:
      - restore_cache:
          name: "restore e2e cache"
          keys:
            - v1-e2e-cache-{{ .Branch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}
            - v1-e2e-cache-master
            - v1-e2e-cache-
      - run:
          name: "workbench/e2e: yarn install dependencies"
          working_directory: ~/workbench/e2e
          command: yarn install --frozen-lockfile --non-interactive
      - save_cache:
          name: "save e2e cache"
          paths:
            - ~/.cache/yarn
            - e2e/node_modules
          key: v1-e2e-cache-{{ .Branch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}

  manage_api_cache:
    description: "workbench/api: save or restore gradle cache"
    parameters:
      save:
        type: boolean
        default: false
      restore:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.save >>
          steps:
            - save_cache:
                name: "save api gradle cache"
                # See https://docs.gradle.org/current/userguide/directory_layout.html#dir:project_root
                # Save Project-specific cache and Global cache (for everything that’s not project-specific).
                paths:
                  - .gradle
                  - ~/.gradle
                key: v3-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
      - when:
          condition: << parameters.restore >>
          steps:
            - restore_cache:
                name: "restore api gradle cache"
                keys:
                  - v3-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
                  - v3-gradle-cache-master
                  - v3-gradle-cache-

  run_e2e_test:
    description: "Run puppeteer e2e integration tests"
    parameters:
      env_name:
        description: The target environment for run Puppeteer tests. Must be one of "local", "test", "staging".
        default: "test"
        type: enum
        enum: ["local", "test", "staging"]
    steps:
      - install_e2e_dependencies
      - run:
          name: Update test user environment variables
          command: |
            case << parameters.env_name >> in
              "staging") echo 'export USER_NAME=$PUPPETEER_USER_STAGING' >> $BASH_ENV ;;
              "local" | "test") echo 'export USER_NAME=$PUPPETEER_USER_TEST' >> $BASH_ENV ;;
            esac
            echo 'export PASSWORD=$PUPPETEER_USER_PASSWORD' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Run puppeteer e2e tests
          working_directory: ~/workbench/e2e
          # parallelism used to run e2e tests
          command: |
            circleci tests glob "tests/**/*.spec.ts" | circleci tests split --split-by=timings > /tmp/tests-to-run
            yarn test:ci $(cat /tmp/tests-to-run)
          no_output_timeout: 15m
      - store_artifacts:
          path: e2e/logs
          destination: logs
      - store_test_results:
          path: ~/workbench/e2e/logs

  start_local_api:
    description: "Start local API server"
    steps:
      - manage_api_cache:
          restore: true
      - run:
          # MySQL sometimes refuses connections by the time we attempt to apply
          # data migrations. Watch the port for 2m for startup.
          name: Await MySQL startup
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 2m
      - run:
          name: Run Local Migrations
          working_directory: ~/workbench/api
          command: ./project.rb run-local-migrations
      - run:
          name: Launch local API server
          working_directory: ~/workbench/api
          # tail -f is important here, it keeps this process running indefinitely
          command: ./project.rb start-local-api && tail -f build/dev-appserver-out/dev_appserver.out
          background: true
      - run:
          name: Wait for local API server to start
          command: dockerize -wait tcp://localhost:8081/v1/status -timeout 4m

  start_local_ui:
    description: "Start local UI server"
    parameters:
      connect_local_api:
        type: boolean
        default: false
    steps:
      - install_ui_dependencies
      - when:
          condition: << parameters.connect_local_api >>
          steps:
            - run:
                name: Launch local UI server
                working_directory: ~/workbench/ui
                # Start local UI server that connects to local api server
                command: yarn dev-up --configuration=local
                background: true
      - unless:
          condition: << parameters.connect_local_api >>
          steps:
            - run:
                name: Launch local UI server
                working_directory: ~/workbench/ui
                # Start local UI server that connects to "test" api
                command: yarn dev-up
                background: true
      - run:
          name: Wait for local UI server to start
          command: dockerize -wait tcp://localhost:4200 -timeout 4m

  make_bq_denormalized_tables:
    parameters:
      data_browser:
        type: boolean
        default: false
    steps:
      - run:
          name: Make BQ denormalized tables
          working_directory: ~/workbench/api
          command: echo "./project.rb make-bq-denormalized-tables --bq-project all-of-us-ehr-dev  " \
            "--bq-dataset SR2019q4r4 --cdr-date 2020-08-25 --data-browser << parameters.data_browser >>"

# -------------------------
#        JOBS
# -------------------------
jobs:
  api-unit-test:
    parallelism: 4
    <<: *java_defaults
    steps:
      - checkout_init_git
      - ensure_branch_has_changes:
          dir_name: "api"
      - manage_api_cache:
          restore: true
      - run:
          name: Validate Swagger definitions
          working_directory: ~/workbench/api
          command: |
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./project.rb validate-swagger --project-prop verboseTestLogging=yes
            fi
      - run:
          name: Run Java genomics unit tests
          working_directory: ~/workbench/api
          command: |
            CLASSNAMES=$(circleci tests glob "genomics/src/test/java/**/*Test.java" \
              | cut -c 1- \
              | sed 's@genomics/src/test/java/@@' \
              | sed 's@/@.@g' \
              | sed 's/\.[^.]*$//' \
              | circleci tests split --split-by=timings --timings-type=classname --index=$CIRCLE_NODE_INDEX)
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests", $i }')
            gradle -p genomics test $GRADLE_ARGS
      - run:
          name: Run Java api unit tests
          working_directory: ~/workbench/api
          # See: https://circleci.com/docs/2.0/language-java/#sample-configuration
          # "circleci tests split" command provides each CircleCI node with a list of fully qualified test names to execute.
          #  JUnit XML test reports provide tests timing data. CircleCI partition tests based on timing data.
          #
          # Formatting fully qualified test names for gradle and running them with "gradle test" command. Short explanation on commands:
          #   Find all unit tests recursively in "api/src/test/java/" directories.
          #   Strips off "src/test/java/" substring;
          #   Replaces all path separator "/" with ".";
          #   Removes file extensions.
          #   Append "--tests" in front of file name.
          #
          # Example of string before formatting:
          #   src/test/java/org/pmiops/*********/monitoring/LogsBasedMetricsServiceTest.java src/test/java/org/pmiops/*********/monitoring/MonitoringServiceTest.java
          # Example of Gradle command after formatting:
          #   gradle test --tests org.pmiops.*********.monitoring.LogsBasedMetricsServiceTest --tests org.pmiops.*********.monitoring.MonitoringServiceTest
          #
          # We exclude the :genomics:test task below because otherwise gradle will attempt to run all the regular API unit tests under the genomics
          # submodule and will be unable to find them and will barf
          command: |
            CLASSNAMES=$(circleci tests glob "src/test/java/**/*Test.java" "src/test/java/**/*Test.kt" \
              | cut -c 1- \
              | sed 's@src/test/java/@@' \
              | sed 's@/@.@g' \
              | sed 's/\.[^.]*$//' \
              | circleci tests split --split-by=timings --timings-type=classname --index=$CIRCLE_NODE_INDEX)
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests", $i }')
            gradle :test $GRADLE_ARGS
      - run:
          # Lint last; it's more important to surface test failures early.
          name: Java linting
          working_directory: ~/workbench/api
          command: |
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew spotlessCheck
            fi
      - store_test_results:
           path: ~/workbench/api/build/test-results/test
      # Save JUnit test results in artifacts because it provides the timing info on tests.
      - store_artifacts:
          path: ~/workbench/api/build/test-results/test
          destination: JunitTestResult
      - manage_api_cache:
          save: true

  api-local-test:
    # The local API server starts two Java processes (the API server and the cron emulator).
    # So we want the Java memory limit to be below half of that: other things on the
    # machine need memory as well. The medium+ machine has 6GB.
    # Refers to https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: medium+
    docker:
      - image: << pipeline.parameters.workbench_image >>
      - image: << pipeline.parameters.mysql_image >>
        environment:
          <<: *mysql_env
    working_directory: ~/workbench
    environment:
      <<: *java_env
    steps:
      - checkout_init_git
      - activate_service_account_credential
      - start_local_api
      - run:
          name: Local API tests on running server
          working_directory: ~/workbench/api
          command: ./project.rb run-local-api-tests && ./project.rb stop-local-api
      - manage_api_cache:
          save: true

  api-deploy-to-test:
    <<: *java_defaults
    steps:
      - checkout_init_git
      # Note: most of the time spent here appears to be in Gradle / App Engine
      # deployment. We tried more aggressively caching outputs via Circle
      # workspaces, but that seemed to have a negligible effect on speed. It's
      # also tricky to pick specific sub directories since the API deploy
      # touches several top level folders {common,}api.
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - deploy:
          name: Deploy API to "test" App Engine
          working_directory: ~/workbench/api
          command: |
            ./project.rb deploy \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circleci_service_account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote
      - manage_api_cache:
          save: true

  api-deps-check:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - run:
          name: Scan dependencies for vulnerabilities
          working_directory: ~/workbench/api
          command: ./project.rb gradle dependencyCheckAnalyze --info

  api-integration-test:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - ensure_branch_has_changes:
          dir_name: "api"
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - run:
          name: Run Integration Tests
          working_directory: ~/workbench/api
          command: ./project.rb integration
      - store_test_results:
          path: ~/workbench/api/build/test-results/integrationTest/
      - manage_api_cache:
          save: true

  api-bigquery-test:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - ensure_branch_has_changes:
          dir_name: "api"
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - run:
          name: Run BigQuery tests
          working_directory: ~/workbench/api
          command: ./project.rb bigquerytest
      - manage_api_cache:
          save: true

  ui-unit-test:
    <<: *defaults
    steps:
      - checkout_init_git
      - ensure_branch_has_changes:
          dir_name: "ui"
      - run:
          name: Download Swagger CLI
          working_directory: ~/workbench
          command: |
            ruby -r ./aou-utils/swagger.rb -e Workbench::Swagger.download_swagger_codegen_cli
      - install_ui_dependencies
      - run:
          name: Yarn codegen
          working_directory: ~/workbench/ui
          command: yarn codegen
      - run:
          name: Run Angular tests
          working_directory: ~/workbench/ui
          command: |
            yarn test --no-watch --no-progress --browsers=ChromeHeadless
      - run:
          name: Run React jest tests
          working_directory: ~/workbench/ui
          command: |
            yarn test-react --detectOpenHandles --forceExit --runInBand
      - run:
          name: Build UI with strict compilation
          working_directory: ~/workbench/ui
          command: ./project.rb build --environment test
      - run:
          # Lint last; it's more important to surface test failures early.
          name: Lint typescript
          working_directory: ~/workbench/ui
          command: yarn run lint
      - persist_to_workspace:
          root: .
          paths:
            - ui

  ui-deploy-to-test:
    <<: *defaults
    steps:
      - checkout_init_git
      # Use "ui-unit-test" job's workspace here to avoid redoing the setup.
      - attach_workspace:
          at: .
      - install_ui_dependencies
      - activate_service_account_credential
      - deploy:
          name: Deploy UI to "test" App Engine
          working_directory: ~/workbench/ui
          command: |
            ./project.rb deploy-ui \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circleci_service_account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote

  # In staging and perf, we deploy all at once in order to track and control
  # the release for a tagged version only. In "test", we maintain individual
  # release jobs for API and UI to allow faster deploys and because we lack
  # a version tag.
  deploy-staging:
    <<: *defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - deploy:
          working_directory: ~/workbench/deploy
          name: Deploy API and UI to "staging" App Engine
          command: |
            ./project.rb deploy \
              --project all-of-us-rw-staging \
              --account << pipeline.parameters.circleci_service_account >> \
              --git-version "${CIRCLE_TAG}" \
              --app-version "${CIRCLE_TAG}" \
              --circle-url "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
              --key-file ~/workbench/api/circle-sa-key.json \
              --promote
      - manage_api_cache:
          save: true

  deploy-perf:
    <<: *defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - deploy:
          name: Deploy API and UI to "perf" App Engine
          working_directory: ~/workbench/deploy
          command: |
            ./project.rb deploy \
              --project all-of-us-rw-perf \
              --account << pipeline.parameters.circleci_service_account >> \
              --git-version "${CIRCLE_TAG}" \
              --app-version "${CIRCLE_TAG}" \
              --circle-url "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
              --key-file ~/workbench/api/circle-sa-key.json \
              --promote
      - manage_api_cache:
          save: true

  # Run Puppeteer e2e UI tests on deployed "test" or "staging" environment.
  puppeteer-e2e-test:
    parameters:
      env_name:
        description: The target environment for run Puppeteer tests. Must be one of "test", "staging".
        default: "test"
        type: enum
        enum: ["test", "staging"]
    <<: *defaults
    environment:
      <<: *e2e_env
      WORKBENCH_ENV: << parameters.env_name >>
    working_directory: ~/workbench
    parallelism: 3
    steps:
      - checkout_init_git
      - browser-tools/install-browser-tools:
          firefox-version: "78.0" # https://github.com/CircleCI-Public/browser-tools-orb/issues/14
      - run_e2e_test:
          env_name: << parameters.env_name >>

  # Deploy UI local server then run Puppeteer tests against "local ui" + "test api" environment.
  puppeteer-e2e-local-ui:
    <<: *defaults
    environment:
      <<: *e2e_env
      WORKBENCH_ENV: local
    resource_class: medium+
    working_directory: ~/workbench
    parallelism: 1
    steps:
      - checkout_init_git
      - run:
          name: Halt job if not a pull request
          command: bash .circleci/pr-skip-ci.sh
      - halt_if_code_unchanged
      - browser-tools/install-browser-tools:
          firefox-version: "78.0" # https://github.com/CircleCI-Public/browser-tools-orb/issues/14
      - start_local_ui
      - run_e2e_test:
          env_name: local

  cdr-make-bq-denormalized-tables:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - make_bq_denormalized_tables:
          data_browser: false

  cdr-make-bq-denormalized-tables-for-data-browser:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - make_bq_denormalized_tables:
          data_browser: true

  cdr-generate-private-counts:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - run:
          name: Make BQ denormalized tables
          working_directory: ~/workbench/api
          command: echo "./project.rb generate-private-cdr-counts --bq-project all-of-us-ehr-dev --bq-dataset SR2019q4r4 --workbench-project all-of-us-workbench-test --cdr-version sr_2019q4_1 --bucket all-of-us-workbench-private-cloudsql"

workflows:
  # build-test-deploy:
  #   jobs:
  #     # Always run basic test/lint/compilation (open PRs, master merge).
  #     # Note: by default tags are not picked up.
  #     - api-local-test
  #     - api-unit-test
  #     - ui-unit-test
  #     - api-bigquery-test
  #     - api-integration-test
  #     - puppeteer-e2e-local-ui
  #     # Run deployment to "test" on master merges.
  #     - api-deploy-to-test:
  #         filters: *filter_only_master_branch
  #         requires:
  #           - api-unit-test
  #     - ui-deploy-to-test:
  #         filters: *filter_only_master_branch
  #         requires:
  #           - ui-unit-test
  #     # On master branch merges, run Puppeteer tests after ui and api deployed to "test" env successfully.
  #     - puppeteer-e2e-test:
  #         filters: *filter_only_master_branch
  #         requires:
  #           - api-deploy-to-test
  #           - ui-deploy-to-test

  deploy-staging:
    jobs:
      - api-local-test:
          filters: *filter_only_release_tags
      - api-unit-test:
          filters: *filter_only_release_tags
      - ui-unit-test:
          filters: *filter_only_release_tags
      # Run slower integration tests and dep checks on release tags only.
      - api-bigquery-test:
          filters: *filter_only_release_tags
      - api-deps-check:
          filters: *filter_only_release_tags
      - api-integration-test:
          filters: *filter_only_release_tags
      - deploy-staging:
          filters: *filter_only_release_tags
          requires:
            - api-local-test
            - api-unit-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-unit-test
      - deploy-perf:
          filters: *filter_only_release_tags
          requires:
            - api-local-test
            - api-unit-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-unit-test
      # Not ready until delete workspace script is working
      # - puppeteer-e2e-test:
          # env_name: "staging"
          # filters: *filter_only_release_tags
          # requires:
            # - deploy-staging

  build-cdr-indices:
    # This only runs when launched manually via the Pipelines API.
    when: << pipeline.parameters.build_cdr_indices >>
    jobs:
      - cdr-make-bq-denormalized-tables
      - cdr-make-bq-denormalized-tables-for-data-browser
      - cdr-generate-private-counts:
          requires:
            - cdr-make-bq-denormalized-tables

  nightly-tests:
    triggers:
      - schedule:
          # Run this command once every day at 4:00AM UTC
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - api-bigquery-test

experimental:
  notify:
    branches:
      only:
        - master
