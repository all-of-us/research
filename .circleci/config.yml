version: 2.1

# -------------------------
#   ORBS
# -------------------------
# https://circleci.com/orbs/registry/
orbs:
  browser-tools: circleci/browser-tools@1.0.1

# -------------------------
#   PIPELINE PARAMETERS
# -------------------------
parameters:
  circle-service-account:
    type: string
    default: "circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com"
  workbench-image:
    type: string
    default: "allofustest/workbench:buildimage-0.0.19"
  db-image:
    type: string
    default: "circleci/mysql:5.7"

# -------------------------
#   ANCHORS
# -------------------------
anchors:
  env-default: &env-default
    JAVA_TOOL_OPTIONS: -Xmx2g
    # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues
    GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process
    TERM: dumb

  env-db: &env-db
    MYSQL_ROOT_PASSWORD: ubuntu
    MYSQL_USER: ubuntu
    MYSQL_PASSWORD: ubuntu

  env-puppeteer: &env-puppeteer
    CI: true
    NODE_ENV: development
    WORKBENCH_ENV: test
    TEST_MODE: integration

  # Job runs for master branch only
  filter-master-branch: &filter-master-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only: master

  # Job runs for no branch and only for tags starting with ‘v’
  filter-release-tags: &filter-release-tags
    filters:
      branches:
        ignore: /.*/
      tags:
        # Regex matches Workbench release tag. Example: v5-3-rc1
        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/

  # Job runs for PR branch only
  filter-pr-branch: &filter-pr-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        ignore: master

# -------------------------
#   EXECUTORS
# -------------------------
executors:
  # Default workbench docker image environment which is used in all jobs
  workbench-executor:
    environment:
      <<: *env-default
    docker:
      - image: << pipeline.parameters.workbench-image >>
    working_directory: ~/workbench

  # Default workbench environment plus MySQL database docker image
  db-executor:
    docker:
      - image: << pipeline.parameters.workbench-image >>
      - image: << pipeline.parameters.db-image >>
        environment:
          <<: *env-db
    environment:
      <<: *env-default
      <<: *env-db
    working_directory: ~/workbench

  # Environment with browsers that is used to run Puppeteer end-to-end tests
  puppeteer-executor:
    docker:
      - image: << pipeline.parameters.workbench-image >>
    working_directory: ~/workbench
    environment:
      <<: *env-puppeteer

# -------------------------
#   COMMANDS
# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
# -------------------------
commands:
  checkout-code:
    description: "git checkout and update submodules"
    steps:
      - checkout
      - run:
          command: git submodule update --init --recursive

  deploy-to-staging-perf:
    description: "Deploy API and UI to staging or perf App Engine"
    parameters:
      project_name:
        type: string
        default: ""
    steps:
      - checkout-code
      - attach_workspace:
          at: .
      - gcloud-auth-login
      - deploy:
          working_directory: ~/workbench/deploy
          command: |
            ./project.rb deploy \
              --project << parameters.project_name >> \
              --account << pipeline.parameters.circle-service-account >> \
              --git-version "${CIRCLE_TAG}" \
              --app-version "${CIRCLE_TAG}" \
              --circle-url "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
              --key-file ~/workbench/api/circle-sa-key.json \
              --promote
          name: Deploy API and UI to << parameters.project_name >> App Engine

  gcloud-auth-login:
    description: "Activiate CircleCI service account credential"
    steps:
      - run:
          working_directory: ~/workbench
          command: ci/activate_creds.sh api/circle-sa-key.json

  halt-puppeteer-check:
    description: "Skip ignored changes"
    steps:
      - run:
          name: "Skip ignored changes"
          command: |
            if ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvFf .circleci/e2e-job-ignore-patterns.txt ; then
              echo "Workbench application code are not changed."
              circleci-agent step halt
            fi
      - store-commit-message
      - run:
          name: "Halt if commit message contains 'skip e2e'"
          command: |
            echo "Git commit message: $COMMIT_MESSAGE"
            # Double comma is "Parameter Expansion". It converts string to lowercase letters
            if [[ "${COMMIT_MESSAGE,,}" == *"skip e2e"* ]]; then
              echo "Halting e2e test."
              circleci-agent step halt
            fi
      - run:
          name: "Halt if branch is not a pull request"
          command: bash .circleci/pr-skip-ci.sh

  halt-test-check:
    description: "Halt job and succeed early if no code changes detected in << parameters.dir_names >> directories on non-master branch"
    parameters:
      dir_names:
        type: string
        default: ""
    steps:
      - run:
          command: |
            if [ ${CIRCLE_BRANCH} != "" ] && [ ${CIRCLE_BRANCH} != "master" ]; then
              diff=$(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) -- api/src/main/resources | wc -l | xargs)
              if [ ${diff} -eq 0 ]; then
                changed=false
                for dir_name in << parameters.dir_names >>; do
                  dir_diff=$(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) -- ${dir_name} | wc -l | xargs)
                  if [ ${dir_diff} -gt 0 ]; then
                    changed=true
                    break
                  fi
                done
                if [[ $changed = false ]]; then
                  echo "Code in '<< parameters.dir_names >>' directories are not changed"
                  circleci-agent step halt
                fi
              fi
            fi
          name: Halt if code in '<< parameters.dir_names >>' directories are not changed

  launch-local-api:
    description: "Launch local API server"
    steps:
      - run:
          # Watch the port for 2m for MySQL start up
          name: Await MySQL startup
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 2m
      - run:
          name: Run Local Migrations
          working_directory: ~/workbench/api
          command: ./project.rb run-local-migrations
      - run:
          name: Launch local API server
          working_directory: ~/workbench/api
          # tail -f is important here, it keeps this process running indefinitely
          command: ./project.rb start-local-api && tail -f build/dev-appserver-out/dev_appserver.out
          background: true
      - run:
          name: Wait for local API server to start
          command: dockerize -wait tcp://localhost:8081/v1/status -timeout 4m

  launch-local-ui:
    description: "Launch local UI server"
    parameters:
      connect_local_api:
        type: boolean
        default: false
    steps:
      - ui-cache
      - when:
          condition: << parameters.connect_local_api >>
          steps:
            - run:
                name: Launch local UI server
                working_directory: ~/workbench/ui
                # Start local UI server that connects to local api server
                command: yarn dev-up --configuration=local
                background: true
      - unless:
          condition: << parameters.connect_local_api >>
          steps:
            - run:
                name: Launch local UI server
                working_directory: ~/workbench/ui
                # Start local UI server that connects to "test" api server
                command: yarn dev-up
                background: true
      - run:
          name: Watch the port for 4m for local UI server start up
          command: dockerize -wait tcp://localhost:4200 -timeout 4m

  run-api-test:
    description: "Run api tests, reused in api-*-test jobs"
    parameters:
      additional_steps:
        type: steps
        default: []
    steps:
      - checkout-code
      - halt-test-check:
          dir_names: "api"
      - restore_cache:
          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum "~/workbench/api/gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v5-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
      - steps: << parameters.additional_steps >>
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v5-gradle-wrapper-{{ .Branch }}-{{ checksum "~/workbench/api/gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v5-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
      - store_test_results:
          path: ~/workbench/api/build/test-results/test
      - store_artifacts:
          path: ~/workbench/api/build/test-results/test
          destination: JunitTestResult
          when: always

  run-puppeteer-test:
    description: "Run puppeteer integration tests"
    steps:
      - gcloud-auth-login
      - browser-tools/install-browser-tools
      - run:
          command: |
            echo "Environment parameter WORKBENCH_ENV=${WORKBENCH_ENV}"
      - restore_cache:
          keys:
            - v5-e2e-cache-{{ .Branch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}
      - run:
          working_directory: ~/workbench/e2e
          command: yarn install --frozen-lockfile --non-interactive
      - save_cache:
          paths:
            - ~/.cache/yarn
            - e2e/node_modules
          key: v5-e2e-cache-{{ .Branch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}
      - run:
          name: Running Puppeteer e2e tests
          working_directory: ~/workbench/e2e
          command: |
            circleci tests glob "tests/**/*.spec.ts" | circleci tests split --split-by=timings > /tmp/tests-to-run
            yarn test:ci $(cat /tmp/tests-to-run)
          no_output_timeout: 15m
      - run:
          name: Transform test-results.xml to json
          working_directory: ~/workbench/e2e
          command: |
            PROJECT_NAME=broad-dsde-qa
            STORAGE_BUCKET=gs://aou-automation-test-results
            JFILE=./logs/test-results-${CIRCLE_NODE_INDEX}-${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}.json
            yarn --silent junit2json ./logs/test-results.xml | jq -c . > $JFILE
            gcloud components update
            gcloud config set project $PROJECT_NAME
            gsutil cp $JFILE $STORAGE_BUCKET
          when: always
      - store_artifacts:
          path: e2e/logs
          destination: logs
          when: always
      - store_test_results:
          path: ~/workbench/e2e/logs

  store-commit-message:
    description: "Export Git commit message to environment variable"
    steps:
      - run:
          command: |
            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
            source $BASH_ENV
          name: "Export COMMIT_MESSAGE environment variable"

  ui-cache:
    description: "workbench/ui: yarn install, save and restore cache"
    steps:
      - restore_cache:
          keys:
            - v5-ui-cache-{{ .Branch }}-{{ checksum "~/workbench/ui/yarn.lock" }}
      - run:
          working_directory: ~/workbench/ui
          command: yarn install --verbose --frozen-lockfile --non-interactive
      - save_cache:
          paths:
            - ~/.cache/yarn
            - ui/node_modules
          key: v5-ui-cache-{{ .Branch }}-{{ checksum "~/workbench/ui/yarn.lock" }}

# -------------------------
#        JOBS
# -------------------------
jobs:
  api-unit-test:
    parallelism: 4
    executor: workbench-executor
    steps:
      - run-api-test:
          additional_steps:
            - run:
                name: Validate Swagger definitions
                working_directory: ~/workbench/api
                command: |
                  if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
                    ./project.rb validate-swagger --project-prop verboseTestLogging=yes
                  fi
            - run:
                name: Run Java genomics unit tests
                working_directory: ~/workbench/api
                command: |
                  CLASSNAMES=$(circleci tests glob "genomics/src/test/java/**/*Test.java" \
                    | cut -c 1- \
                    | sed 's@genomics/src/test/java/@@' \
                    | sed 's@/@.@g' \
                    | sed 's/\.[^.]*$//' \
                    | circleci tests split --split-by=timings --index=$CIRCLE_NODE_INDEX)
                  GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests", $i }')
                  gradle -p genomics test $GRADLE_ARGS
            - run:
                name: Run Java api unit tests
                working_directory: ~/workbench/api
                # For script logics and explanation, see README.
                command: |
                  CLASSNAMES=$(circleci tests glob "src/test/java/**/*Test.java" "src/test/java/**/*Test.kt" \
                    | cut -c 1- \
                    | sed 's@src/test/java/@@' \
                    | sed 's@/@.@g' \
                    | sed 's/\.[^.]*$//' \
                    | circleci tests split --split-by=timings --index=$CIRCLE_NODE_INDEX)
                  GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests", $i }')
                  gradle :test $GRADLE_ARGS
            - run:
                name: Lint Java code
                working_directory: ~/workbench/api
                command: |
                  if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
                    ./gradlew spotlessCheck
                  fi
      - persist_to_workspace:
          root: .
          paths:
            - api

  api-local-test:
    # The local API server starts two Java processes (the API server and the cron emulator).
    # And other things need memory as well. The medium+ machine has 6GB.
    resource_class: medium+
    executor: db-executor
    steps:
      - run-api-test:
          additional_steps:
            - gcloud-auth-login
            - launch-local-api
            - run:
                working_directory: ~/workbench/api
                command: ./project.rb run-local-api-tests && ./project.rb stop-local-api

  api-deps-check:
    executor: workbench-executor
    steps:
      - run-api-test:
          additional_steps:
            - run:
                name: Scan dependencies for vulnerabilities
                working_directory: ~/workbench/api
                command: ./project.rb gradle dependencyCheckAnalyze --info

  api-integration-test:
    executor: workbench-executor
    steps:
      - run-api-test:
          additional_steps:
            - gcloud-auth-login
            - run:
                name: Run Integration Tests
                working_directory: ~/workbench/api
                command: ./project.rb integration

  api-bigquery-test:
    executor: workbench-executor
    steps:
      - run-api-test:
          additional_steps:
            - gcloud-auth-login
            - run:
                name: Run BigQuery tests
                working_directory: ~/workbench/api
                command: ./project.rb bigquerytest

  ui-unit-test:
    executor: workbench-executor
    steps:
      - checkout-code
      - halt-test-check:
          dir_names: "ui"
      - run:
          name: Download Swagger CLI
          working_directory: ~/workbench
          command: ruby -r ./aou-utils/swagger.rb -e Workbench::Swagger.download_swagger_codegen_cli
      - ui-cache
      - run:
          name: Yarn codegen
          working_directory: ~/workbench/ui
          command: yarn codegen
      - run:
          name: Run Angular tests
          working_directory: ~/workbench/ui
          command: yarn test --no-watch --no-progress --browsers=ChromeHeadless
      - run:
          name: Run React jest tests
          working_directory: ~/workbench/ui
          command: yarn test-react --detectOpenHandles --forceExit --runInBand
      - run:
          name: Build UI with strict compilation
          working_directory: ~/workbench/ui
          command: ./project.rb build --environment test
      - run:
          # Lint last; it's more important to surface test failures early.
          name: Lint typescript
          working_directory: ~/workbench/ui
          command: yarn run lint
      - persist_to_workspace:
          root: .
          paths:
            - ui

  ui-deploy-to-test:
    executor: workbench-executor
    steps:
      - checkout-code
      - attach_workspace:
          at: .
      - gcloud-auth-login
      - deploy:
          name: Deploy UI to "test" App Engine
          working_directory: ~/workbench/ui
          command: |
            ./project.rb deploy-ui \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circle-service-account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote

  api-deploy-to-test:
    executor: workbench-executor
    steps:
      - checkout-code
      - attach_workspace:
          at: .
      - gcloud-auth-login
      - deploy:
          name: Deploy API to "test" App Engine
          working_directory: ~/workbench/api
          command: |
            ./project.rb deploy \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circle-service-account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote

  # In staging and perf, we deploy all at once in order to track and control
  # the release for a tagged version only. In "test", we maintain individual
  # release jobs for API and UI to allow faster deploys and because we lack
  # a version tag.
  deploy-to-staging:
    executor: workbench-executor
    steps:
      - deploy-to-staging-perf:
          project_name: "all-of-us-rw-staging"

  deploy-to-perf:
    executor: workbench-executor
    steps:
      - deploy-to-staging-perf:
          project_name: "all-of-us-rw-perf"

  # Run Puppeteer UI tests on deployed "local", "test" or "staging" environment.
  puppeteer-test:
    executor: puppeteer-executor
    parameters:
      env_name:
        description: The target environment for run Puppeteer tests. Must be one of "test", "staging", "local".
        default: "test"
        type: enum
        enum: ["test", "staging", "local"]
      test_mode:
        description: Switching between "nightly-integration" and normal "integration" test mode.
        default: "integration"
        type: enum
        enum: ["integration", "nightly-integration"]
      parallel_num:
        type: integer
        default: 1
      optional_steps:
        type: steps
        default: []
    environment:
      WORKBENCH_ENV: << parameters.env_name >>
      TEST_MODE: << parameters.test_mode >>
    parallelism: << parameters.parallel_num >>
    steps:
      - checkout-code
      - steps: << parameters.optional_steps >>
      - halt-test-check:
          dir_names: "api ui e2e"
      - run:
          name: Update test user environment variables
          command: |
            case << parameters.env_name >> in
              "staging") echo 'export USER_NAME=$PUPPETEER_USER_STAGING' >> $BASH_ENV ;;
              "test") echo 'export USER_NAME=$PUPPETEER_USER_TEST' >> $BASH_ENV ;;
              "local") echo 'export USER_NAME=$PUPPETEER_USER_LOCAL' >> $BASH_ENV ;;
            esac
            echo 'export PASSWORD=$PUPPETEER_USER_PASSWORD' >> $BASH_ENV
            source $BASH_ENV
      - when:
          condition:
            equal: [ "local", << parameters.env_name >> ]
          steps:
            # Local UI server is not used if WORKBENCH_ENV reset to "test" value in next step
            - launch-local-ui
            - run:
                name: See if WORKBENCH_ENV environment variable should override from "local" to "test".
                command: |
                  if [ ${CIRCLE_BRANCH} != "" ] && [ ${CIRCLE_BRANCH} != "master" ]; then
                    # Count total number of files changed.
                    CHANGED_COUNT=$(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | wc -l | xargs)
                    E2E_CHANGED_COUNT=$(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) -- e2e | wc -l | xargs)
                    # If e2e tests are the only files that have changed, run e2e tests against the "test" environment.
                    if [ $E2E_CHANGED_COUNT -gt 0 ] && [ $E2E_CHANGED_COUNT -eq $CHANGED_COUNT ]; then
                        echo 'export WORKBENCH_ENV=test' >> $BASH_ENV
                        echo 'export USER_NAME=$PUPPETEER_USER_TEST' >> $BASH_ENV
                        source $BASH_ENV
                        echo "Reset WORKBENCH_ENV=test"
                    fi
                  fi
      - run-puppeteer-test


workflows:
  build-test-deploy:
    jobs:
      # Always run basic test/lint/compilation (open PRs, master branch merge)
      # Note: by default tags are not picked up.
      #- api-local-test
      #- api-unit-test
      #- ui-unit-test
      #- api-bigquery-test
      #- api-integration-test
      # Deploy to "test" on master branch merges
      #- api-deploy-to-test:
          #<<: *filter-master-branch
          #requires:
            #- api-unit-test
      #- ui-deploy-to-test:
          #<<: *filter-master-branch
          #requires:
            #- ui-unit-test
      # Deploy local UI server connected to "test" API server. Run Puppeteer tests for PR commits only
      - puppeteer-test:
          <<: *filter-pr-branch
          env_name: "local"
          parallel_num: 2
          optional_steps:
            - halt-puppeteer-check
      # On master branch merges, run Puppeteer tests after ui and api deployed to "test" env successfully
      - puppeteer-test:
          parallel_num: 4
          env_name: "test"
          <<: *filter-master-branch
          requires:
            - api-deploy-to-test
            - ui-deploy-to-test

  deploy-staging:
    jobs:
      - api-local-test:
          <<: *filter-release-tags
      - api-unit-test:
          <<: *filter-release-tags
      - ui-unit-test:
          <<: *filter-release-tags
      - api-bigquery-test:
          <<: *filter-release-tags
      - api-deps-check:
          <<: *filter-release-tags
      - api-integration-test:
          <<: *filter-release-tags
      - deploy-to-staging:
          <<: *filter-release-tags
          requires:
            - api-local-test
            - api-unit-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-unit-test
      - deploy-to-perf:
          <<: *filter-release-tags
          requires:
            - api-local-test
            - api-unit-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-unit-test
      # Not ready until delete workspace script is working
      # - puppeteer-test:
          # <<: *filter-release-tags
          # parallel_num: 4
          # env_name: "staging"
          # requires:
            # - deploy-to-staging

  nightly-tests:
    triggers:
      - schedule:
          # Run once every day at 4:00AM UTC
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - api-bigquery-test
      - puppeteer-test:
          parallel_num: 1
          test_mode: "nightly-integration"
          env_name: "test"

experimental:
  notify:
    branches:
      only:
        - master
