version: 2.1

# -------------------------
#   PARAMETERS
# -------------------------
parameters:
  circleci_service_account:
    type: string
    default: "circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com"

# -------------------------
#   ANCHORS
# -------------------------
anchors:
  defaults: &defaults
    docker:
      - image: allofustest/workbench:buildimage-0.0.16
    working_directory: ~/workbench

  java_defaults: &java_defaults
    <<: *defaults
    environment:
      # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java
      # processes executed within CircleCI's docker containers will respect. Very helpful resource:
      # https://circleci.com/blog/how-to-handle-java-oom-errors/
      #
      # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,
      # so we bumped this down further to 2G.
      JAVA_TOOL_OPTIONS: -Xmx2g
      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
      TERM: dumb

  # See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
  # Job runs for master branch only
  filter_only_master_branch: &filter_only_master_branch
    tags:
      ignore: /.*/
    branches:
      only: master

  # Job runs for no branch and only for tags starting with ‘v’
  filter_only_release_tags: &filter_only_release_tags
    branches:
      ignore: /.*/
    tags:
      # regex explanation:
      # "^" asserts position at start of a line.
      # "v" matches the character "v" literally (case sensitive).
      # "[0-9]+" match a single numerical digit (the + quantifier, matches between one and unlimited times, as many times as possible).
      # "-" matches the character "-" literally.
      # "rc" matches the character "rc" literally (case sensitive).
      # "$" asserts position at the end of a line.
      # Workbench release tag format example: v5-3-rc1
      only: /^v[0-9]+-[0-9]+-rc[0-9]+$/

  # Job runs for all branches EXCEPT all tag and master branches
  filter_pull_request_branch: &filter_pull_request_branch
    tags:
      ignore: /.*/
    branches:
      ignore: master

# -------------------------
#   COMMANDS
# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
# -------------------------
commands:
  activate_service_account_credential:
    description: "Activiate CircleCI service account credential"
    steps:
      - run:
          name: Activate CircleCI service account credential
          working_directory: ~/workbench
          # Used to call gsutil from the circle environment.
          command: ci/activate_creds.sh api/circle-sa-key.json

  checkout_init_git:
    description: "git checkout and update submodules"
    steps:
      - checkout
      - run:
          name: Update git submodules
          command: git submodule update --init --recursive

  halt_job_noncode_changes:
    description: "Halt job and succeed early if no code changes on master branch"
    steps:
      - run:
          command: |
            if [ ${CIRCLE_BRANCH} != "" ] &&
              [ ${CIRCLE_BRANCH} != "master" ] &&
              ! git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep -qvE '(.md$)|(.pdf$)'; then
                echo "No code changes in non-master branch. halting job."
                circleci step halt
            fi
          name: Halt job and succeed early if no code changes on master branch

  ensure_branch_has_changes:
    description: "Ensure branch has changes to code in specified directory"
    parameters:
      dir_name:
        type: enum
        enum: ["api", "ui"]
    steps:
      - run:
          command: |
            if [ ${CIRCLE_BRANCH} != "" ] &&
              [ ${CIRCLE_BRANCH} != "master" ] &&
              [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep << parameters.dir_name >>/ | wc -l | xargs) == 0 ]; then
                echo "No relevant changes in << parameters.dir_name >> directory in non-master branch. Skipping."
                circleci step halt
            fi
          name: Ensure branch has changes to code in specified directory

  install_ui_dependencies:
    description: "workbench/ui: yarn install, save and restore cache"
    steps:
      # caching: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          name: "restore ui cache"
          keys:
            - v1-ui-cache-{{ .Branch }}-{{ checksum "~/workbench/ui/yarn.lock" }}
            - v1-ui-cache-master
            - v1-ui-cache-
      - run:
          name: "workbench/ui: yarn install dependencies"
          working_directory: ~/workbench/ui
          command: yarn install --verbose --frozen-lockfile --non-interactive
      - save_cache:
          name: "save ui cache"
          paths:
            - ~/.cache/yarn
            - ui/node_modules
          key: v1-ui-cache-{{ .Branch }}-{{ checksum "~/workbench/ui/yarn.lock" }}

  install_e2e_dependencies:
    description: "workbench/e2e: yarn install, save and restore cache"
    steps:
      - restore_cache:
          name: "restore e2e cache"
          keys:
            - v1-e2e-cache-{{ .Branch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}
            - v1-e2e-cache-master
            - v1-e2e-cache-
      - run:
          name: "workbench/e2e: yarn install dependencies"
          working_directory: ~/workbench/e2e
          command: yarn install --frozen-lockfile --non-interactive
      - save_cache:
          name: "save e2e cache"
          paths:
            - ~/.cache/yarn
            - e2e/node_modules
          key: v1-e2e-cache-{{ .Branch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}

  manage_api_cache:
    description: "workbench/api: save or restore gradle cache"
    parameters:
      save:
        type: boolean
        default: false
      restore:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.save >>
          steps:
            - save_cache:
                name: "save api gradle cache"
                paths:
                  - ~/.gradle
                key: v1-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
      - when:
          condition: << parameters.restore >>
          steps:
            - restore_cache:
                name: "restore api gradle cache"
                keys:
                  - v1-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
                  - v1-gradle-cache-master
                  - v1-gradle-cache-

  run_e2e_test:
    description: "Run puppeteer e2e integration tests"
    steps:
      - run:
          name: Update Puppeteer test environment variables
          command: |
            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV
            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV
            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Run puppeteer e2e tests
          working_directory: ~/workbench/e2e
          # parallelism used to run e2e tests
          command: yarn test:ci $(circleci tests glob "tests/**/*.spec.ts" | circleci tests split --split-by=timings --timings-type=classname --show-counts)
      - store_artifacts:
          path: e2e/logs
          destination: logs
      - store_test_results:
          path: ~/workbench/e2e/logs

# -------------------------
#        JOBS
# -------------------------
jobs:
  api-build-test:
    <<: *java_defaults
    resource_class: medium+
    steps:
      - checkout_init_git
      #- ensure_branch_has_changes:
          #dir_name: "api"
      - manage_api_cache:
          restore: true
      - run:
          name: Validate Swagger definitions
          working_directory: ~/workbench/api
          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes
      - run:
          name: Run Java unit tests
          working_directory: ~/workbench/api
          command: ./project.rb test
      - run:
          # Lint last; it's more important to surface test failures early.
          name: Java linting
          working_directory: ~/workbench/api
          command: ./gradlew spotlessCheck
      - store_test_results:
           path: ~/workbench/api/build/test-results/test
      - manage_api_cache:
          save: true

  api-local-test:
    # The local API server starts two Java processes (the API server and the cron emulator).
    # So we want the Java memory limit to be below half of that: other things on the
    # machine need memory as well. The medium+ machine has 6GB.
    # Refers to https://circleci.com/docs/2.0/configuration-reference/#resource_class
    resource_class: medium+
    docker:
      - image: allofustest/workbench:buildimage-0.0.16
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=ubuntu
          - MYSQL_USER=ubuntu
          - MYSQL_PASSWORD=ubuntu
    working_directory: ~/workbench
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2g
      TERM: dumb
      MYSQL_ROOT_PASSWORD: ubuntu
      # https://docs.gradle.org/6.3/userguide/gradle_daemon.html#sec:disabling_the_daemon
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - run:
          # MySQL sometimes refuses connections by the time we attempt to apply
          # data migrations. Watch the port for 2m for startup.
          name: Await MySQL start up
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 2m
      - run:
          name: Run local migrations
          working_directory: ~/workbench/api
          command: ./project.rb run-local-migrations
      - run:
          name: Local API tests on running server
          working_directory: ~/workbench/api
          command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api
      - manage_api_cache:
          save: true

  api-deploy-to-test:
    <<: *java_defaults
    steps:
      - checkout_init_git
      # Note: most of the time spent here appears to be in Gradle / App Engine
      # deployment. We tried more aggressively caching outputs via Circle
      # workspaces, but that seemed to have a negligible effect on speed. It's
      # also tricky to pick specific sub directories since the API deploy
      # touches several top level folders {common,}api.
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - deploy:
          name: Deploy API to "test" App Engine
          working_directory: ~/workbench/api
          command: |
            ./project.rb deploy \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circleci_service_account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote
      - manage_api_cache:
          save: true

  api-deps-check:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - run:
          name: Scan dependencies for vulnerabilities
          working_directory: ~/workbench/api
          command: ./project.rb gradle dependencyCheckAnalyze --info

  api-integration-test:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - ensure_branch_has_changes:
          dir_name: "api"
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - run:
          name: Run Integration Tests
          working_directory: ~/workbench/api
          command: ./project.rb integration
      - store_test_results:
          path: ~/workbench/api/build/test-results/integrationTest/
      - manage_api_cache:
          save: true

  api-nightly-integration-test:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - run:
          name: Run nightly integration tests
          working_directory: ~/workbench/api
          command: ./project.rb nightly-integration
      - store_test_results:
          path: ~/workbench/api/build/test-results/integrationTest/
      - manage_api_cache:
          save: true

  api-bigquery-test:
    <<: *java_defaults
    steps:
      - checkout_init_git
      - ensure_branch_has_changes:
          dir_name: "api"
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - run:
          name: Run BigQuery tests
          working_directory: ~/workbench/api
          command: ./project.rb bigquerytest
      - manage_api_cache:
          save: true

  ui-build-test:
    <<: *defaults
    steps:
      - checkout_init_git
      - run:
          name: Download Swagger CLI
          working_directory: ~/workbench
          command: |
            ruby -r ./aou-utils/swagger.rb -e Workbench::Swagger.download_swagger_codegen_cli
      - install_ui_dependencies
      - run:
          name: Yarn codegen
          working_directory: ~/workbench/ui
          command: yarn codegen
      - run:
          name: Run Angular tests
          working_directory: ~/workbench/ui
          command: |
            yarn test --no-watch --no-progress --browsers=ChromeHeadless
      - run:
          name: Run React jest tests
          working_directory: ~/workbench/ui
          command: |
            yarn test-react --detectOpenHandles --forceExit --runInBand
      - run:
          name: Build UI with strict compilation
          working_directory: ~/workbench/ui
          command: ./project.rb build --environment test
      - run:
          # Lint last; it's more important to surface test failures early.
          name: Lint typescript
          working_directory: ~/workbench/ui
          command: yarn run lint
      - persist_to_workspace:
          root: .
          paths:
            - ui

  # Run Puppeteer e2e UI tests on Workbench deployed "test" environment.
  puppeteer-e2e-test:
    <<: *defaults
    docker:
      - image: circleci/node:12.16.2-browsers
    environment:
      WORKBENCH_ENV: dev
      CI: true
      NODE_ENV: development
    working_directory: ~/workbench
    parallelism: 3
    steps:
      - checkout_init_git
      - halt_job_noncode_changes
      - install_e2e_dependencies
      - run_e2e_test

  ui-deploy-to-test:
    <<: *defaults
    steps:
      - checkout_init_git
      # Use "ui-build-test" job's workspace here to avoid redoing the setup.
      - attach_workspace:
          at: .
      - install_ui_dependencies
      - activate_service_account_credential
      - deploy:
          name: Deploy UI to "test" App Engine
          working_directory: ~/workbench/ui
          command: |
            ./project.rb deploy-ui \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circleci_service_account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote

  # In staging and perf, we deploy all at once in order to track and control
  # the release for a tagged version only. In "test", we maintain individual
  # release jobs for API and UI to allow faster deploys and because we lack
  # a version tag.
  deploy-staging:
    <<: *defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - deploy:
          working_directory: ~/workbench/deploy
          name: Deploy API and UI to "staging" App Engine
          command: |
            ./project.rb deploy \
              --project all-of-us-rw-staging \
              --account << pipeline.parameters.circleci_service_account >> \
              --git-version "${CIRCLE_TAG}" \
              --app-version "${CIRCLE_TAG}" \
              --circle-url "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
              --key-file circle-sa-key.json \
              --promote
      - manage_api_cache:
          save: true


  deploy-perf:
    <<: *defaults
    steps:
      - checkout_init_git
      - manage_api_cache:
          restore: true
      - activate_service_account_credential
      - deploy:
          name: Deploy API and UI to "perf" App Engine
          working_directory: ~/workbench/deploy
          command: |
            ./project.rb deploy \
              --project all-of-us-rw-perf \
              --account << pipeline.parameters.circleci_service_account >> \
              --git-version "${CIRCLE_TAG}" \
              --app-version "${CIRCLE_TAG}" \
              --circle-url "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
              --key-file circle-sa-key.json \
              --promote
      - manage_api_cache:
          save: true

workflows:
  build-test-deploy:
    jobs:
      # Always run basic test/lint/compilation (open PRs, master merge).
      # Note: by default tags are not picked up.
      - api-local-test
      - api-build-test
      - ui-build-test
      - api-bigquery-test
      - api-integration-test
      # Run deployment to "test" on master merges.
      - api-deploy-to-test:
          filters: *filter_only_master_branch
          requires:
            - api-build-test
      - ui-deploy-to-test:
          filters: *filter_only_master_branch
          requires:
            - ui-build-test
      # On master merges, run Puppeteer e2e tests after ui and api deployed to "test" env successfully.
      - puppeteer-e2e-test:
          filters: *filter_only_master_branch
          requires:
            - api-deploy-to-test
            - ui-deploy-to-test

  deploy-staging:
    jobs:
      - api-local-test:
          filters: *filter_only_release_tags
      - api-build-test:
          filters: *filter_only_release_tags
      - ui-build-test:
          filters: *filter_only_release_tags
      # Run slower integration tests and dep checks on release tags only.
      - api-bigquery-test:
          filters: *filter_only_release_tags
      - api-deps-check:
          filters: *filter_only_release_tags
      - api-integration-test:
          filters: *filter_only_release_tags
      - deploy-staging:
          filters: *filter_only_release_tags
          requires:
            - api-local-test
            - api-build-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-build-test
      - deploy-perf:
          filters: *filter_only_release_tags
          requires:
            - api-local-test
            - api-build-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-build-test

  nightly-tests:
    triggers:
      - schedule:
          # Run this command once every day at 4:00AM UTC
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - api-nightly-integration-test
      - api-bigquery-test

experimental:
  notify:
    branches:
      only:
        - master
