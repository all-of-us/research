version: 2.1

# Pipeline parameters
parameters:
  ui_cache_key_version:
    type: string
    default: "v1"

  api_cache_key_version:
    type: string
    default: "v1"

  e2e_cache_key_version:
    type: string
    default: "v2"

  buildimage-tag:
    type: string
    default: "0.0.16"

  circle_deploy_service_account:
    type: string
    default: "circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com"

  workingdir:
    type: string
    default: "~/workbench"

  workingdir_api:
    type: string
    default: "~/workbench/api"

  workingdir_ui:
    type: string
    default: "~/workbench/ui"

  workingdir_e2e:
    type: string
    default: "~/workbench/e2e"

commands:
  git_checkout:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  # caching https://circleci.com/docs/2.0/caching/
  restore_api_cache:
    description: "restore api project cache"
    parameters:
      version:
        type: string
        default: << pipeline.parameters.api_cache_key_version >>
    steps:
      - restore_cache:
          keys:
            - << parameters.version >>-123-gradle-cache-{{ checksum "~/workbench/api/build.gradle" }}
            - << parameters.version >>-123-gradle-cache-

  save_api_cache:
    description: "save api project cache"
    parameters:
      version:
        type: string
        default: << pipeline.parameters.api_cache_key_version >>
    steps:
      - save_cache:
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper
            - ~/.m2
            - ~/workbench/api/build/exploded-api/WEB-INF/lib/
          key: << parameters.version >>-123-gradle-cache-{{ checksum "~/workbench/api/build.gradle" }}

  save_ui_cache:
    description: "save ui project cache"
    parameters:
      version:
        type: string
        default: << pipeline.parameters.ui_cache_key_version >>
    steps:
      - save_cache:
          paths:
            - ~/.cache/yarn
            - node_modules
            - aou-ui-angular/node_modules
            - ui/node_modules
          key: << parameters.version >>-1234-ui-yarn-cache-{{ checksum "~/workbench/ui/yarn.lock" }}

  restore_ui_cache:
    description: "restore ui project cache"
    parameters:
      version:
        type: string
        default: << pipeline.parameters.ui_cache_key_version >>
    steps:
      - restore_cache:
          keys:
            - << parameters.version >>-1234-ui-yarn-cache-{{ checksum "~/workbench/ui/yarn.lock" }}
            - << parameters.version >>-1234-ui-yarn-cache-

  restore_e2e_cache:
    description: "restore Puppeteer e2e project cache"
    parameters:
      version:
        type: string
        default: << pipeline.parameters.e2e_cache_key_version >>
    steps:
      - restore_cache:
          keys:
            - << parameters.version >>-123-e2e-cache-{{ checksum "~/workbench/e2e/yarn.lock" }}
            - << parameters.version >>-123-e2e-cache-

  save_e2e_cache:
    description: "save Puppeteer e2e project cache"
    parameters:
      version:
        type: string
        default: << pipeline.parameters.e2e_cache_key_version >>
    steps:
      - save_cache:
          paths:
            - ~/.cache/yarn
          key: << parameters.version >>-123-e2e-cache-{{ checksum "~/workbench/e2e/yarn.lock" }}

  no_change_filter:
    steps:
      - run:
          name: Git checking for differences
          # Circle is bad about setting up your remotes for you, you must use origin/
          command: |
            if [ ${CIRCLE_BRANCH} != "" ] && [ ${CIRCLE_BRANCH} != "master" ] && [ $(git diff --name-only $(git merge-base origin/master ${CIRCLE_BRANCH}) | grep api/ | wc -l | xargs) == 0 ]; then
              echo No relevant changes on non-master branch, skipping
              circleci step halt
            fi

  # Deploy UI and API together in order to track and control the release for a tagged version only.
  deploy_ui_api:
    parameters:
      project:
        type: string
        default: "all-of-us-rw-staging"
    steps:
      - git_checkout
      - restore_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>
      - activate_sa
      - deploy:
          working_directory: << pipeline.parameters.workingdir >>/deploy
          command: |
            ./project.rb deploy \
              --project << parameters.project >> \
              --account << pipeline.parameters.circle_deploy_service_account >> \
              --git-version "${CIRCLE_TAG}" \
              --app-version "${CIRCLE_TAG}" \
              --circle-url "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
              --key-file circle-sa-key.json \
              --promote

  activate_sa:
    steps:
      - run:
          name: Activate CircleCI Service Account credential
          working_directory: << pipeline.parameters.workingdir >>
          # Used to call gsutil from the circle environment.
          command: ci/activate_creds.sh api/circle-sa-key.json

executors:
  buildimage-docker-executor:
    docker:
      - image: allofustest/workbench:buildimage-<< pipeline.parameters.buildimage-tag >>
    working_directory: << pipeline.parameters.workingdir >>
    resource_class: medium+  # https://circleci.com/docs/2.0/configuration-reference/#resource_class
    environment:
      # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java
      # processes executed within CircleCI's docker containers will respect. Very helpful resource:
      # https://circleci.com/blog/how-to-handle-java-oom-errors/
      #
      # In Feb 2017, this was set to 3G. But in Feb 2019 (RW-2194) we started seeing OOM errors,
      # so we bumped this down further to 2G.
      JAVA_TOOL_OPTIONS: -Xmx2g
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false"
      TERM: dumb

  mysql-docker:
    resource_class: medium+
    working_directory: << pipeline.parameters.workingdir >>
    docker:
      - image: allofustest/workbench:buildimage-<< pipeline.parameters.buildimage-tag >>
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=ubuntu
          - MYSQL_USER=ubuntu
          - MYSQL_PASSWORD=ubuntu
    environment:
      JAVA_TOOL_OPTIONS: -Xmx2g
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false"
      TERM: dumb

jobs:
  api-build-test:
    executor: buildimage-docker-executor
    steps:
      - git_checkout
      - no_change_filter
      - restore_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>
      - run:
          name: Validate swagger definitions
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes
      - run:
          name: Integration tests compile
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./project.rb gradle compileBigquerytestJava compileIntegrationJava
      - run:
          name: Unit tests
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./project.rb test
      - run:
          # Lint last; it's more important to surface test failures early.
          name: Java linting
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./gradlew spotlessCheck
      - save_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>

  api-local-test:
    executor: mysql-docker
    environment:
      MYSQL_ROOT_PASSWORD: ubuntu
    steps:
      - git_checkout
      - restore_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>
      - activate_sa
      - run:
          # MySQL sometimes refuses connections by the time we attempt to apply
          # data migrations. Watch the port for 2m for startup.
          name: Await MySQL startup
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 2m
      - run:
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./project.rb run-local-migrations
      - run:
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api
      - save_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>

  api-deps-check:
    executor: buildimage-docker-executor
    working_directory: << pipeline.parameters.workingdir_api >>
    steps:
      - git_checkout
      - run:
          name: Scan dependencies for vulnerabilities
          command: |
            ./project.rb gradle dependencyCheckAnalyze --info

  api-integration-test:
    executor: buildimage-docker-executor
    steps:
      - git_checkout
      - no_change_filter
      - restore_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>
      - activate_sa
      - run:
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./project.rb integration
      - save_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>

  api-nightly-integration-test:
    executor: buildimage-docker-executor
    steps:
      - git_checkout
      - restore_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>
      - activate_sa
      - run:
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./project.rb nightly-integration
      - save_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>

  api-bigquery-test:
    executor: buildimage-docker-executor
    steps:
      - git_checkout
      - no_change_filter
      - restore_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>
      - activate_sa
      - run:
          working_directory: << pipeline.parameters.workingdir_api >>
          command: ./project.rb bigquerytest
      - save_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>

  ui-build-test:
    executor: buildimage-docker-executor
    steps:
      - git_checkout
      - run:
          working_directory: << pipeline.parameters.workingdir >>
          name: Download Swagger CLI
          command: |
            ruby -r ./aou-utils/swagger.rb -e Workbench::Swagger.download_swagger_codegen_cli
      - restore_ui_cache:
          version: << pipeline.parameters.ui_cache_key_version >>
      - run:
          working_directory: << pipeline.parameters.workingdir_ui >>
          command: yarn install --verbose --frozen-lockfile
      - save_ui_cache:
          version: << pipeline.parameters.ui_cache_key_version >>
      - run:
          working_directory: << pipeline.parameters.workingdir_ui >>
          command: yarn codegen
      - run:
          name: Run Angular tests
          working_directory: << pipeline.parameters.workingdir_ui >>
          command: |
            yarn test --no-watch --no-progress --browsers=ChromeHeadless
      - run:
          name: Run React tests (Jest)
          working_directory: << pipeline.parameters.workingdir_ui >>
          command: |
            yarn test-react --detectOpenHandles --forceExit --runInBand
      - run:
          name: Build with strict compilation
          working_directory: << pipeline.parameters.workingdir_ui >>
          command: ./project.rb build --environment test
      - run:
          # Lint last; it's more important to surface test failures early.
          name: Lint Typescript
          working_directory: << pipeline.parameters.workingdir_ui >>
          command: yarn run lint
      - persist_to_workspace:
          root: .
          paths:
            - ui

  # Run suite of Puppeteer end-to-end QA tests, pointed at the Workbench "test" environment.
  puppeteer-e2e-test:
    executor: buildimage-docker-executor
    docker:
      - image: circleci/node:13.10.1-browsers
        environment:
          NODE_ENV: development
    working_directory: << pipeline.parameters.workingdir >>
    parallelism: 3
    steps:
      - git_checkout
      - restore_e2e_cache:
          version: << pipeline.parameters.e2e_cache_key_version >>
      - run: 
          working_directory: << pipeline.parameters.workingdir_e2e >>
          command: yarn cache clean && yarn install --frozen-lockfile
      - save_e2e_cache:
          version: << pipeline.parameters.e2e_cache_key_version >>
      - run:
          name: Update environment variables
          command: |
            echo 'export USER_NAME=$PUPPETEER_TEST_USER' >> $BASH_ENV
            echo 'export PASSWORD=$PUPPETEER_TEST_USER_PASSWORD' >> $BASH_ENV
            echo 'export INVITATION_KEY=$PUPPETEER_TEST_REGISTRATION_KEY' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Run e2e tests (Puppeteer and Jest)
          working_directory: << pipeline.parameters.workingdir_e2e >>
          command: yarn test:ci $(circleci tests glob "tests/**/*.spec.ts" | circleci tests split --split-by=timings --timings-type=classname --show-counts)
      - store_artifacts:
          path: e2e/logs
          destination: logs
      - store_test_results:
          path: << pipeline.parameters.workingdir_e2e >>/logs
      
  ui-deploy-to-test:
    executor: buildimage-docker-executor
    steps:
      - git_checkout
      - restore_ui_cache:
          version: << pipeline.parameters.ui_cache_key_version >>
      - activate_sa
      - deploy:
          name: Deploy to App Engine
          working_directory: << pipeline.parameters.workingdir_ui >>
          command: |
            ./project.rb deploy-ui \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circle_deploy_service_account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote


  api-deploy-to-test:
    executor: buildimage-docker-executor
    steps:
      - git_checkout
      # Note: most of the time spent here appears to be in Gradle / App Engine
      # deployment. We tried more aggressively caching outputs via Circle
      # workspaces, but that seemed to have a negligible effect on speed. It's
      # also tricky to pick specific sub directories since the API deploy
      # touches several top level folders {common,}api.
      - restore_api_cache:
          version: << pipeline.parameters.api_cache_key_version >>
      - activate_sa
      - deploy:
          name: Deploy to App Engine
          working_directory: << pipeline.parameters.workingdir_api >>
          command: |
            ./project.rb deploy \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circle_deploy_service_account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote

  # In staging and perf, we deploy all at once in order to track and control
  # the release for a tagged version only. In "test", we maintain individual
  # release jobs for API and UI to allow faster deploys and because we lack
  # a version tag.
  deploy-to-staging:
    executor: buildimage-docker-executor
    steps:
      - deploy_ui_api:
          project: "all-of-us-rw-staging"

  deploy-to-perf:
    executor: buildimage-docker-executor
    steps:
      - deploy_ui_api:
          project: "all-of-us-rw-perf"


# See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
filter_master: &filter_master
  filters:
    branches:
      only: master

filter_releases: &filter_releases
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v.*/

workflows:
  build-test-deploy:
    jobs:
      # Always run basic test/lint/compilation (open PRs, master merge).
      # Note: by default tags are not picked up.
      - api-local-test
      - api-build-test
      - ui-build-test
      - api-bigquery-test
      - api-integration-test
      # Run deployment to "test" on master merges.
      - api-deploy-to-test:
          <<: *filter_master
          requires:
            - api-build-test
      - ui-deploy-to-test:
          <<: *filter_master
          requires:
            - ui-build-test
      # After merge PR to master branch, run Puppeteer tests after ui and api deployed to "test" env successfully.
      - puppeteer-e2e-test:
          <<: *filter_master
          requires:
            - api-deploy-to-test
            - ui-deploy-to-test

  deploy-staging:
    jobs:
      - api-local-test:
          <<: *filter_releases
      - api-build-test:
          <<: *filter_releases
      - ui-build-test:
          <<: *filter_releases
      # Run slower integration tests and dep checks on release tags only.
      - api-bigquery-test:
          <<: *filter_releases
      - api-deps-check:
          <<: *filter_releases
      - api-integration-test:
          <<: *filter_releases
      - deploy-to-staging:
          <<: *filter_releases
          requires:
            - api-local-test
            - api-build-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-build-test
      - deploy-to-perf:
          <<: *filter_releases
          requires:
            - api-local-test
            - api-build-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-build-test
  nightly-tests:
    triggers:
      - schedule:
          # Run this command once every day at 4:00AM UTC
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - api-nightly-integration-test
      - api-bigquery-test

experimental:
  notify:
    branches:
      only:
        - master
