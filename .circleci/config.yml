version: 2

defaults: &defaults
  docker:
    - image: allofustest/workbench:buildimage-0.0.11
  working_directory: ~/workbench
java_defaults: &java_defaults
  <<: *defaults
  environment:
    # As best I can tell (dmohs, 7 Feb '17), this is the only way to set a memory limit that Java
    # processes executed within CircleCI's docker containers will respect. Very helpful resource:
    # https://circleci.com/blog/how-to-handle-java-oom-errors/
    # Gradle itself doesn't usually reach 1G, so as long as we can keep tasks under 3G, we should
    # have room in Circle's 4G to get our work done.
    JAVA_TOOL_OPTIONS: -Xmx3g
    TERM: dumb

jobs:
  api-build-test:
    <<: *java_defaults
    steps:
      - checkout
      - run:
          command: git submodule update --init --recursive
      - restore_cache:
          keys:
          - api-cache-{{ checksum "~/workbench/api/build.gradle" }}
          - api-cache-
      - run:
          name: Validate swagger definitions
          working_directory: ~/workbench/api
          command: ./project.rb validate-swagger --project-prop verboseTestLogging=yes
      - run:
          working_directory: ~/workbench/api
          command: ./project.rb test
      - save_cache:
          paths:
            - ~/.gradle
            - ~/.m2
            - ~/workbench/api/build/exploded-api/WEB-INF/lib/
          key: api-cache-{{ checksum "~/workbench/api/build.gradle" }}

  api-local-test:
    docker:
      - image: allofustest/workbench:buildimage-0.0.11
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=ubuntu
          - MYSQL_USER=ubuntu
          - MYSQL_PASSWORD=ubuntu
    working_directory: ~/workbench
    environment:
      JAVA_TOOL_OPTIONS: -Xmx3g
      TERM: dumb
      MYSQL_ROOT_PASSWORD: ubuntu
    steps:
      - checkout
      - run:
          name: Fetch Submodules
          command: git submodule update --init --recursive
      - restore_cache:
          keys:
          - api-cache-{{ checksum "~/workbench/api/build.gradle" }}
          - api-cache-
      - run:
          working_directory: ~/workbench
          command: ci/activate_creds.sh api/circle-sa-key.json
      - run:
          working_directory: ~/workbench
          command: cp api/circle-sa-key.json public-api
      - run:
          # MySQL sometimes refuses connections by the time we attempt to apply
          # data migrations. Watch the port for 2m for startup.
          name: Await MySQL startup
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 2m
      - run:
          working_directory: ~/workbench/api
          command: ./project.rb run-local-migrations
      - run:
          working_directory: ~/workbench/api
          command: ./project.rb start-local-api && ./project.rb run-local-api-tests && ./project.rb stop-local-api
      - run:
          working_directory: ~/workbench/api
          command: ./project.rb start-local-public-api && ./project.rb run-local-public-api-tests && ./project.rb stop-local-public-api
      - save_cache:
          paths:
            - ~/.gradle
            - ~/.m2
            - ~/workbench/api/build/exploded-api/WEB-INF/lib/
          key: api-cache-{{ checksum "~/workbench/api/build.gradle" }}

  api-deploy:
    <<: *java_defaults
    steps:
      - checkout
      - run:
          command: git submodule update --init --recursive
      # Note: most of the time spent here appears to be in Gradle / App Engine
      # deployment. We tried more aggressively caching outputs via Cirlce
      # workspaces, but that seemed to have a negligible effect on speed. It's
      # also tricky to pick specific sub directories since the API deploy
      # touches several top level folders {public,common,}api.
      - restore_cache:
          keys:
          - api-cache-{{ checksum "~/workbench/api/build.gradle" }}
          - api-cache-
      - run:
          working_directory: ~/workbench
          command: ci/activate_creds.sh api/circle-sa-key.json
      - deploy:
          name: Deploy to App Engine
          working_directory: ~/workbench/api
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              ./project.rb deploy \
                --project all-of-us-workbench-test \
                --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \
                --version circle-ci-test \
                --promote
            elif [[ "${CIRCLE_TAG}" = v* ]]; then
             ./project.rb deploy \
               --project all-of-us-rw-staging \
               --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \
               --version "${CIRCLE_TAG}" \
               --promote
            else
              echo "Not master branch or tagged release, skipping deploy"
            fi

  api-deps-check:
    <<: *java_defaults
    steps:
      - checkout
      - run:
          command: git submodule update --init --recursive
      - run:
          name: Scan dependencies for vulnerabilities
          working_directory: ~/workbench/api
          command: |
            ./project.rb gradle dependencyCheckAnalyze --info

  api-integration-test:
    <<: *java_defaults
    steps:
      - checkout
      - run:
          name: Fetch Submodules
          command: git submodule update --init --recursive
      - restore_cache:
          keys:
          - api-integration-cache-{{ checksum "~/workbench/api/build.gradle" }}
          - api-integration-cache-
      - run:
          working_directory: ~/workbench
          # Used to call gsutil from the circle environment.
          command: ci/activate_creds.sh api/circle-sa-key.json
      - run:
          working_directory: ~/workbench/api
          command: ./project.rb integration
      - save_cache:
          paths:
            - ~/.gradle
            - ~/.m2
          key: api-integration-cache-{{ checksum "~/workbench/api/build.gradle" }}

  api-bigquery-test:
    <<: *java_defaults
    steps:
      - checkout
      - run:
          name: Fetch Submodules
          command: git submodule update --init --recursive
      - restore_cache:
          keys:
          - api-integration-cache-{{ checksum "~/workbench/api/build.gradle" }}
          - api-integration-cache-
      - run:
          working_directory: ~/workbench
          # Used to call gsutil from the circle environment.
          command: ci/activate_creds.sh api/circle-sa-key.json
      - run:
          working_directory: ~/workbench/api
          command: ./project.rb bigquerytest
      - save_cache:
          paths:
            - ~/.gradle
            - ~/.m2
          key: api-integration-cache-{{ checksum "~/workbench/api/build.gradle" }}

  ui-build-test:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Fetch Submodules
          command: git submodule update --init --recursive
      - run:
          working_directory: ~/workbench
          name: Download Swagger CLI
          command: |
            ruby -r ./aou-utils/swagger.rb -e Workbench::Swagger.download_swagger_codegen_cli
      - restore_cache:
          keys:
          - ui-cache-{{ checksum "~/workbench/ui/package.json" }}
          - ui-cache-
      - run:
          working_directory: ~/workbench/ui
          command: yarn install && yarn codegen
      - save_cache:
          paths:
            - ~/workbench/ui/node_modules
          key: ui-cache-{{ checksum "~/workbench/ui/package.json" }}
      - run:
          name: Lint Angular app
          working_directory: ~/workbench/ui
          command: yarn run lint
      - run:
          name: Run Angular tests
          working_directory: ~/workbench/ui
          command: |
            yarn test --no-watch --no-progress --browsers=ChromeHeadless
      - run:
          name: Build with strict compilation
          working_directory: ~/workbench/ui
          command: ./project.rb build --environment test
      - persist_to_workspace:
          root: .
          paths:
            - ui

  ui-deploy:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: git submodule update --init --recursive
      # Use the ui-build-test workspace here to avoid redoing the setup.
      - attach_workspace:
          at: .
      - deploy:
          name: Deploy to App Engine
          working_directory: ~/workbench/ui
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              ../ci/activate_creds.sh circle-sa-key.json
              ./project.rb deploy-ui \
                --project all-of-us-workbench-test \
                --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \
                --version circle-ci-test \
                --promote
            elif [[ "${CIRCLE_TAG}" = v* ]]; then
              ../ci/activate_creds.sh circle-sa-key.json
              ./project.rb deploy-ui \
                --project all-of-us-rw-staging \
                --account circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com \
                --version "${CIRCLE_TAG}" \
                --promote
            else
              echo "Not master branch or tagged release, skipping deploy"
            fi

# This filter includes all branches (no branch constraint) + tags with
# a prefix of "v". See https://circleci.com/docs/2.0/workflows/#git-tag-job-execution
filter_all: &filter_all
  filters:
    tags:
      only: /^v.*/
filter_releases: &filter_releases
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v.*/

# Note: We block on these jobs, *if they run*. A requirement is
# considered to be satisfied if that job did not run for the given
# branch/filter. For example, on master merge "api-deploy" would
# still be triggered despite "api-integration-test" being skipped.
deploy_config: &deploy_config
  requires:
    - api-local-test
    - api-build-test
    - api-bigquery-test
    - api-deps-check
    - api-integration-test
    - ui-build-test
  # Only deploy on master merge or release.
  filters:
    branches:
      only: master
    tags:
      only: /^v.*/

workflows:
  version: 2
  build-test-deploy:
    jobs:
      # Always run basic test/lint/compilation (open PRs, master merge, tags).
      - api-local-test:
          <<: *filter_all
      - api-build-test:
          <<: *filter_all
      - ui-build-test:
          <<: *filter_all
      # Run slower integration tests and dep checks on release tag.
      - api-bigquery-test:
          <<: *filter_releases
      - api-deps-check:
          <<: *filter_releases
      - api-integration-test:
          <<: *filter_releases
      # Run deployment to "test" on master merge, or "staging" on release tag.
      - api-deploy:
          <<: *deploy_config
      - ui-deploy:
          <<: *deploy_config
  integration-test:
    triggers:
      - schedule:
          # Run this command once every day at 4:00AM UTC
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - api-integration-test
  bigquery-test:
    triggers:
      - schedule:
          # Run this command once every day at 4:00AM UTC
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - api-bigquery-test

experimental:
  notify:
    branches:
      only:
        - master
